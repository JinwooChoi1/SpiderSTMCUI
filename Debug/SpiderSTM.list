
SpiderSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc4c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800be2c  0800be2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfec  0800bfec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfec  0800bfec  0001bfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bff4  0800bff4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bff4  0800bff4  0001bff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bffc  0800bffc  0001bffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cb0  20000074  0800c078  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d24  0800c078  00021d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf44  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf4  00000000  00000000  0004bfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e20  00000000  00000000  00050ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c78  00000000  00000000  00052b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002358c  00000000  00000000  00054778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002164d  00000000  00000000  00077d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8568  00000000  00000000  00099351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001718b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008734  00000000  00000000  0017190c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be14 	.word	0x0800be14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800be14 	.word	0x0800be14

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN3LCD8Delay_msEh>:
  uint32_t  Div = (SysTick->LOAD+1)/1000;
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));
}
//############################################################################################
void LCD::Delay_ms(uint8_t ms){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  #ifdef CMSIS_OS_H_
  osDelay(ms);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4618      	mov	r0, r3
 8000526:	f008 f82e 	bl	8008586 <osDelay>
  #else
  HAL_Delay(ms);
  #endif
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_ZN3LCD5beginEP19__I2C_HandleTypeDefh>:
//############################################################################################
void LCD::begin(I2C_HandleTypeDef* _hi2c, uint8_t _address){
 8000532:	b580      	push	{r7, lr}
 8000534:	b08a      	sub	sp, #40	; 0x28
 8000536:	af04      	add	r7, sp, #16
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	4613      	mov	r3, r2
 800053e:	71fb      	strb	r3, [r7, #7]
	hi2c = _hi2c;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	60da      	str	r2, [r3, #12]
	address = _address << 1;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	741a      	strb	r2, [r3, #16]
	uint8_t GPIOA_config = 0x1F;
 8000550:	231f      	movs	r3, #31
 8000552:	75fb      	strb	r3, [r7, #23]
	uint8_t GPIOA_turnon = 0xC0;
 8000554:	23c0      	movs	r3, #192	; 0xc0
 8000556:	75bb      	strb	r3, [r7, #22]
	uint8_t GPIOB_config = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, address, MCP23017_IODIRA, 1, &GPIOA_config, 1, 100);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	68d8      	ldr	r0, [r3, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	7c1b      	ldrb	r3, [r3, #16]
 8000564:	b299      	uxth	r1, r3
 8000566:	2364      	movs	r3, #100	; 0x64
 8000568:	9302      	str	r3, [sp, #8]
 800056a:	2301      	movs	r3, #1
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	f107 0317 	add.w	r3, r7, #23
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	2200      	movs	r2, #0
 8000578:	f002 f94e 	bl	8002818 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, address, MCP23017_GPPUA, 1, &GPIOA_config, 1, 100);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68d8      	ldr	r0, [r3, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	7c1b      	ldrb	r3, [r3, #16]
 8000584:	b299      	uxth	r1, r3
 8000586:	2364      	movs	r3, #100	; 0x64
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	2301      	movs	r3, #1
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	f107 0317 	add.w	r3, r7, #23
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2301      	movs	r3, #1
 8000596:	220c      	movs	r2, #12
 8000598:	f002 f93e 	bl	8002818 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, address, MCP23017_GPIOA, 1, &GPIOA_turnon, 1, 100);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68d8      	ldr	r0, [r3, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	7c1b      	ldrb	r3, [r3, #16]
 80005a4:	b299      	uxth	r1, r3
 80005a6:	2364      	movs	r3, #100	; 0x64
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	f107 0316 	add.w	r3, r7, #22
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	2212      	movs	r2, #18
 80005b8:	f002 f92e 	bl	8002818 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, address, MCP23017_IODIRB, 1, &GPIOB_config, 1, 100);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	68d8      	ldr	r0, [r3, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	7c1b      	ldrb	r3, [r3, #16]
 80005c4:	b299      	uxth	r1, r3
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	f107 0315 	add.w	r3, r7, #21
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	2201      	movs	r2, #1
 80005d8:	f002 f91e 	bl	8002818 <HAL_I2C_Mem_Write>

	/* Set cursor pointer to beginning for LCD */
	Opts.currentX = 0;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2200      	movs	r2, #0
 80005e0:	71da      	strb	r2, [r3, #7]
	Opts.currentY = 0;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2200      	movs	r2, #0
 80005e6:	721a      	strb	r2, [r3, #8]
	Opts.DisplayFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_1LINE;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2200      	movs	r2, #0
 80005ec:	715a      	strb	r2, [r3, #5]
	if (LCD_ROWS > 1)
		Opts.DisplayFunction |= LCD_2LINE;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	f043 0308 	orr.w	r3, r3, #8
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	715a      	strb	r2, [r3, #5]
	/* Try to set 4bit mode */
	RawCmd(0x03);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2103      	movs	r1, #3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f000 f94a 	bl	800089a <_ZN3LCD6RawCmdEhh>
	Delay_ms(5);
 8000606:	2005      	movs	r0, #5
 8000608:	f7ff ff86 	bl	8000518 <_ZN3LCD8Delay_msEh>
	/* Second try */
	RawCmd(0x03);
 800060c:	2200      	movs	r2, #0
 800060e:	2103      	movs	r1, #3
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f000 f942 	bl	800089a <_ZN3LCD6RawCmdEhh>
	Delay_ms(5);
 8000616:	2005      	movs	r0, #5
 8000618:	f7ff ff7e 	bl	8000518 <_ZN3LCD8Delay_msEh>
	/* Third goo! */
	RawCmd(0x03);
 800061c:	2200      	movs	r2, #0
 800061e:	2103      	movs	r1, #3
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f000 f93a 	bl	800089a <_ZN3LCD6RawCmdEhh>
	Delay_ms(5);
 8000626:	2005      	movs	r0, #5
 8000628:	f7ff ff76 	bl	8000518 <_ZN3LCD8Delay_msEh>
	/* Set 4-bit interface */
	RawCmd(0x02);
 800062c:	2200      	movs	r2, #0
 800062e:	2102      	movs	r1, #2
 8000630:	68f8      	ldr	r0, [r7, #12]
 8000632:	f000 f932 	bl	800089a <_ZN3LCD6RawCmdEhh>
	Delay_ms(5);
 8000636:	2005      	movs	r0, #5
 8000638:	f7ff ff6e 	bl	8000518 <_ZN3LCD8Delay_msEh>
	/* Set # lines, font size, etc. */
	Cmd(LCD_FUNCTIONSET | Opts.DisplayFunction);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	f043 0320 	orr.w	r3, r3, #32
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f000 f8e8 	bl	800081e <_ZN3LCD3CmdEh>
	/* Turn the display on with no cursor or blinking default */
	Opts.DisplayControl = LCD_DISPLAYON;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2204      	movs	r2, #4
 8000652:	711a      	strb	r2, [r3, #4]
	DisplayOn();
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f000 f8ca 	bl	80007ee <_ZN3LCD9DisplayOnEv>
	Clear();
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 f848 	bl	80006f0 <_ZN3LCD5ClearEv>
	/* Default font directions */
	Opts.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2202      	movs	r2, #2
 8000664:	719a      	strb	r2, [r3, #6]
	Cmd(LCD_ENTRYMODESET | Opts.DisplayMode);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	799b      	ldrb	r3, [r3, #6]
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f000 f8d3 	bl	800081e <_ZN3LCD3CmdEh>
	Delay_ms(5);
 8000678:	2005      	movs	r0, #5
 800067a:	f7ff ff4d 	bl	8000518 <_ZN3LCD8Delay_msEh>
}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <_ZN3LCDC1Ev>:
LCD::LCD(){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <_ZN3LCDC1Ev+0x24>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	725a      	strb	r2, [r3, #9]
}
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	0800bef8 	.word	0x0800bef8

080006b0 <_ZN3LCDD1Ev>:
LCD::~LCD() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <_ZN3LCDD1Ev+0x1c>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	0800bef8 	.word	0x0800bef8

080006d0 <_ZN3LCDD0Ev>:
LCD::~LCD() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
}
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffe9 	bl	80006b0 <_ZN3LCDD1Ev>
 80006de:	2118      	movs	r1, #24
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f00a fe03 	bl	800b2ec <_ZdlPvj>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_ZN3LCD5ClearEv>:
//############################################################################################
void LCD::Clear(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	Cmd(LCD_CLEARDISPLAY);
 80006f8:	2101      	movs	r1, #1
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f88f 	bl	800081e <_ZN3LCD3CmdEh>
	Delay_ms(5);
 8000700:	2005      	movs	r0, #5
 8000702:	f7ff ff09 	bl	8000518 <_ZN3LCD8Delay_msEh>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <_ZN3LCD4PutsEhhPKc>:
//############################################################################################
void LCD::Puts(uint8_t x, uint8_t y, const char* str)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	72fb      	strb	r3, [r7, #11]
 800071c:	4613      	mov	r3, r2
 800071e:	72bb      	strb	r3, [r7, #10]
	LCD::CursorSet(x, y);
 8000720:	7aba      	ldrb	r2, [r7, #10]
 8000722:	7afb      	ldrb	r3, [r7, #11]
 8000724:	4619      	mov	r1, r3
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 f966 	bl	80009f8 <_ZN3LCD9CursorSetEhh>
	while (*str)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d046      	beq.n	80007c2 <_ZN3LCD4PutsEhhPKc+0xb4>
  {
		if (LCD::Opts.currentX >= LCD_COLS)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	79db      	ldrb	r3, [r3, #7]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d910      	bls.n	800075e <_ZN3LCD4PutsEhhPKc+0x50>
    {
			Opts.currentX = 1;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2201      	movs	r2, #1
 8000740:	71da      	strb	r2, [r3, #7]
			Opts.currentY++;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	7a1b      	ldrb	r3, [r3, #8]
 8000746:	3301      	adds	r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	721a      	strb	r2, [r3, #8]
			CursorSet(Opts.currentX, Opts.currentY);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	79d9      	ldrb	r1, [r3, #7]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	7a1b      	ldrb	r3, [r3, #8]
 8000756:	461a      	mov	r2, r3
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f000 f94d 	bl	80009f8 <_ZN3LCD9CursorSetEhh>
		}
		if (*str == '\n')
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d111      	bne.n	800078a <_ZN3LCD4PutsEhhPKc+0x7c>
    {
			Opts.currentX = 1;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2201      	movs	r2, #1
 800076a:	71da      	strb	r2, [r3, #7]
			Opts.currentY++;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	7a1b      	ldrb	r3, [r3, #8]
 8000770:	3301      	adds	r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	721a      	strb	r2, [r3, #8]
			CursorSet(Opts.currentX, Opts.currentY);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	79d9      	ldrb	r1, [r3, #7]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	461a      	mov	r2, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f000 f938 	bl	80009f8 <_ZN3LCD9CursorSetEhh>
 8000788:	e017      	b.n	80007ba <_ZN3LCD4PutsEhhPKc+0xac>
		}
    else if (*str == '\r')
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b0d      	cmp	r3, #13
 8000790:	d107      	bne.n	80007a2 <_ZN3LCD4PutsEhhPKc+0x94>
    {
			CursorSet(0, Opts.currentY);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	7a1b      	ldrb	r3, [r3, #8]
 8000796:	461a      	mov	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f000 f92c 	bl	80009f8 <_ZN3LCD9CursorSetEhh>
 80007a0:	e00b      	b.n	80007ba <_ZN3LCD4PutsEhhPKc+0xac>
		}
    else
    {
			Data(*str);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f000 f857 	bl	800085c <_ZN3LCD4DataEh>
			Opts.currentX++;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	79db      	ldrb	r3, [r3, #7]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	71da      	strb	r2, [r3, #7]
		}
		str++;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3301      	adds	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
	while (*str)
 80007c0:	e7b4      	b.n	800072c <_ZN3LCD4PutsEhhPKc+0x1e>
	}
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_ZN3LCD5PrintEPKc>:
//############################################################################################
void LCD::Print(const char* str){
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
	Clear();
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff8b 	bl	80006f0 <_ZN3LCD5ClearEv>
	Puts(1, 0, str);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff94 	bl	800070e <_ZN3LCD4PutsEhhPKc>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_ZN3LCD9DisplayOnEv>:
//############################################################################################
void LCD::DisplayOn(void){
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
	Opts.DisplayControl |= LCD_DISPLAYON;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	711a      	strb	r2, [r3, #4]
	Cmd(LCD_DISPLAYCONTROL | Opts.DisplayControl);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	791b      	ldrb	r3, [r3, #4]
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 f804 	bl	800081e <_ZN3LCD3CmdEh>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_ZN3LCD3CmdEh>:
void LCD::PutCustom(uint8_t x, uint8_t y, uint8_t location){
	CursorSet(x, y);
	Data(location);
}
//############################################################################################
void LCD::Cmd(uint8_t cmd){
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	70fb      	strb	r3, [r7, #3]
	RSCmd();
 800082a:	2100      	movs	r1, #0
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f8a6 	bl	800097e <_ZN3LCD5RSCmdEh>
	RawCmd(cmd >> 4);
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	111b      	asrs	r3, r3, #4
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f82c 	bl	800089a <_ZN3LCD6RawCmdEhh>
	RawCmd(cmd & 0x0F);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	f003 030f 	and.w	r3, r3, #15
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f823 	bl	800089a <_ZN3LCD6RawCmdEhh>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN3LCD4DataEh>:
//############################################################################################
void LCD::Data(uint8_t data){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	RSCmd(1);
 8000868:	2101      	movs	r1, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f887 	bl	800097e <_ZN3LCD5RSCmdEh>
	RawCmd(data >> 4, 1);
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	111b      	asrs	r3, r3, #4
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2201      	movs	r2, #1
 8000878:	4619      	mov	r1, r3
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f80d 	bl	800089a <_ZN3LCD6RawCmdEhh>
	RawCmd(data & 0x0F, 1);
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2201      	movs	r2, #1
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f804 	bl	800089a <_ZN3LCD6RawCmdEhh>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <_ZN3LCD6RawCmdEhh>:
//############################################################################################
void LCD::RawCmd(uint8_t cmd, uint8_t rs){
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af02      	add	r7, sp, #8
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70fb      	strb	r3, [r7, #3]
 80008a6:	4613      	mov	r3, r2
 80008a8:	70bb      	strb	r3, [r7, #2]
	 *
	 * Command Configuration
	 * -- | -- | -- | -- | D7 | D6 | D5 | D4
	 */

	uint8_t i2ccmd = 0x01;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
	i2ccmd |= ((cmd & 0x08) >> 2);
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	109b      	asrs	r3, r3, #2
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	b25a      	sxtb	r2, r3
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	73fb      	strb	r3, [r7, #15]
	i2ccmd |= (cmd & 0x04);
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]
	i2ccmd |= ((cmd & 0x02) << 2);
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	b25a      	sxtb	r2, r3
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	73fb      	strb	r3, [r7, #15]
	i2ccmd |= ((cmd & 0x01) << 4);
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	b25a      	sxtb	r2, r3
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b25b      	sxtb	r3, r3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	73fb      	strb	r3, [r7, #15]
	//i2ccmd |= cmd << 1;
	i2ccmd |= 1 << 5;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	b2db      	uxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]
	i2ccmd |= rs << 7;
 8000910:	78bb      	ldrb	r3, [r7, #2]
 8000912:	01db      	lsls	r3, r3, #7
 8000914:	b25a      	sxtb	r2, r3
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b25b      	sxtb	r3, r3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]

	#ifdef CMSIS_OS_H_
		osThreadFlagsClear((1 << 0)|(1 << 1));
 8000922:	2003      	movs	r0, #3
 8000924:	f007 fd70 	bl	8008408 <osThreadFlagsClear>
		HAL_I2C_Mem_Write_IT(hi2c, address, MCP23017_GPIOB, 1, &i2ccmd, 1);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68d8      	ldr	r0, [r3, #12]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7c1b      	ldrb	r3, [r3, #16]
 8000930:	b299      	uxth	r1, r3
 8000932:	2301      	movs	r3, #1
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	f107 030f 	add.w	r3, r7, #15
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	2213      	movs	r2, #19
 8000940:	f002 f87e 	bl	8002a40 <HAL_I2C_Mem_Write_IT>
		osThreadFlagsWait(1 << 0, osFlagsWaitAll, 100);
 8000944:	2264      	movs	r2, #100	; 0x64
 8000946:	2101      	movs	r1, #1
 8000948:	2001      	movs	r0, #1
 800094a:	f007 fd9b 	bl	8008484 <osThreadFlagsWait>
	#else
		HAL_I2C_Mem_Write(hi2c, address, MCP23017_GPIOB, 1, &i2ccmd, 1, 100);
	#endif
	ECmd(0);
 800094e:	2100      	movs	r1, #0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f804 	bl	800095e <_ZN3LCD4ECmdEh>
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN3LCD4ECmdEh>:
//############################################################################################
void LCD::ECmd(uint8_t onOff){
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	70fb      	strb	r3, [r7, #3]
	OneCmd(onOff, 5);
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	2205      	movs	r2, #5
 800096e:	4619      	mov	r1, r3
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 f814 	bl	800099e <_ZN3LCD6OneCmdEhh>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <_ZN3LCD5RSCmdEh>:
//############################################################################################
void LCD::RWCmd(uint8_t onOff){
	OneCmd(onOff, 6);
}
//############################################################################################
void LCD::RSCmd(uint8_t onOff){
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	460b      	mov	r3, r1
 8000988:	70fb      	strb	r3, [r7, #3]
	OneCmd(onOff, 7);
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	2207      	movs	r2, #7
 800098e:	4619      	mov	r1, r3
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f804 	bl	800099e <_ZN3LCD6OneCmdEhh>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_ZN3LCD6OneCmdEhh>:
//############################################################################################
void LCD::OneCmd(uint8_t onOff, uint8_t pinNum){
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af02      	add	r7, sp, #8
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	70fb      	strb	r3, [r7, #3]
 80009aa:	4613      	mov	r3, r2
 80009ac:	70bb      	strb	r3, [r7, #2]
	uint8_t i2ccmd = (onOff << pinNum)|1;
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	78bb      	ldrb	r3, [r7, #2]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	73fb      	strb	r3, [r7, #15]
#ifdef CMSIS_OS_H_
  osThreadFlagsClear((1 << 0)|(1 << 1));
 80009c2:	2003      	movs	r0, #3
 80009c4:	f007 fd20 	bl	8008408 <osThreadFlagsClear>
	HAL_I2C_Mem_Write_IT(hi2c, address, MCP23017_GPIOB, 1, &i2ccmd, 1);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68d8      	ldr	r0, [r3, #12]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7c1b      	ldrb	r3, [r3, #16]
 80009d0:	b299      	uxth	r1, r3
 80009d2:	2301      	movs	r3, #1
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	f107 030f 	add.w	r3, r7, #15
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2301      	movs	r3, #1
 80009de:	2213      	movs	r2, #19
 80009e0:	f002 f82e 	bl	8002a40 <HAL_I2C_Mem_Write_IT>
  osThreadFlagsWait(1 << 0, osFlagsWaitAll, 100);
 80009e4:	2264      	movs	r2, #100	; 0x64
 80009e6:	2101      	movs	r1, #1
 80009e8:	2001      	movs	r0, #1
 80009ea:	f007 fd4b 	bl	8008484 <osThreadFlagsWait>
#else
	HAL_I2C_Mem_Write(hi2c, address, MCP23017_GPIOB, 1, &i2ccmd, 1, 100);
#endif
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <_ZN3LCD9CursorSetEhh>:
//############################################################################################
void LCD::CursorSet(uint8_t col, uint8_t row){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
 8000a04:	4613      	mov	r3, r2
 8000a06:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_ZN3LCD9CursorSetEhh+0x58>)
 8000a0a:	60fb      	str	r3, [r7, #12]
	if (row >= LCD_ROWS)
 8000a0c:	78bb      	ldrb	r3, [r7, #2]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d901      	bls.n	8000a16 <_ZN3LCD9CursorSetEhh+0x1e>
		row = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	70bb      	strb	r3, [r7, #2]
	Opts.currentX = col;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	78fa      	ldrb	r2, [r7, #3]
 8000a1a:	71da      	strb	r2, [r3, #7]
	Opts.currentY = row;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	78ba      	ldrb	r2, [r7, #2]
 8000a20:	721a      	strb	r2, [r3, #8]
	Cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000a22:	78bb      	ldrb	r3, [r7, #2]
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	4413      	add	r3, r2
 8000a2a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000a2e:	78fb      	ldrb	r3, [r7, #3]
 8000a30:	4413      	add	r3, r2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff feec 	bl	800081e <_ZN3LCD3CmdEh>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	54144000 	.word	0x54144000

08000a54 <_ZN3LCD8ReadPinsEv>:
//############################################################################################
void LCD::Put(uint8_t data){
	Data(data);
}
//############################################################################################
uint8_t LCD::ReadPins(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	6078      	str	r0, [r7, #4]
	/*
	 * I2C GPIOA Pin Configuration
	 * GREEN | RED | -- | LEFT | UP | DOWN | RIGHT | SELECT
	 */
	uint8_t i2ccmd = 0xC0;
 8000a5c:	23c0      	movs	r3, #192	; 0xc0
 8000a5e:	73fb      	strb	r3, [r7, #15]
	uint8_t val = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73bb      	strb	r3, [r7, #14]
#ifdef CMSIS_OS_H_
  osThreadFlagsClear((1 << 0)|(1 << 1));
 8000a64:	2003      	movs	r0, #3
 8000a66:	f007 fccf 	bl	8008408 <osThreadFlagsClear>
	HAL_I2C_Mem_Write_IT(hi2c, address, MCP23017_GPIOA, 1, &i2ccmd, 1);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68d8      	ldr	r0, [r3, #12]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7c1b      	ldrb	r3, [r3, #16]
 8000a72:	b299      	uxth	r1, r3
 8000a74:	2301      	movs	r3, #1
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	f107 030f 	add.w	r3, r7, #15
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	2212      	movs	r2, #18
 8000a82:	f001 ffdd 	bl	8002a40 <HAL_I2C_Mem_Write_IT>
  osThreadFlagsWait(1 << 0, osFlagsWaitAll, 100);
 8000a86:	2264      	movs	r2, #100	; 0x64
 8000a88:	2101      	movs	r1, #1
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f007 fcfa 	bl	8008484 <osThreadFlagsWait>
  osThreadFlagsClear((1 << 0)|(1 << 1));
 8000a90:	2003      	movs	r0, #3
 8000a92:	f007 fcb9 	bl	8008408 <osThreadFlagsClear>
	HAL_I2C_Mem_Read_IT(hi2c, address, MCP23017_GPIOA, 1, &val, 1);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68d8      	ldr	r0, [r3, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7c1b      	ldrb	r3, [r3, #16]
 8000a9e:	b299      	uxth	r1, r3
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	f107 030e 	add.w	r3, r7, #14
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2301      	movs	r3, #1
 8000aac:	2212      	movs	r2, #18
 8000aae:	f002 f85b 	bl	8002b68 <HAL_I2C_Mem_Read_IT>
  osThreadFlagsWait(1 << 0, osFlagsWaitAll, 100);
 8000ab2:	2264      	movs	r2, #100	; 0x64
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f007 fce4 	bl	8008484 <osThreadFlagsWait>
#else
	HAL_I2C_Mem_Write(hi2c, address, MCP23017_GPIOB, 1, &i2ccmd, 1, 100);
	HAL_I2C_Mem_Read(hi2c, address, MCP23017_GPIOB, 1, &val, 1, 100);
#endif
	return val & 0x1F;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	f003 031f 	and.w	r3, r3, #31
 8000ac2:	b2db      	uxtb	r3, r3
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_ZN3LCD7setTaskEPPv>:
#ifdef CMSIS_OS_H_
void LCD::setTask(osThreadId_t* _LCDTask) {
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	LCDTask = _LCDTask;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	615a      	str	r2, [r3, #20]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_ZN3LCD9setTXFlagEv>:

void LCD::setTXFlag(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(*LCDTask, 1 << 0);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 fc37 	bl	800836c <osThreadFlagsSet>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_ZN3LCD9setRXFlagEv>:

void LCD::setRXFlag(void) {
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(*LCDTask, 1 << 1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2102      	movs	r1, #2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f007 fc28 	bl	800836c <osThreadFlagsSet>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_ZN7DRV2605C1Ev>:
/**************************************************************************/
/*!
  @brief  Instantiates a new DRV2605 class. I2C, no address adjustments or pins
*/
/**************************************************************************/
DRV2605::DRV2605() {}
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	22b4      	movs	r2, #180	; 0xb4
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_ZN7DRV26055beginEP19__I2C_HandleTypeDef>:
  @brief Setup HW using a specified Wire
  @param theWire Pointer to a TwoWire object, defaults to &Wire
  @return Return value from init()
*/
/**************************************************************************/
bool DRV2605::begin(I2C_HandleTypeDef* _hi2c) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	hi2c = _hi2c;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
  return init();
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f805 	bl	8000b60 <_ZN7DRV26054initEv>
 8000b56:	4603      	mov	r3, r0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_ZN7DRV26054initEv>:
/*!
  @brief  Setup the HW
  @return Always true
*/
/**************************************************************************/
bool DRV2605::init() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint8_t id = readRegister8(DRV2605_REG_STATUS);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f88c 	bl	8000c88 <_ZN7DRV260513readRegister8Eh>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
  // Serial.print("Status 0x"); Serial.println(id, HEX);

  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby
 8000b74:	2200      	movs	r2, #0
 8000b76:	2101      	movs	r1, #1
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 f8a7 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2102      	movs	r1, #2
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 f8a2 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f89d 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_WAVESEQ2, 0); // end sequence
 8000b92:	2200      	movs	r2, #0
 8000b94:	2105      	movs	r1, #5
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 f898 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	210d      	movs	r1, #13
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f893 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	210e      	movs	r1, #14
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 f88e 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f889 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_BREAK, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f884 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);
 8000bc4:	2264      	movs	r2, #100	; 0x64
 8000bc6:	2113      	movs	r1, #19
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 f87f 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>

  // ERM open loop

  // turn off N_ERM_LRA
  writeRegister8(DRV2605_REG_FEEDBACK,
                 readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
 8000bce:	211a      	movs	r1, #26
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f859 	bl	8000c88 <_ZN7DRV260513readRegister8Eh>
 8000bd6:	4603      	mov	r3, r0
  writeRegister8(DRV2605_REG_FEEDBACK,
 8000bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	211a      	movs	r1, #26
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f872 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
  // turn on ERM_OPEN_LOOP
  writeRegister8(DRV2605_REG_CONTROL3,
                 readRegister8(DRV2605_REG_CONTROL3) | 0x20);
 8000be8:	211d      	movs	r1, #29
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f84c 	bl	8000c88 <_ZN7DRV260513readRegister8Eh>
 8000bf0:	4603      	mov	r3, r0
  writeRegister8(DRV2605_REG_CONTROL3,
 8000bf2:	f043 0320 	orr.w	r3, r3, #32
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	211d      	movs	r1, #29
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f865 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>

  return true;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZN7DRV260511setWaveformEhh>:
    Playback starts at slot 0 and continues through to slot 7, stopping if it
  encounters a value of 0. A list of available waveforms can be found in
  section 11.2 of the datasheet: http://www.adafruit.com/datasheets/DRV2605.pdf
*/
/**************************************************************************/
void DRV2605::setWaveform(uint8_t slot, uint8_t w) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	70bb      	strb	r3, [r7, #2]
  writeRegister8(DRV2605_REG_WAVESEQ1 + slot, w);
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	3304      	adds	r3, #4
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	78ba      	ldrb	r2, [r7, #2]
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f850 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_ZN7DRV26052goEv>:
/**************************************************************************/
/*!
  @brief Start playback of the waveforms (start moving!).
*/
/**************************************************************************/
void DRV2605::go() { writeRegister8(DRV2605_REG_GO, 1); }
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	210c      	movs	r1, #12
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f843 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_ZN7DRV26054stopEv>:
/**************************************************************************/
/*!
  @brief Stop playback.
*/
/**************************************************************************/
void DRV2605::stop() { writeRegister8(DRV2605_REG_GO, 0); }
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	210c      	movs	r1, #12
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f836 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_ZN7DRV26057setModeEh>:
    5: Real-time playback\n
    6: Diagnostics\n
    7: Auto calibration
*/
/**************************************************************************/
void DRV2605::setMode(uint8_t mode) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
  writeRegister8(DRV2605_REG_MODE, mode);
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	461a      	mov	r2, r3
 8000c78:	2101      	movs	r1, #1
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 f826 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_ZN7DRV260513readRegister8Eh>:
  @brief Read an 8-bit register.
  @param reg The register to read.
  @return 8-bit value of the register.
*/
/**************************************************************************/
uint8_t DRV2605::readRegister8(uint8_t reg) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
#ifdef CMSIS_OS_H_
  osThreadFlagsClear((1 << 0)|(1 << 1));
 8000c94:	2003      	movs	r0, #3
 8000c96:	f007 fbb7 	bl	8008408 <osThreadFlagsClear>
  HAL_I2C_Mem_Read_IT(hi2c, un8_addr, reg, 1, &val, 1);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6858      	ldr	r0, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b299      	uxth	r1, r3
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	2301      	movs	r3, #1
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	f107 030f 	add.w	r3, r7, #15
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f001 ff58 	bl	8002b68 <HAL_I2C_Mem_Read_IT>
  osThreadFlagsWait(1 << 1, osFlagsWaitAll, 100);
 8000cb8:	2264      	movs	r2, #100	; 0x64
 8000cba:	2101      	movs	r1, #1
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f007 fbe1 	bl	8008484 <osThreadFlagsWait>
#else
  HAL_I2C_Mem_Read(hi2c, un8_addr, reg, 1, &val, 1, 100);
#endif
  return val;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <_ZN7DRV260514writeRegister8Ehh>:
  @brief Write an 8-bit register.
  @param reg The register to write.
  @param val The value to write.
*/
/**************************************************************************/
void DRV2605::writeRegister8(uint8_t reg, uint8_t val) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	70bb      	strb	r3, [r7, #2]
#ifdef CMSIS_OS_H_
  osThreadFlagsClear((1 << 0)|(1 << 1));
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f007 fb93 	bl	8008408 <osThreadFlagsClear>
	HAL_I2C_Mem_Write_IT(hi2c, un8_addr, reg, 1, &val, 1);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6858      	ldr	r0, [r3, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b299      	uxth	r1, r3
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	1cbb      	adds	r3, r7, #2
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f001 fea1 	bl	8002a40 <HAL_I2C_Mem_Write_IT>
  osThreadFlagsWait(1 << 0, osFlagsWaitAll, 100);
 8000cfe:	2264      	movs	r2, #100	; 0x64
 8000d00:	2101      	movs	r1, #1
 8000d02:	2001      	movs	r0, #1
 8000d04:	f007 fbbe 	bl	8008484 <osThreadFlagsWait>
#else
  HAL_I2C_Mem_Write(hi2c, un8_addr, reg, 1, &val, 1, 100);
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZN7DRV26057setTaskEPPv>:

#ifdef CMSIS_OS_H_
void DRV2605::setTask(osThreadId_t* _DRVTask) {
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	DRVTask = _DRVTask;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	609a      	str	r2, [r3, #8]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_ZN7DRV26059setTXFlagEv>:

void DRV2605::setTXFlag(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(*DRVTask, 1 << 0);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f007 fb15 	bl	800836c <osThreadFlagsSet>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_ZN7DRV26059setRXFlagEv>:

void DRV2605::setRXFlag(void) {
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(*DRVTask, 1 << 1);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f007 fb06 	bl	800836c <osThreadFlagsSet>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_ZN7DRV26056useLRAEv>:
/**************************************************************************/
/*!
  @brief Use LRA (Linear Resonance Actuator) mode.
*/
/**************************************************************************/
void DRV2605::useLRA() {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  writeRegister8(DRV2605_REG_FEEDBACK,
                 readRegister8(DRV2605_REG_FEEDBACK) | 0x80);
 8000d70:	211a      	movs	r1, #26
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff88 	bl	8000c88 <_ZN7DRV260513readRegister8Eh>
 8000d78:	4603      	mov	r3, r0
  writeRegister8(DRV2605_REG_FEEDBACK,
 8000d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	211a      	movs	r1, #26
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffa1 	bl	8000ccc <_ZN7DRV260514writeRegister8Ehh>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <_write>:
static void MX_I2C2_Init(void);
void StartMainGUITask(void *argument);
void StartVibrationTask(void *argument);

/* USER CODE BEGIN PFP */
extern "C" int _write(int fd, char* ptr, int len) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit_IT(&huart2, (uint8_t *) ptr, len);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <_write+0x24>)
 8000daa:	f005 f845 	bl	8005e38 <HAL_UART_Transmit_IT>
    return len;
 8000dae:	687b      	ldr	r3, [r7, #4]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000128 	.word	0x20000128

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f000 ff61 	bl	8001c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 f82c 	bl	8000e20 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f000 f9ba 	bl	8001140 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000dcc:	f000 f91a 	bl	8001004 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000dd0:	f000 f87c 	bl	8000ecc <_ZL12MX_I2C1_Initv>
  MX_DMA_Init();
 8000dd4:	f000 f982 	bl	80010dc <_ZL11MX_DMA_Initv>
  MX_I2C2_Init();
 8000dd8:	f000 f8c6 	bl	8000f68 <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ddc:	f007 f9ea 	bl	80081b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainGUITask */
  MainGUITaskHandle = osThreadNew(StartMainGUITask, NULL, &MainGUITask_attributes);
 8000de0:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <main+0x4c>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <main+0x50>)
 8000de6:	f007 fa2f 	bl	8008248 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <main+0x54>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of VibrationTask */
  VibrationTaskHandle = osThreadNew(StartVibrationTask, NULL, &VibrationTask_attributes);
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <main+0x58>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <main+0x5c>)
 8000df6:	f007 fa27 	bl	8008248 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <main+0x60>)
 8000dfe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e00:	f007 f9fc 	bl	80081fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <main+0x48>
 8000e06:	bf00      	nop
 8000e08:	0800bf00 	.word	0x0800bf00
 8000e0c:	080012fd 	.word	0x080012fd
 8000e10:	20000278 	.word	0x20000278
 8000e14:	0800bf24 	.word	0x0800bf24
 8000e18:	080014b5 	.word	0x080014b5
 8000e1c:	2000027c 	.word	0x2000027c

08000e20 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	2238      	movs	r2, #56	; 0x38
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f00a fb9a 	bl	800b568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f003 fc54 	bl	80046f0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e52:	2340      	movs	r3, #64	; 0x40
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e56:	2302      	movs	r3, #2
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e62:	2355      	movs	r3, #85	; 0x55
 8000e64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fcee 	bl	8004858 <HAL_RCC_OscConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bf14      	ite	ne
 8000e82:	2301      	movne	r3, #1
 8000e84:	2300      	moveq	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000e8c:	f000 fb6c 	bl	8001568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2303      	movs	r3, #3
 8000e96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 ffed 	bl	8004e88 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf14      	ite	ne
 8000eb4:	2301      	movne	r3, #1
 8000eb6:	2300      	moveq	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000ebe:	f000 fb53 	bl	8001568 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	; 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000ed2:	4a23      	ldr	r2, [pc, #140]	; (8000f60 <_ZL12MX_I2C1_Initv+0x94>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000ed8:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <_ZL12MX_I2C1_Initv+0x98>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f06:	4815      	ldr	r0, [pc, #84]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000f08:	f001 fbf6 	bl	80026f8 <HAL_I2C_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf14      	ite	ne
 8000f12:	2301      	movne	r3, #1
 8000f14:	2300      	moveq	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000f1c:	f000 fb24 	bl	8001568 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f20:	2100      	movs	r1, #0
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000f24:	f003 fb4c 	bl	80045c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf14      	ite	ne
 8000f2e:	2301      	movne	r3, #1
 8000f30:	2300      	moveq	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000f38:	f000 fb16 	bl	8001568 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <_ZL12MX_I2C1_Initv+0x90>)
 8000f40:	f003 fb89 	bl	8004656 <HAL_I2CEx_ConfigDigitalFilter>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf14      	ite	ne
 8000f4a:	2301      	movne	r3, #1
 8000f4c:	2300      	moveq	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000f54:	f000 fb08 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000090 	.word	0x20000090
 8000f60:	40005400 	.word	0x40005400
 8000f64:	10802d9b 	.word	0x10802d9b

08000f68 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f6e:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <_ZL12MX_I2C2_Initv+0x94>)
 8000f70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <_ZL12MX_I2C2_Initv+0x98>)
 8000f76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fa2:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000fa4:	f001 fba8 	bl	80026f8 <HAL_I2C_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf14      	ite	ne
 8000fae:	2301      	movne	r3, #1
 8000fb0:	2300      	moveq	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8000fb8:	f000 fad6 	bl	8001568 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000fc0:	f003 fafe 	bl	80045c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8000fd4:	f000 fac8 	bl	8001568 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <_ZL12MX_I2C2_Initv+0x90>)
 8000fdc:	f003 fb3b 	bl	8004656 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf14      	ite	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	2300      	moveq	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8000ff0:	f000 faba 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000dc 	.word	0x200000dc
 8000ffc:	40005800 	.word	0x40005800
 8001000:	30a0a7fb 	.word	0x30a0a7fb

08001004 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 800100a:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <_ZL19MX_USART2_UART_Initv+0xcc>)
 800100c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 8001048:	2200      	movs	r2, #0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104c:	481f      	ldr	r0, [pc, #124]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 800104e:	f004 fea3 	bl	8005d98 <HAL_UART_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001062:	f000 fa81 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4818      	ldr	r0, [pc, #96]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 800106a:	f006 ff94 	bl	8007f96 <HAL_UARTEx_SetTxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf14      	ite	ne
 8001074:	2301      	movne	r3, #1
 8001076:	2300      	moveq	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800107e:	f000 fa73 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001082:	2100      	movs	r1, #0
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 8001086:	f006 ffc4 	bl	8008012 <HAL_UARTEx_SetRxFifoThreshold>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800109a:	f000 fa65 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 80010a0:	f006 ff40 	bl	8007f24 <HAL_UARTEx_DisableFifoMode>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf14      	ite	ne
 80010aa:	2301      	movne	r3, #1
 80010ac:	2300      	moveq	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80010b4:	f000 fa58 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  printf("Serial Communication Configuration Complete!\n");
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <_ZL19MX_USART2_UART_Initv+0xd0>)
 80010ba:	f00a fb75 	bl	800b7a8 <puts>
  HAL_UART_Receive_IT(&huart2, &uart_data, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	4905      	ldr	r1, [pc, #20]	; (80010d8 <_ZL19MX_USART2_UART_Initv+0xd4>)
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <_ZL19MX_USART2_UART_Initv+0xc8>)
 80010c4:	f004 ff60 	bl	8005f88 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000128 	.word	0x20000128
 80010d0:	40004400 	.word	0x40004400
 80010d4:	0800be48 	.word	0x0800be48
 80010d8:	200002a4 	.word	0x200002a4

080010dc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <_ZL11MX_DMA_Initv+0x60>)
 80010e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <_ZL11MX_DMA_Initv+0x60>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6493      	str	r3, [r2, #72]	; 0x48
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <_ZL11MX_DMA_Initv+0x60>)
 80010f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_ZL11MX_DMA_Initv+0x60>)
 80010fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <_ZL11MX_DMA_Initv+0x60>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6493      	str	r3, [r2, #72]	; 0x48
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <_ZL11MX_DMA_Initv+0x60>)
 8001108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2105      	movs	r1, #5
 8001116:	200b      	movs	r0, #11
 8001118:	f000 fea4 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800111c:	200b      	movs	r0, #11
 800111e:	f000 febb 	bl	8001e98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2105      	movs	r1, #5
 8001126:	200c      	movs	r0, #12
 8001128:	f000 fe9c 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800112c:	200c      	movs	r0, #12
 800112e:	f000 feb3 	bl	8001e98 <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <_ZL12MX_GPIO_Initv+0x78>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <_ZL12MX_GPIO_Initv+0x78>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <_ZL12MX_GPIO_Initv+0x78>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <_ZL12MX_GPIO_Initv+0x78>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <_ZL12MX_GPIO_Initv+0x78>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <_ZL12MX_GPIO_Initv+0x78>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <_ZL12MX_GPIO_Initv+0x7c>)
 800118e:	f001 fa9b 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <_ZL12MX_GPIO_Initv+0x7c>)
 80011ac:	f001 f90a 	bl	80023c4 <HAL_GPIO_Init>

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400

080011c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <HAL_UART_RxCpltCallback+0x24>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d104      	bne.n	80011dc <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_IT(&huart2, &uart_data, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	4904      	ldr	r1, [pc, #16]	; (80011e8 <HAL_UART_RxCpltCallback+0x28>)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_UART_RxCpltCallback+0x2c>)
 80011d8:	f004 fed6 	bl	8005f88 <HAL_UART_Receive_IT>
	}
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40004400 	.word	0x40004400
 80011e8:	200002a4 	.word	0x200002a4
 80011ec:	20000128 	.word	0x20000128

080011f0 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_I2C_MemTxCpltCallback+0x34>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d103      	bne.n	800120a <HAL_I2C_MemTxCpltCallback+0x1a>
		drv.setTXFlag();
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <HAL_I2C_MemTxCpltCallback+0x38>)
 8001204:	f7ff fd92 	bl	8000d2c <_ZN7DRV26059setTXFlagEv>
	}
	else if(hi2c->Instance == I2C2){
		lcd.setTXFlag();
	}
}
 8001208:	e007      	b.n	800121a <HAL_I2C_MemTxCpltCallback+0x2a>
	else if(hi2c->Instance == I2C2){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_I2C_MemTxCpltCallback+0x3c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d102      	bne.n	800121a <HAL_I2C_MemTxCpltCallback+0x2a>
		lcd.setTXFlag();
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <HAL_I2C_MemTxCpltCallback+0x40>)
 8001216:	f7ff fc67 	bl	8000ae8 <_ZN3LCD9setTXFlagEv>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40005400 	.word	0x40005400
 8001228:	20000280 	.word	0x20000280
 800122c:	40005800 	.word	0x40005800
 8001230:	2000028c 	.word	0x2000028c

08001234 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_I2C_MemRxCpltCallback+0x34>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d103      	bne.n	800124e <HAL_I2C_MemRxCpltCallback+0x1a>
		drv.setRXFlag();
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_I2C_MemRxCpltCallback+0x38>)
 8001248:	f7ff fd7f 	bl	8000d4a <_ZN7DRV26059setRXFlagEv>
	}
	else if(hi2c->Instance == I2C2){
		lcd.setRXFlag();
	}
}
 800124c:	e007      	b.n	800125e <HAL_I2C_MemRxCpltCallback+0x2a>
	else if(hi2c->Instance == I2C2){
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d102      	bne.n	800125e <HAL_I2C_MemRxCpltCallback+0x2a>
		lcd.setRXFlag();
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <HAL_I2C_MemRxCpltCallback+0x40>)
 800125a:	f7ff fc54 	bl	8000b06 <_ZN3LCD9setRXFlagEv>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40005400 	.word	0x40005400
 800126c:	20000280 	.word	0x20000280
 8001270:	40005800 	.word	0x40005800
 8001274:	2000028c 	.word	0x2000028c

08001278 <_Z11MenuControlhhRhS_>:
/**
  * @brief  Function implementing the MainGUITask thread.
  * @param  argument: Not used
  * @retval None
  */
void MenuControl(uint8_t btn_state, uint8_t menu_number, uint8_t& menu_index, uint8_t& cur_index){
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60ba      	str	r2, [r7, #8]
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	460b      	mov	r3, r1
 8001288:	73bb      	strb	r3, [r7, #14]
	if(LBtn(btn_state)){
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10e      	bne.n	80012b2 <_Z11MenuControlhhRhS_+0x3a>
		menu_index = (menu_index==0)?(menu_number - 1):(menu_index - 1);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <_Z11MenuControlhhRhS_+0x2c>
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	3b01      	subs	r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	e003      	b.n	80012ac <_Z11MenuControlhhRhS_+0x34>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	7013      	strb	r3, [r2, #0]
		menu_index = (menu_index==(menu_number - 1))?(0):(menu_index + 1);
	}
	else if(SBtn(btn_state)){
		cur_index = menu_index;
	}
}
 80012b0:	e01d      	b.n	80012ee <_Z11MenuControlhhRhS_+0x76>
	else if(RBtn(btn_state)){
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10f      	bne.n	80012dc <_Z11MenuControlhhRhS_+0x64>
		menu_index = (menu_index==(menu_number - 1))?(0):(menu_index + 1);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	7bbb      	ldrb	r3, [r7, #14]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d004      	beq.n	80012d4 <_Z11MenuControlhhRhS_+0x5c>
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	e000      	b.n	80012d6 <_Z11MenuControlhhRhS_+0x5e>
 80012d4:	2200      	movs	r2, #0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	e008      	b.n	80012ee <_Z11MenuControlhhRhS_+0x76>
	else if(SBtn(btn_state)){
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <_Z11MenuControlhhRhS_+0x76>
		cur_index = menu_index;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	701a      	strb	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <_Z16StartMainGUITaskPv>:

/* USER CODE END Header_StartMainGUITask */
void StartMainGUITask(void *argument)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b09e      	sub	sp, #120	; 0x78
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t btn_state = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	const uint8_t menu_number = 3;
 800130a:	2303      	movs	r3, #3
 800130c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	char menu_text[menu_number][16] = {"6Hz Impulse", "40Hz Impulse", "Pure Impulse"};
 8001310:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <_Z16StartMainGUITaskPv+0x194>)
 8001312:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001316:	461d      	mov	r5, r3
 8001318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t menu_index = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t cur_index = 0xFF;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	const uint8_t submenu_number = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	char submenu_text[submenu_number][8] = {"\nStop", "\nExit"};
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <_Z16StartMainGUITaskPv+0x198>)
 800133c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001340:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001342:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char submenu_textf[32];
	uint8_t submenu_index = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
	uint8_t subcur_index = 0xFF;
 800134a:	23ff      	movs	r3, #255	; 0xff
 800134c:	73bb      	strb	r3, [r7, #14]

	uint8_t isPlaying = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	lcd.setTask(&MainGUITaskHandle);
 8001354:	4950      	ldr	r1, [pc, #320]	; (8001498 <_Z16StartMainGUITaskPv+0x19c>)
 8001356:	4851      	ldr	r0, [pc, #324]	; (800149c <_Z16StartMainGUITaskPv+0x1a0>)
 8001358:	f7ff fbb8 	bl	8000acc <_ZN3LCD7setTaskEPPv>
	osDelay(500);
 800135c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001360:	f007 f911 	bl	8008586 <osDelay>
	lcd.begin(&hi2c2);
 8001364:	2220      	movs	r2, #32
 8001366:	494e      	ldr	r1, [pc, #312]	; (80014a0 <_Z16StartMainGUITaskPv+0x1a4>)
 8001368:	484c      	ldr	r0, [pc, #304]	; (800149c <_Z16StartMainGUITaskPv+0x1a0>)
 800136a:	f7ff f8e2 	bl	8000532 <_ZN3LCD5beginEP19__I2C_HandleTypeDefh>
  lcd.DisplayOn();
 800136e:	484b      	ldr	r0, [pc, #300]	; (800149c <_Z16StartMainGUITaskPv+0x1a0>)
 8001370:	f7ff fa3d 	bl	80007ee <_ZN3LCD9DisplayOnEv>
	lcd.Print("   Spider-STM");
 8001374:	494b      	ldr	r1, [pc, #300]	; (80014a4 <_Z16StartMainGUITaskPv+0x1a8>)
 8001376:	4849      	ldr	r0, [pc, #292]	; (800149c <_Z16StartMainGUITaskPv+0x1a0>)
 8001378:	f7ff fa27 	bl	80007ca <_ZN3LCD5PrintEPKc>
  /* Infinite loop */
  for(;;)
  {
    lcd.DisplayOn();
 800137c:	4847      	ldr	r0, [pc, #284]	; (800149c <_Z16StartMainGUITaskPv+0x1a0>)
 800137e:	f7ff fa36 	bl	80007ee <_ZN3LCD9DisplayOnEv>
  	// LEFT | UP | DOWN | RIGHT | SELECT
  	// 0b11111 -> All button is not pushed
  	// 0b01111 -> Left button is pushed
  	btn_state = lcd.ReadPins();
 8001382:	4846      	ldr	r0, [pc, #280]	; (800149c <_Z16StartMainGUITaskPv+0x1a0>)
 8001384:	f7ff fb66 	bl	8000a54 <_ZN3LCD8ReadPinsEv>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

  	if(cur_index == 0xFF){
 800138e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d113      	bne.n	80013be <_Z16StartMainGUITaskPv+0xc2>
  		lcd.Print(menu_text[menu_index]);
 8001396:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800139a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	4413      	add	r3, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	483d      	ldr	r0, [pc, #244]	; (800149c <_Z16StartMainGUITaskPv+0x1a0>)
 80013a6:	f7ff fa10 	bl	80007ca <_ZN3LCD5PrintEPKc>
  		// Menu Control
    	MenuControl(btn_state, menu_number, menu_index, cur_index);
 80013aa:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80013ae:	f107 0243 	add.w	r2, r7, #67	; 0x43
 80013b2:	f897 0076 	ldrb.w	r0, [r7, #118]	; 0x76
 80013b6:	2103      	movs	r1, #3
 80013b8:	f7ff ff5e 	bl	8001278 <_Z11MenuControlhhRhS_>
 80013bc:	e064      	b.n	8001488 <_Z16StartMainGUITaskPv+0x18c>
  	}
  	else{
  		// SubMenu Control
  		if(isPlaying){
 80013be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <_Z16StartMainGUITaskPv+0xdc>
  			strcpy(submenu_text[0], "\nStop");
 80013c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ca:	4a37      	ldr	r2, [pc, #220]	; (80014a8 <_Z16StartMainGUITaskPv+0x1ac>)
 80013cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d0:	6018      	str	r0, [r3, #0]
 80013d2:	3304      	adds	r3, #4
 80013d4:	8019      	strh	r1, [r3, #0]
 80013d6:	e007      	b.n	80013e8 <_Z16StartMainGUITaskPv+0xec>
  		}
  		else{
  			strcpy(submenu_text[0], "\nPlay");
 80013d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013dc:	4a33      	ldr	r2, [pc, #204]	; (80014ac <_Z16StartMainGUITaskPv+0x1b0>)
 80013de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e2:	6018      	str	r0, [r3, #0]
 80013e4:	3304      	adds	r3, #4
 80013e6:	8019      	strh	r1, [r3, #0]
  		}
  		strcpy(submenu_textf, menu_text[cur_index]);
 80013e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80013ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	441a      	add	r2, r3
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00a faa8 	bl	800b950 <strcpy>
  		strcat(submenu_textf, submenu_text[submenu_index]);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	441a      	add	r2, r3
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f00a fa8e 	bl	800b932 <strcat>
  		lcd.Print(submenu_textf);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	481f      	ldr	r0, [pc, #124]	; (800149c <_Z16StartMainGUITaskPv+0x1a0>)
 800141e:	f7ff f9d4 	bl	80007ca <_ZN3LCD5PrintEPKc>
    	MenuControl(btn_state, submenu_number, submenu_index, subcur_index);
 8001422:	f107 030e 	add.w	r3, r7, #14
 8001426:	f107 020f 	add.w	r2, r7, #15
 800142a:	f897 0076 	ldrb.w	r0, [r7, #118]	; 0x76
 800142e:	2102      	movs	r1, #2
 8001430:	f7ff ff22 	bl	8001278 <_Z11MenuControlhhRhS_>
    	switch (subcur_index) {
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <_Z16StartMainGUITaskPv+0x144>
 800143a:	2b01      	cmp	r3, #1
 800143c:	d019      	beq.n	8001472 <_Z16StartMainGUITaskPv+0x176>
    		submenu_index = 0;
    		subcur_index = 0xFF;
    		cur_index = 0xFF;
    		break;
    	default:
    		break;
 800143e:	e023      	b.n	8001488 <_Z16StartMainGUITaskPv+0x18c>
    		if(isPlaying){
 8001440:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00e      	beq.n	8001466 <_Z16StartMainGUITaskPv+0x16a>
    			osThreadFlagsSet(VibrationTaskHandle, 1<<cur_index);
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <_Z16StartMainGUITaskPv+0x1b4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8001450:	4611      	mov	r1, r2
 8001452:	2201      	movs	r2, #1
 8001454:	408a      	lsls	r2, r1
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f006 ff87 	bl	800836c <osThreadFlagsSet>
    			isPlaying = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001464:	e002      	b.n	800146c <_Z16StartMainGUITaskPv+0x170>
    			isPlaying = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    		subcur_index = 0xFF;
 800146c:	23ff      	movs	r3, #255	; 0xff
 800146e:	73bb      	strb	r3, [r7, #14]
    		break;
 8001470:	e00a      	b.n	8001488 <_Z16StartMainGUITaskPv+0x18c>
    		isPlaying = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    		submenu_index = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
    		subcur_index = 0xFF;
 800147c:	23ff      	movs	r3, #255	; 0xff
 800147e:	73bb      	strb	r3, [r7, #14]
    		cur_index = 0xFF;
 8001480:	23ff      	movs	r3, #255	; 0xff
 8001482:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    		break;
 8001486:	bf00      	nop
			}
  	}
    osDelay(50);
 8001488:	2032      	movs	r0, #50	; 0x32
 800148a:	f007 f87c 	bl	8008586 <osDelay>
    lcd.DisplayOn();
 800148e:	e775      	b.n	800137c <_Z16StartMainGUITaskPv+0x80>
 8001490:	0800be98 	.word	0x0800be98
 8001494:	0800bec8 	.word	0x0800bec8
 8001498:	20000278 	.word	0x20000278
 800149c:	2000028c 	.word	0x2000028c
 80014a0:	200000dc 	.word	0x200000dc
 80014a4:	0800be78 	.word	0x0800be78
 80014a8:	0800be88 	.word	0x0800be88
 80014ac:	0800be90 	.word	0x0800be90
 80014b0:	2000027c 	.word	0x2000027c

080014b4 <_Z18StartVibrationTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVibrationTask */
void StartVibrationTask(void *argument)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVibrationTask */
	uint8_t rtp_index = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  drv.setTask(&VibrationTaskHandle);
 80014c0:	491d      	ldr	r1, [pc, #116]	; (8001538 <_Z18StartVibrationTaskPv+0x84>)
 80014c2:	481e      	ldr	r0, [pc, #120]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 80014c4:	f7ff fc24 	bl	8000d10 <_ZN7DRV26057setTaskEPPv>
	osDelay(500);
 80014c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014cc:	f007 f85b 	bl	8008586 <osDelay>
	drv.begin(&hi2c1);
 80014d0:	491b      	ldr	r1, [pc, #108]	; (8001540 <_Z18StartVibrationTaskPv+0x8c>)
 80014d2:	481a      	ldr	r0, [pc, #104]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 80014d4:	f7ff fb34 	bl	8000b40 <_ZN7DRV26055beginEP19__I2C_HandleTypeDef>
  drv.useLRA();
 80014d8:	4818      	ldr	r0, [pc, #96]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 80014da:	f7ff fc45 	bl	8000d68 <_ZN7DRV26056useLRAEv>
	drv.setMode(DRV2605_MODE_REALTIME);
 80014de:	2105      	movs	r1, #5
 80014e0:	4816      	ldr	r0, [pc, #88]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 80014e2:	f7ff fbc1 	bl	8000c68 <_ZN7DRV26057setModeEh>
  /* Infinite loop */
  for(;;)
  {
  	osThreadFlagsWait(1<<0, osFlagsWaitAll, osWaitForever);
 80014e6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ea:	2101      	movs	r1, #1
 80014ec:	2001      	movs	r0, #1
 80014ee:	f006 ffc9 	bl	8008484 <osThreadFlagsWait>
  	drv.setMode(DRV2605_MODE_INTTRIG);
 80014f2:	2100      	movs	r1, #0
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 80014f6:	f7ff fbb7 	bl	8000c68 <_ZN7DRV26057setModeEh>
  	drv.setWaveform(0, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2100      	movs	r1, #0
 80014fe:	480f      	ldr	r0, [pc, #60]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 8001500:	f7ff fb84 	bl	8000c0c <_ZN7DRV260511setWaveformEhh>
  	drv.setWaveform(1, 10);
 8001504:	220a      	movs	r2, #10
 8001506:	2101      	movs	r1, #1
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 800150a:	f7ff fb7f 	bl	8000c0c <_ZN7DRV260511setWaveformEhh>
  	drv.setWaveform(2, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2102      	movs	r1, #2
 8001512:	480a      	ldr	r0, [pc, #40]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 8001514:	f7ff fb7a 	bl	8000c0c <_ZN7DRV260511setWaveformEhh>
  	drv.go();
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 800151a:	f7ff fb8b 	bl	8000c34 <_ZN7DRV26052goEv>
  	osDelay(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001522:	f007 f830 	bl	8008586 <osDelay>
  	drv.stop();
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <_Z18StartVibrationTaskPv+0x88>)
 8001528:	f7ff fb91 	bl	8000c4e <_ZN7DRV26054stopEv>
  	osDelay(1000);
 800152c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001530:	f007 f829 	bl	8008586 <osDelay>
  	osThreadFlagsWait(1<<0, osFlagsWaitAll, osWaitForever);
 8001534:	e7d7      	b.n	80014e6 <_Z18StartVibrationTaskPv+0x32>
 8001536:	bf00      	nop
 8001538:	2000027c 	.word	0x2000027c
 800153c:	20000280 	.word	0x20000280
 8001540:	20000090 	.word	0x20000090

08001544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001556:	f000 fbaf 	bl	8001cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40014800 	.word	0x40014800

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10a      	bne.n	800159a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158a:	4293      	cmp	r3, r2
 800158c:	d105      	bne.n	800159a <_Z41__static_initialization_and_destruction_0ii+0x26>
DRV2605 drv;
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001590:	f7ff fac8 	bl	8000b24 <_ZN7DRV2605C1Ev>
LCD lcd;
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001596:	f7ff f877 	bl	8000688 <_ZN3LCDC1Ev>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d107      	bne.n	80015b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d102      	bne.n	80015b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80015ac:	f7ff f880 	bl	80006b0 <_ZN3LCDD1Ev>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000280 	.word	0x20000280
 80015bc:	2000028c 	.word	0x2000028c

080015c0 <_GLOBAL__sub_I_hi2c1>:
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff ffd3 	bl	8001574 <_Z41__static_initialization_and_destruction_0ii>
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_GLOBAL__sub_D_hi2c1>:
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff ffcb 	bl	8001574 <_Z41__static_initialization_and_destruction_0ii>
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_MspInit+0x50>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ea:	4a11      	ldr	r2, [pc, #68]	; (8001630 <HAL_MspInit+0x50>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6613      	str	r3, [r2, #96]	; 0x60
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_MspInit+0x50>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x50>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_MspInit+0x50>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6593      	str	r3, [r2, #88]	; 0x58
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_MspInit+0x50>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	210f      	movs	r1, #15
 800161a:	f06f 0001 	mvn.w	r0, #1
 800161e:	f000 fc21 	bl	8001e64 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001622:	f003 f909 	bl	8004838 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b09e      	sub	sp, #120	; 0x78
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	2244      	movs	r2, #68	; 0x44
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f009 ff87 	bl	800b568 <memset>
  if(hi2c->Instance==I2C1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a5c      	ldr	r2, [pc, #368]	; (80017d0 <HAL_I2C_MspInit+0x19c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d164      	bne.n	800172e <HAL_I2C_MspInit+0xfa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001664:	2340      	movs	r3, #64	; 0x40
 8001666:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001668:	2300      	movs	r3, #0
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fe57 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800167c:	f7ff ff74 	bl	8001568 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4a53      	ldr	r2, [pc, #332]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168c:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b6:	2312      	movs	r3, #18
 80016b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c2:	2304      	movs	r3, #4
 80016c4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f000 fe78 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d8:	2312      	movs	r3, #18
 80016da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016dc:	2301      	movs	r3, #1
 80016de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e4:	2304      	movs	r3, #4
 80016e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016ec:	4619      	mov	r1, r3
 80016ee:	483a      	ldr	r0, [pc, #232]	; (80017d8 <HAL_I2C_MspInit+0x1a4>)
 80016f0:	f000 fe68 	bl	80023c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 80016fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001700:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2105      	movs	r1, #5
 8001710:	201f      	movs	r0, #31
 8001712:	f000 fba7 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001716:	201f      	movs	r0, #31
 8001718:	f000 fbbe 	bl	8001e98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2105      	movs	r1, #5
 8001720:	2020      	movs	r0, #32
 8001722:	f000 fb9f 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001726:	2020      	movs	r0, #32
 8001728:	f000 fbb6 	bl	8001e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800172c:	e04c      	b.n	80017c8 <HAL_I2C_MspInit+0x194>
  else if(hi2c->Instance==I2C2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <HAL_I2C_MspInit+0x1a8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d147      	bne.n	80017c8 <HAL_I2C_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800173c:	2300      	movs	r3, #0
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	4618      	mov	r0, r3
 8001746:	f003 fded 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2C_MspInit+0x120>
      Error_Handler();
 8001750:	f7ff ff0a 	bl	8001568 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001770:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001772:	2312      	movs	r3, #18
 8001774:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001776:	2301      	movs	r3, #1
 8001778:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800177e:	2304      	movs	r3, #4
 8001780:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178c:	f000 fe1a 	bl	80023c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 8001796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800179a:	6593      	str	r3, [r2, #88]	; 0x58
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_I2C_MspInit+0x1a0>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2105      	movs	r1, #5
 80017ac:	2021      	movs	r0, #33	; 0x21
 80017ae:	f000 fb59 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80017b2:	2021      	movs	r0, #33	; 0x21
 80017b4:	f000 fb70 	bl	8001e98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2105      	movs	r1, #5
 80017bc:	2022      	movs	r0, #34	; 0x22
 80017be:	f000 fb51 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80017c2:	2022      	movs	r0, #34	; 0x22
 80017c4:	f000 fb68 	bl	8001e98 <HAL_NVIC_EnableIRQ>
}
 80017c8:	bf00      	nop
 80017ca:	3778      	adds	r7, #120	; 0x78
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	40005800 	.word	0x40005800

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09a      	sub	sp, #104	; 0x68
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	2244      	movs	r2, #68	; 0x44
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f009 feb1 	bl	800b568 <memset>
  if(huart->Instance==USART2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_UART_MspInit+0x15c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	f040 8091 	bne.w	8001934 <HAL_UART_MspInit+0x154>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001812:	2302      	movs	r3, #2
 8001814:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fd80 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800182a:	f7ff fe9d 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182e:	4b44      	ldr	r3, [pc, #272]	; (8001940 <HAL_UART_MspInit+0x160>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a43      	ldr	r2, [pc, #268]	; (8001940 <HAL_UART_MspInit+0x160>)
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <HAL_UART_MspInit+0x160>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_UART_MspInit+0x160>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a3d      	ldr	r2, [pc, #244]	; (8001940 <HAL_UART_MspInit+0x160>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_UART_MspInit+0x160>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800185e:	230c      	movs	r3, #12
 8001860:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186e:	2307      	movs	r3, #7
 8001870:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f000 fda2 	bl	80023c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_UART_MspInit+0x164>)
 8001882:	4a31      	ldr	r2, [pc, #196]	; (8001948 <HAL_UART_MspInit+0x168>)
 8001884:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_UART_MspInit+0x164>)
 8001888:	221a      	movs	r2, #26
 800188a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_UART_MspInit+0x164>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001892:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <HAL_UART_MspInit+0x164>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_UART_MspInit+0x164>)
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_UART_MspInit+0x164>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_UART_MspInit+0x164>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_UART_MspInit+0x164>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_UART_MspInit+0x164>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018b6:	4823      	ldr	r0, [pc, #140]	; (8001944 <HAL_UART_MspInit+0x164>)
 80018b8:	f000 fafc 	bl	8001eb4 <HAL_DMA_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80018c2:	f7ff fe51 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_UART_MspInit+0x164>)
 80018ca:	67da      	str	r2, [r3, #124]	; 0x7c
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_UART_MspInit+0x164>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_UART_MspInit+0x16c>)
 80018d4:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <HAL_UART_MspInit+0x170>)
 80018d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_UART_MspInit+0x16c>)
 80018da:	221b      	movs	r2, #27
 80018dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_UART_MspInit+0x16c>)
 80018e0:	2210      	movs	r2, #16
 80018e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_UART_MspInit+0x16c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x16c>)
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_UART_MspInit+0x16c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x16c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_UART_MspInit+0x16c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_UART_MspInit+0x16c>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001908:	4810      	ldr	r0, [pc, #64]	; (800194c <HAL_UART_MspInit+0x16c>)
 800190a:	f000 fad3 	bl	8001eb4 <HAL_DMA_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001914:	f7ff fe28 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_UART_MspInit+0x16c>)
 800191c:	679a      	str	r2, [r3, #120]	; 0x78
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_UART_MspInit+0x16c>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2105      	movs	r1, #5
 8001928:	2026      	movs	r0, #38	; 0x26
 800192a:	f000 fa9b 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800192e:	2026      	movs	r0, #38	; 0x26
 8001930:	f000 fab2 	bl	8001e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3768      	adds	r7, #104	; 0x68
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40004400 	.word	0x40004400
 8001940:	40021000 	.word	0x40021000
 8001944:	200001b8 	.word	0x200001b8
 8001948:	40020008 	.word	0x40020008
 800194c:	20000218 	.word	0x20000218
 8001950:	4002001c 	.word	0x4002001c

08001954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_InitTick+0xcc>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	4a2c      	ldr	r2, [pc, #176]	; (8001a20 <HAL_InitTick+0xcc>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6613      	str	r3, [r2, #96]	; 0x60
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_InitTick+0xcc>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001982:	f107 020c 	add.w	r2, r7, #12
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fc51 	bl	8005234 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001992:	f003 fc39 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8001996:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <HAL_InitTick+0xd0>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	0c9b      	lsrs	r3, r3, #18
 80019a2:	3b01      	subs	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_InitTick+0xd4>)
 80019a8:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <HAL_InitTick+0xd8>)
 80019aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <HAL_InitTick+0xd4>)
 80019ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019b2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_InitTick+0xd4>)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_InitTick+0xd4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_InitTick+0xd4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <HAL_InitTick+0xd4>)
 80019c8:	f003 fe9c 	bl	8005704 <HAL_TIM_Base_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80019d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d11b      	bne.n	8001a12 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <HAL_InitTick+0xd4>)
 80019dc:	f003 fef4 	bl	80057c8 <HAL_TIM_Base_Start_IT>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d111      	bne.n	8001a12 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80019ee:	201a      	movs	r0, #26
 80019f0:	f000 fa52 	bl	8001e98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	d808      	bhi.n	8001a0c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80019fa:	2200      	movs	r2, #0
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	201a      	movs	r0, #26
 8001a00:	f000 fa30 	bl	8001e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_InitTick+0xdc>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e002      	b.n	8001a12 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3730      	adds	r7, #48	; 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	20001c84 	.word	0x20001c84
 8001a2c:	40014800 	.word	0x40014800
 8001a30:	20000004 	.word	0x20000004

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler+0x4>

08001a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <DMA1_Channel1_IRQHandler+0x10>)
 8001a66:	f000 fb8d 	bl	8002184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200001b8 	.word	0x200001b8

08001a74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <DMA1_Channel2_IRQHandler+0x10>)
 8001a7a:	f000 fb83 	bl	8002184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000218 	.word	0x20000218

08001a88 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001a8e:	f003 ff05 	bl	800589c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20001c84 	.word	0x20001c84

08001a9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <I2C1_EV_IRQHandler+0x10>)
 8001aa2:	f001 f8f7 	bl	8002c94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000090 	.word	0x20000090

08001ab0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <I2C1_ER_IRQHandler+0x10>)
 8001ab6:	f001 f907 	bl	8002cc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000090 	.word	0x20000090

08001ac4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <I2C2_EV_IRQHandler+0x10>)
 8001aca:	f001 f8e3 	bl	8002c94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200000dc 	.word	0x200000dc

08001ad8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <I2C2_ER_IRQHandler+0x10>)
 8001ade:	f001 f8f3 	bl	8002cc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000dc 	.word	0x200000dc

08001aec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <USART2_IRQHandler+0x10>)
 8001af2:	f004 fa9f 	bl	8006034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000128 	.word	0x20000128

08001b00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e00a      	b.n	8001b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b12:	f3af 8000 	nop.w
 8001b16:	4601      	mov	r1, r0
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf0      	blt.n	8001b12 <_read+0x12>
	}

return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
	return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b62:	605a      	str	r2, [r3, #4]
	return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_isatty>:

int _isatty(int file)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
	return 1;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
	return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <_sbrk+0x5c>)
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <_sbrk+0x60>)
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <_sbrk+0x64>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <_sbrk+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d207      	bcs.n	8001be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd4:	f009 fb8e 	bl	800b2f4 <__errno>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	220c      	movs	r2, #12
 8001bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e009      	b.n	8001bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <_sbrk+0x64>)
 8001bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20008000 	.word	0x20008000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	200002a8 	.word	0x200002a8
 8001c0c:	20001d28 	.word	0x20001d28

08001c10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c3a:	490e      	ldr	r1, [pc, #56]	; (8001c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <LoopForever+0xe>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c50:	4c0b      	ldr	r4, [pc, #44]	; (8001c80 <LoopForever+0x16>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c5e:	f7ff ffd7 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c62:	f009 fc43 	bl	800b4ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c66:	f7ff f8a9 	bl	8000dbc <main>

08001c6a <LoopForever>:

LoopForever:
    b LoopForever
 8001c6a:	e7fe      	b.n	8001c6a <LoopForever>
  ldr   r0, =_estack
 8001c6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c74:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c78:	0800c004 	.word	0x0800c004
  ldr r2, =_sbss
 8001c7c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c80:	20001d24 	.word	0x20001d24

08001c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c84:	e7fe      	b.n	8001c84 <ADC1_2_IRQHandler>

08001c86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f8dc 	bl	8001e4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c96:	200f      	movs	r0, #15
 8001c98:	f7ff fe5c 	bl	8001954 <HAL_InitTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	e001      	b.n	8001cac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca8:	f7ff fc9a 	bl	80015e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cac:	79fb      	ldrb	r3, [r7, #7]

}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_IncTick+0x1c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_IncTick+0x1c>)
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	20001cd0 	.word	0x20001cd0
 8001cd8:	20000008 	.word	0x20000008

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20001cd0 	.word	0x20001cd0

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff4c 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e72:	f7ff ff63 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	6978      	ldr	r0, [r7, #20]
 8001e7e:	f7ff ffb3 	bl	8001de8 <NVIC_EncodePriority>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff82 	bl	8001d94 <__NVIC_SetPriority>
}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff56 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e08d      	b.n	8001fe2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_DMA_Init+0x138>)
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d80f      	bhi.n	8001ef2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <HAL_DMA_Init+0x13c>)
 8001eda:	4413      	add	r3, r2
 8001edc:	4a45      	ldr	r2, [pc, #276]	; (8001ff4 <HAL_DMA_Init+0x140>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	009a      	lsls	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a42      	ldr	r2, [pc, #264]	; (8001ff8 <HAL_DMA_Init+0x144>)
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef0:	e00e      	b.n	8001f10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_DMA_Init+0x148>)
 8001efa:	4413      	add	r3, r2
 8001efc:	4a3d      	ldr	r2, [pc, #244]	; (8001ff4 <HAL_DMA_Init+0x140>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	009a      	lsls	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <HAL_DMA_Init+0x14c>)
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f9cc 	bl	8002300 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f70:	d102      	bne.n	8001f78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <HAL_DMA_Init+0x104>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d80c      	bhi.n	8001fb8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9ec 	bl	800237c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	e008      	b.n	8001fca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40020407 	.word	0x40020407
 8001ff0:	bffdfff8 	.word	0xbffdfff8
 8001ff4:	cccccccd 	.word	0xcccccccd
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	bffdfbf8 	.word	0xbffdfbf8
 8002000:	40020400 	.word	0x40020400

08002004 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d005      	beq.n	8002028 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2204      	movs	r2, #4
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	e037      	b.n	8002098 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 020e 	bic.w	r2, r2, #14
 8002036:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002046:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f202 	lsl.w	r2, r1, r2
 800206a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002074:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002096:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d00d      	beq.n	80020ea <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2204      	movs	r2, #4
 80020d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e047      	b.n	800217a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 020e 	bic.w	r2, r2, #14
 80020f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002118:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f003 021f 	and.w	r2, r3, #31
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002136:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00c      	beq.n	800215a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800214e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002158:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
    }
  }
  return status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2204      	movs	r2, #4
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d026      	beq.n	80021fe <HAL_DMA_IRQHandler+0x7a>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d021      	beq.n	80021fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d107      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0204 	bic.w	r2, r2, #4
 80021d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2104      	movs	r1, #4
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d071      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021fc:	e06c      	b.n	80022d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2202      	movs	r2, #2
 8002208:	409a      	lsls	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d02e      	beq.n	8002270 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d029      	beq.n	8002270 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10b      	bne.n	8002242 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 020a 	bic.w	r2, r2, #10
 8002238:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f003 021f 	and.w	r2, r3, #31
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2102      	movs	r1, #2
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d038      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800226e:	e033      	b.n	80022d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2208      	movs	r2, #8
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d02a      	beq.n	80022da <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d025      	beq.n	80022da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 020e 	bic.w	r2, r2, #14
 800229c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f003 021f 	and.w	r2, r3, #31
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
}
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022f0:	b2db      	uxtb	r3, r3
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002310:	429a      	cmp	r2, r3
 8002312:	d802      	bhi.n	800231a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e001      	b.n	800231e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800231c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3b08      	subs	r3, #8
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	009a      	lsls	r2, r3, #2
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800234a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	651a      	str	r2, [r3, #80]	; 0x50
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40020407 	.word	0x40020407
 800236c:	40020800 	.word	0x40020800
 8002370:	40020820 	.word	0x40020820
 8002374:	cccccccd 	.word	0xcccccccd
 8002378:	40020880 	.word	0x40020880

0800237c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800239e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	1000823f 	.word	0x1000823f
 80023c0:	40020940 	.word	0x40020940

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023d2:	e15a      	b.n	800268a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 814c 	beq.w	8002684 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d005      	beq.n	8002404 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002400:	2b02      	cmp	r3, #2
 8002402:	d130      	bne.n	8002466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800243a:	2201      	movs	r2, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0201 	and.w	r2, r3, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b03      	cmp	r3, #3
 8002470:	d017      	beq.n	80024a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d123      	bne.n	80024f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	220f      	movs	r2, #15
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	6939      	ldr	r1, [r7, #16]
 80024f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0203 	and.w	r2, r3, #3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80a6 	beq.w	8002684 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002538:	4b5b      	ldr	r3, [pc, #364]	; (80026a8 <HAL_GPIO_Init+0x2e4>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	4a5a      	ldr	r2, [pc, #360]	; (80026a8 <HAL_GPIO_Init+0x2e4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6613      	str	r3, [r2, #96]	; 0x60
 8002544:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <HAL_GPIO_Init+0x2e4>)
 8002546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002550:	4a56      	ldr	r2, [pc, #344]	; (80026ac <HAL_GPIO_Init+0x2e8>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800257a:	d01f      	beq.n	80025bc <HAL_GPIO_Init+0x1f8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <HAL_GPIO_Init+0x2ec>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d019      	beq.n	80025b8 <HAL_GPIO_Init+0x1f4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_GPIO_Init+0x1f0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <HAL_GPIO_Init+0x2f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00d      	beq.n	80025b0 <HAL_GPIO_Init+0x1ec>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a49      	ldr	r2, [pc, #292]	; (80026bc <HAL_GPIO_Init+0x2f8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <HAL_GPIO_Init+0x1e8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_GPIO_Init+0x2fc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_GPIO_Init+0x1e4>
 80025a4:	2305      	movs	r3, #5
 80025a6:	e00a      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025a8:	2306      	movs	r3, #6
 80025aa:	e008      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e006      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b0:	2303      	movs	r3, #3
 80025b2:	e004      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025bc:	2300      	movs	r3, #0
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	f002 0203 	and.w	r2, r2, #3
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	4093      	lsls	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ce:	4937      	ldr	r1, [pc, #220]	; (80026ac <HAL_GPIO_Init+0x2e8>)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025dc:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_GPIO_Init+0x300>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002600:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800262a:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <HAL_GPIO_Init+0x300>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002654:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_GPIO_Init+0x300>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f ae9d 	bne.w	80023d4 <HAL_GPIO_Init+0x10>
  }
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800
 80026b8:	48000c00 	.word	0x48000c00
 80026bc:	48001000 	.word	0x48001000
 80026c0:	48001400 	.word	0x48001400
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
 80026d4:	4613      	mov	r3, r2
 80026d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e081      	b.n	800280e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe ff88 	bl	8001634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e006      	b.n	8002780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800277e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d104      	bne.n	8002792 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69d9      	ldr	r1, [r3, #28]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1a      	ldr	r2, [r3, #32]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	817b      	strh	r3, [r7, #10]
 800282a:	460b      	mov	r3, r1
 800282c:	813b      	strh	r3, [r7, #8]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	f040 80f9 	bne.w	8002a32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_I2C_Mem_Write+0x34>
 8002846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002852:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0ed      	b.n	8002a34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_I2C_Mem_Write+0x4e>
 8002862:	2302      	movs	r3, #2
 8002864:	e0e6      	b.n	8002a34 <HAL_I2C_Mem_Write+0x21c>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800286e:	f7ff fa35 	bl	8001cdc <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2319      	movs	r3, #25
 800287a:	2201      	movs	r2, #1
 800287c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f001 fc00 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0d1      	b.n	8002a34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2221      	movs	r2, #33	; 0x21
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b8:	88f8      	ldrh	r0, [r7, #6]
 80028ba:	893a      	ldrh	r2, [r7, #8]
 80028bc:	8979      	ldrh	r1, [r7, #10]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	4603      	mov	r3, r0
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 feb1 	bl	8003630 <I2C_RequestMemoryWrite>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0a9      	b.n	8002a34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2bff      	cmp	r3, #255	; 0xff
 80028e8:	d90e      	bls.n	8002908 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f001 fd69 	bl	80043d8 <I2C_TransferConfig>
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	b2da      	uxtb	r2, r3
 8002918:	8979      	ldrh	r1, [r7, #10]
 800291a:	2300      	movs	r3, #0
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f001 fd58 	bl	80043d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f001 fbea 	bl	8004106 <I2C_WaitOnTXISFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e07b      	b.n	8002a34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d034      	beq.n	80029e0 <HAL_I2C_Mem_Write+0x1c8>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	d130      	bne.n	80029e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f001 fb7c 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e04d      	b.n	8002a34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d90e      	bls.n	80029c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22ff      	movs	r2, #255	; 0xff
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f001 fd0d 	bl	80043d8 <I2C_TransferConfig>
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f001 fcfc 	bl	80043d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d19e      	bne.n	8002928 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f001 fbc9 	bl	8004186 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e01a      	b.n	8002a34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2220      	movs	r2, #32
 8002a04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_I2C_Mem_Write+0x224>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	fe00e800 	.word	0xfe00e800

08002a40 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	817b      	strh	r3, [r7, #10]
 8002a52:	460b      	mov	r3, r1
 8002a54:	813b      	strh	r3, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d176      	bne.n	8002b54 <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_I2C_Mem_Write_IT+0x32>
 8002a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e061      	b.n	8002b56 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_I2C_Mem_Write_IT+0x60>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e05a      	b.n	8002b56 <HAL_I2C_Mem_Write_IT+0x116>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aa8:	f7ff f918 	bl	8001cdc <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2240      	movs	r2, #64	; 0x40
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a3a      	ldr	r2, [r7, #32]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a23      	ldr	r2, [pc, #140]	; (8002b60 <HAL_I2C_Mem_Write_IT+0x120>)
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_I2C_Mem_Write_IT+0x124>)
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2bff      	cmp	r3, #255	; 0xff
 8002ae4:	d906      	bls.n	8002af4 <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	22ff      	movs	r2, #255	; 0xff
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e007      	b.n	8002b04 <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b02:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8002b04:	88f8      	ldrh	r0, [r7, #6]
 8002b06:	893a      	ldrh	r2, [r7, #8]
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	2319      	movs	r3, #25
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	4603      	mov	r3, r0
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fd8b 	bl	8003630 <I2C_RequestMemoryWrite>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_I2C_Mem_Write_IT+0xec>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e014      	b.n	8002b56 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	8979      	ldrh	r1, [r7, #10]
 8002b34:	2300      	movs	r3, #0
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f001 fc4c 	bl	80043d8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b48:	2101      	movs	r1, #1
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f001 fc76 	bl	800443c <I2C_Enable_IRQ>

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	ffff0000 	.word	0xffff0000
 8002b64:	08002e33 	.word	0x08002e33

08002b68 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	813b      	strh	r3, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d176      	bne.n	8002c7c <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_I2C_Mem_Read_IT+0x32>
 8002b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06b      	b.n	8002c7e <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e061      	b.n	8002c7e <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2C_Mem_Read_IT+0x60>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e05a      	b.n	8002c7e <HAL_I2C_Mem_Read_IT+0x116>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd0:	f7ff f884 	bl	8001cdc <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2222      	movs	r2, #34	; 0x22
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2240      	movs	r2, #64	; 0x40
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a3a      	ldr	r2, [r7, #32]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <HAL_I2C_Mem_Read_IT+0x120>)
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <HAL_I2C_Mem_Read_IT+0x124>)
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2bff      	cmp	r3, #255	; 0xff
 8002c0c:	d906      	bls.n	8002c1c <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	22ff      	movs	r2, #255	; 0xff
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e007      	b.n	8002c2c <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002c2c:	88f8      	ldrh	r0, [r7, #6]
 8002c2e:	893a      	ldrh	r2, [r7, #8]
 8002c30:	8979      	ldrh	r1, [r7, #10]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2319      	movs	r3, #25
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fd4b 	bl	80036d8 <I2C_RequestMemoryRead>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e014      	b.n	8002c7e <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	8979      	ldrh	r1, [r7, #10]
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_I2C_Mem_Read_IT+0x128>)
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f001 fbb8 	bl	80043d8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c70:	2102      	movs	r1, #2
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f001 fbe2 	bl	800443c <I2C_Enable_IRQ>

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	ffff0000 	.word	0xffff0000
 8002c8c:	08002e33 	.word	0x08002e33
 8002c90:	80002400 	.word	0x80002400

08002c94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	09db      	lsrs	r3, r3, #7
 8002cf0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	0a9b      	lsrs	r3, r3, #10
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	09db      	lsrs	r3, r3, #7
 8002d1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f043 0208 	orr.w	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	09db      	lsrs	r3, r3, #7
 8002d4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f043 0202 	orr.w	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d68:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 030b 	and.w	r3, r3, #11
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f001 f849 	bl	8003e14 <I2C_ITError>
  }
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	70fb      	strb	r3, [r7, #3]
 8002de6:	4613      	mov	r3, r2
 8002de8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b088      	sub	sp, #32
 8002e36:	af02      	add	r7, sp, #8
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <I2C_Master_ISR_IT+0x1e>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e114      	b.n	800307a <I2C_Master_ISR_IT+0x248>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2210      	movs	r2, #16
 8002e76:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f001 f8bc 	bl	8004002 <I2C_Flush_TXDR>
 8002e8a:	e0e1      	b.n	8003050 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d023      	beq.n	8002ee0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01d      	beq.n	8002ee0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ede:	e0b7      	b.n	8003050 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01e      	beq.n	8002f2a <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d018      	beq.n	8002f2a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f28:	e092      	b.n	8003050 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	09db      	lsrs	r3, r3, #7
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d05d      	beq.n	8002ff2 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d057      	beq.n	8002ff2 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d040      	beq.n	8002fce <I2C_Master_ISR_IT+0x19c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d13c      	bne.n	8002fce <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f60:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2bff      	cmp	r3, #255	; 0xff
 8002f6a:	d90e      	bls.n	8002f8a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	22ff      	movs	r2, #255	; 0xff
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	8a79      	ldrh	r1, [r7, #18]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f001 fa28 	bl	80043d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f88:	e032      	b.n	8002ff0 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f9c:	d00b      	beq.n	8002fb6 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	8a79      	ldrh	r1, [r7, #18]
 8002faa:	2000      	movs	r0, #0
 8002fac:	9000      	str	r0, [sp, #0]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f001 fa12 	bl	80043d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb4:	e01c      	b.n	8002ff0 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	8a79      	ldrh	r1, [r7, #18]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f001 fa06 	bl	80043d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fcc:	e010      	b.n	8002ff0 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fdc:	d003      	beq.n	8002fe6 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fc52 	bl	8003888 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe4:	e034      	b.n	8003050 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002fe6:	2140      	movs	r1, #64	; 0x40
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 ff13 	bl	8003e14 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fee:	e02f      	b.n	8003050 <I2C_Master_ISR_IT+0x21e>
 8002ff0:	e02e      	b.n	8003050 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d028      	beq.n	8003050 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003006:	2b00      	cmp	r3, #0
 8003008:	d022      	beq.n	8003050 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d119      	bne.n	8003048 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003022:	d015      	beq.n	8003050 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800302c:	d108      	bne.n	8003040 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	e007      	b.n	8003050 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fc21 	bl	8003888 <I2C_ITMasterSeqCplt>
 8003046:	e003      	b.n	8003050 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003048:	2140      	movs	r1, #64	; 0x40
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fee2 	bl	8003e14 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fca8 	bl	80039c0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <I2C_Slave_ISR_IT+0x24>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0ec      	b.n	8003280 <I2C_Slave_ISR_IT+0x1fe>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030c6:	6939      	ldr	r1, [r7, #16]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fd43 	bl	8003b54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04d      	beq.n	8003176 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d047      	beq.n	8003176 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d128      	bne.n	8003142 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b28      	cmp	r3, #40	; 0x28
 80030fa:	d108      	bne.n	800310e <I2C_Slave_ISR_IT+0x8c>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003102:	d104      	bne.n	800310e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003104:	6939      	ldr	r1, [r7, #16]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fe2e 	bl	8003d68 <I2C_ITListenCplt>
 800310c:	e032      	b.n	8003174 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b29      	cmp	r3, #41	; 0x29
 8003118:	d10e      	bne.n	8003138 <I2C_Slave_ISR_IT+0xb6>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003120:	d00a      	beq.n	8003138 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2210      	movs	r2, #16
 8003128:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 ff69 	bl	8004002 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fbe6 	bl	8003902 <I2C_ITSlaveSeqCplt>
 8003136:	e01d      	b.n	8003174 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2210      	movs	r2, #16
 800313e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003140:	e096      	b.n	8003270 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2210      	movs	r2, #16
 8003148:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <I2C_Slave_ISR_IT+0xe4>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003162:	f040 8085 	bne.w	8003270 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4619      	mov	r1, r3
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fe51 	bl	8003e14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003172:	e07d      	b.n	8003270 <I2C_Slave_ISR_IT+0x1ee>
 8003174:	e07c      	b.n	8003270 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d030      	beq.n	80031e4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02a      	beq.n	80031e4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d018      	beq.n	80031ca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d14f      	bne.n	8003274 <I2C_Slave_ISR_IT+0x1f2>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031da:	d04b      	beq.n	8003274 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fb90 	bl	8003902 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80031e2:	e047      	b.n	8003274 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	08db      	lsrs	r3, r3, #3
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	08db      	lsrs	r3, r3, #3
 80031f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80031fc:	6939      	ldr	r1, [r7, #16]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fabe 	bl	8003780 <I2C_ITAddrCplt>
 8003204:	e037      	b.n	8003276 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d031      	beq.n	8003276 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800321a:	2b00      	cmp	r3, #0
 800321c:	d02b      	beq.n	8003276 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d018      	beq.n	800325a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
 8003258:	e00d      	b.n	8003276 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d002      	beq.n	8003268 <I2C_Slave_ISR_IT+0x1e6>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fb4a 	bl	8003902 <I2C_ITSlaveSeqCplt>
 800326e:	e002      	b.n	8003276 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003274:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <I2C_Master_ISR_DMA+0x1a>
 800329e:	2302      	movs	r3, #2
 80032a0:	e0e1      	b.n	8003466 <I2C_Master_ISR_DMA+0x1de>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d017      	beq.n	80032e6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d011      	beq.n	80032e6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f043 0204 	orr.w	r2, r3, #4
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80032d6:	2120      	movs	r1, #32
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f001 f8af 	bl	800443c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fe8f 	bl	8004002 <I2C_Flush_TXDR>
 80032e4:	e0ba      	b.n	800345c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	09db      	lsrs	r3, r3, #7
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d072      	beq.n	80033d8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d06c      	beq.n	80033d8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d04e      	beq.n	80033b6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003324:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2bff      	cmp	r3, #255	; 0xff
 800332e:	d906      	bls.n	800333e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e010      	b.n	8003360 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003350:	d003      	beq.n	800335a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e002      	b.n	8003360 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	b2da      	uxtb	r2, r3
 8003366:	8a79      	ldrh	r1, [r7, #18]
 8003368:	2300      	movs	r3, #0
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f001 f832 	bl	80043d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b22      	cmp	r3, #34	; 0x22
 8003390:	d108      	bne.n	80033a4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80033a2:	e05b      	b.n	800345c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80033b4:	e052      	b.n	800345c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c4:	d003      	beq.n	80033ce <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa5e 	bl	8003888 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80033cc:	e046      	b.n	800345c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fd1f 	bl	8003e14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80033d6:	e041      	b.n	800345c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d029      	beq.n	8003438 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d023      	beq.n	8003438 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d119      	bne.n	800342e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003408:	d027      	beq.n	800345a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003412:	d108      	bne.n	8003426 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003422:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003424:	e019      	b.n	800345a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fa2e 	bl	8003888 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800342c:	e015      	b.n	800345a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800342e:	2140      	movs	r1, #64	; 0x40
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fcef 	bl	8003e14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003436:	e010      	b.n	800345a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fab4 	bl	80039c0 <I2C_ITMasterCplt>
 8003458:	e000      	b.n	800345c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800345a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b088      	sub	sp, #32
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <I2C_Slave_ISR_DMA+0x24>
 800348e:	2302      	movs	r3, #2
 8003490:	e0c9      	b.n	8003626 <I2C_Slave_ISR_DMA+0x1b8>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fb4d 	bl	8003b54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 809a 	beq.w	80035fc <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8093 	beq.w	80035fc <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0b9b      	lsrs	r3, r3, #14
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0bdb      	lsrs	r3, r3, #15
 80034e6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d07f      	beq.n	80035ee <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0bdb      	lsrs	r3, r3, #15
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800350e:	2301      	movs	r3, #1
 8003510:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0b9b      	lsrs	r3, r3, #14
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d128      	bne.n	800358e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b28      	cmp	r3, #40	; 0x28
 8003546:	d108      	bne.n	800355a <I2C_Slave_ISR_DMA+0xec>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800354e:	d104      	bne.n	800355a <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fc08 	bl	8003d68 <I2C_ITListenCplt>
 8003558:	e048      	b.n	80035ec <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b29      	cmp	r3, #41	; 0x29
 8003564:	d10e      	bne.n	8003584 <I2C_Slave_ISR_DMA+0x116>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800356c:	d00a      	beq.n	8003584 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2210      	movs	r2, #16
 8003574:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fd43 	bl	8004002 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f9c0 	bl	8003902 <I2C_ITSlaveSeqCplt>
 8003582:	e033      	b.n	80035ec <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2210      	movs	r2, #16
 800358a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800358c:	e034      	b.n	80035f8 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2210      	movs	r2, #16
 8003594:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f043 0204 	orr.w	r2, r3, #4
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <I2C_Slave_ISR_DMA+0x14a>
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b6:	d11f      	bne.n	80035f8 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b21      	cmp	r3, #33	; 0x21
 80035bc:	d002      	beq.n	80035c4 <I2C_Slave_ISR_DMA+0x156>
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b29      	cmp	r3, #41	; 0x29
 80035c2:	d103      	bne.n	80035cc <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2221      	movs	r2, #33	; 0x21
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
 80035ca:	e008      	b.n	80035de <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	2b22      	cmp	r3, #34	; 0x22
 80035d0:	d002      	beq.n	80035d8 <I2C_Slave_ISR_DMA+0x16a>
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b2a      	cmp	r3, #42	; 0x2a
 80035d6:	d102      	bne.n	80035de <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2222      	movs	r2, #34	; 0x22
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	4619      	mov	r1, r3
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fc15 	bl	8003e14 <I2C_ITError>
      if (treatdmanack == 1U)
 80035ea:	e005      	b.n	80035f8 <I2C_Slave_ISR_DMA+0x18a>
 80035ec:	e004      	b.n	80035f8 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2210      	movs	r2, #16
 80035f4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80035f6:	e011      	b.n	800361c <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80035f8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80035fa:	e00f      	b.n	800361c <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	08db      	lsrs	r3, r3, #3
 800360c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8b2 	bl	8003780 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	4608      	mov	r0, r1
 800363a:	4611      	mov	r1, r2
 800363c:	461a      	mov	r2, r3
 800363e:	4603      	mov	r3, r0
 8003640:	817b      	strh	r3, [r7, #10]
 8003642:	460b      	mov	r3, r1
 8003644:	813b      	strh	r3, [r7, #8]
 8003646:	4613      	mov	r3, r2
 8003648:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	8979      	ldrh	r1, [r7, #10]
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <I2C_RequestMemoryWrite+0xa4>)
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 febd 	bl	80043d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fd4f 	bl	8004106 <I2C_WaitOnTXISFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02c      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003678:	893b      	ldrh	r3, [r7, #8]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
 8003682:	e015      	b.n	80036b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	b29b      	uxth	r3, r3
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fd35 	bl	8004106 <I2C_WaitOnTXISFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e012      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a6:	893b      	ldrh	r3, [r7, #8]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fce3 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	80002000 	.word	0x80002000

080036d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	460b      	mov	r3, r1
 80036ec:	813b      	strh	r3, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <I2C_RequestMemoryRead+0xa4>)
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2300      	movs	r3, #0
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fe6a 	bl	80043d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fcfc 	bl	8004106 <I2C_WaitOnTXISFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e02c      	b.n	8003772 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371e:	893b      	ldrh	r3, [r7, #8]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
 8003728:	e015      	b.n	8003756 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	b29b      	uxth	r3, r3
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fce2 	bl	8004106 <I2C_WaitOnTXISFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e012      	b.n	8003772 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800374c:	893b      	ldrh	r3, [r7, #8]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2200      	movs	r2, #0
 800375e:	2140      	movs	r1, #64	; 0x40
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fc90 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	80002000 	.word	0x80002000

08003780 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003796:	2b28      	cmp	r3, #40	; 0x28
 8003798:	d16a      	bne.n	8003870 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d138      	bne.n	8003850 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	09db      	lsrs	r3, r3, #7
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	89bb      	ldrh	r3, [r7, #12]
 80037e6:	4053      	eors	r3, r2
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f003 0306 	and.w	r3, r3, #6
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11c      	bne.n	800382c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80037f2:	897b      	ldrh	r3, [r7, #10]
 80037f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	2b02      	cmp	r3, #2
 8003806:	d13b      	bne.n	8003880 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2208      	movs	r2, #8
 8003814:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800381e:	89ba      	ldrh	r2, [r7, #12]
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fad8 	bl	8002dda <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800382a:	e029      	b.n	8003880 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800382c:	893b      	ldrh	r3, [r7, #8]
 800382e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003830:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fe65 	bl	8004504 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003842:	89ba      	ldrh	r2, [r7, #12]
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fac6 	bl	8002dda <HAL_I2C_AddrCallback>
}
 800384e:	e017      	b.n	8003880 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fe55 	bl	8004504 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003862:	89ba      	ldrh	r2, [r7, #12]
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fab6 	bl	8002dda <HAL_I2C_AddrCallback>
}
 800386e:	e007      	b.n	8003880 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2208      	movs	r2, #8
 8003876:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b21      	cmp	r3, #33	; 0x21
 80038a2:	d115      	bne.n	80038d0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2211      	movs	r2, #17
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80038b8:	2101      	movs	r1, #1
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fe22 	bl	8004504 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fa5e 	bl	8002d8a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038ce:	e014      	b.n	80038fa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2212      	movs	r2, #18
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038e4:	2102      	movs	r1, #2
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fe0c 	bl	8004504 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fa52 	bl	8002d9e <HAL_I2C_MasterRxCpltCallback>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0b9b      	lsrs	r3, r3, #14
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e00d      	b.n	8003954 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	0bdb      	lsrs	r3, r3, #15
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003952:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b29      	cmp	r3, #41	; 0x29
 800395e:	d112      	bne.n	8003986 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2228      	movs	r2, #40	; 0x28
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2221      	movs	r2, #33	; 0x21
 800396c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800396e:	2101      	movs	r1, #1
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fdc7 	bl	8004504 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fa17 	bl	8002db2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003984:	e017      	b.n	80039b6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b2a      	cmp	r3, #42	; 0x2a
 8003990:	d111      	bne.n	80039b6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2228      	movs	r2, #40	; 0x28
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2222      	movs	r2, #34	; 0x22
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039a0:	2102      	movs	r1, #2
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fdae 	bl	8004504 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fa08 	bl	8002dc6 <HAL_I2C_SlaveRxCpltCallback>
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2220      	movs	r2, #32
 80039d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b21      	cmp	r3, #33	; 0x21
 80039e0:	d107      	bne.n	80039f2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039e2:	2101      	movs	r1, #1
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fd8d 	bl	8004504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2211      	movs	r2, #17
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
 80039f0:	e00c      	b.n	8003a0c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b22      	cmp	r3, #34	; 0x22
 80039fc:	d106      	bne.n	8003a0c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039fe:	2102      	movs	r1, #2
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fd7f 	bl	8004504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2212      	movs	r2, #18
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b4d      	ldr	r3, [pc, #308]	; (8003b4c <I2C_ITMasterCplt+0x18c>)
 8003a18:	400b      	ands	r3, r1
 8003a1a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4a      	ldr	r2, [pc, #296]	; (8003b50 <I2C_ITMasterCplt+0x190>)
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2210      	movs	r2, #16
 8003a3a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b60      	cmp	r3, #96	; 0x60
 8003a52:	d10b      	bne.n	8003a6c <I2C_ITMasterCplt+0xac>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fac8 	bl	8004002 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b60      	cmp	r3, #96	; 0x60
 8003a82:	d002      	beq.n	8003a8a <I2C_ITMasterCplt+0xca>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f9bf 	bl	8003e14 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a96:	e054      	b.n	8003b42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b21      	cmp	r3, #33	; 0x21
 8003aa2:	d124      	bne.n	8003aee <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b40      	cmp	r3, #64	; 0x40
 8003abc:	d10b      	bne.n	8003ad6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fb8e 	bl	80011f0 <HAL_I2C_MemTxCpltCallback>
}
 8003ad4:	e035      	b.n	8003b42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff f94f 	bl	8002d8a <HAL_I2C_MasterTxCpltCallback>
}
 8003aec:	e029      	b.n	8003b42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b22      	cmp	r3, #34	; 0x22
 8003af8:	d123      	bne.n	8003b42 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d10b      	bne.n	8003b2c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7fd fb85 	bl	8001234 <HAL_I2C_MemRxCpltCallback>
}
 8003b2a:	e00a      	b.n	8003b42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff f92e 	bl	8002d9e <HAL_I2C_MasterRxCpltCallback>
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	fe00e800 	.word	0xfe00e800
 8003b50:	ffff0000 	.word	0xffff0000

08003b54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b70:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2220      	movs	r2, #32
 8003b78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b21      	cmp	r3, #33	; 0x21
 8003b7e:	d002      	beq.n	8003b86 <I2C_ITSlaveCplt+0x32>
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b29      	cmp	r3, #41	; 0x29
 8003b84:	d108      	bne.n	8003b98 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b86:	f248 0101 	movw	r1, #32769	; 0x8001
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fcba 	bl	8004504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2221      	movs	r2, #33	; 0x21
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
 8003b96:	e00d      	b.n	8003bb4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b22      	cmp	r3, #34	; 0x22
 8003b9c:	d002      	beq.n	8003ba4 <I2C_ITSlaveCplt+0x50>
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ba2:	d107      	bne.n	8003bb4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003ba4:	f248 0102 	movw	r1, #32770	; 0x8002
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fcab 	bl	8004504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2222      	movs	r2, #34	; 0x22
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <I2C_ITSlaveCplt+0x20c>)
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fa14 	bl	8004002 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	0b9b      	lsrs	r3, r3, #14
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bf4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d020      	beq.n	8003c40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c0c:	e018      	b.n	8003c40 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	0bdb      	lsrs	r3, r3, #15
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d012      	beq.n	8003c40 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d006      	beq.n	8003c40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f023 0304 	bic.w	r3, r3, #4
 8003c52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00c      	beq.n	8003c8e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f043 0204 	orr.w	r2, r3, #4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d010      	beq.n	8003cdc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f8a7 	bl	8003e14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b28      	cmp	r3, #40	; 0x28
 8003cd0:	d141      	bne.n	8003d56 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003cd2:	6979      	ldr	r1, [r7, #20]
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f847 	bl	8003d68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cda:	e03c      	b.n	8003d56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ce4:	d014      	beq.n	8003d10 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fe0b 	bl	8003902 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <I2C_ITSlaveCplt+0x210>)
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff f874 	bl	8002df6 <HAL_I2C_ListenCpltCallback>
}
 8003d0e:	e022      	b.n	8003d56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b22      	cmp	r3, #34	; 0x22
 8003d1a:	d10e      	bne.n	8003d3a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff f847 	bl	8002dc6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d38:	e00d      	b.n	8003d56 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff f82e 	bl	8002db2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d56:	bf00      	nop
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	fe00e800 	.word	0xfe00e800
 8003d64:	ffff0000 	.word	0xffff0000

08003d68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <I2C_ITListenCplt+0xa8>)
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d022      	beq.n	8003de6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d012      	beq.n	8003de6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003de6:	f248 0103 	movw	r1, #32771	; 0x8003
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fb8a 	bl	8004504 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2210      	movs	r2, #16
 8003df6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fe fff8 	bl	8002df6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	ffff0000 	.word	0xffff0000

08003e14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <I2C_ITError+0x194>)
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b28      	cmp	r3, #40	; 0x28
 8003e4a:	d005      	beq.n	8003e58 <I2C_ITError+0x44>
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b29      	cmp	r3, #41	; 0x29
 8003e50:	d002      	beq.n	8003e58 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b2a      	cmp	r3, #42	; 0x2a
 8003e56:	d10b      	bne.n	8003e70 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e58:	2103      	movs	r1, #3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fb52 	bl	8004504 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2228      	movs	r2, #40	; 0x28
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a50      	ldr	r2, [pc, #320]	; (8003fac <I2C_ITError+0x198>)
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e6e:	e011      	b.n	8003e94 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e70:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb45 	bl	8004504 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b60      	cmp	r3, #96	; 0x60
 8003e84:	d003      	beq.n	8003e8e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d039      	beq.n	8003f16 <I2C_ITError+0x102>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b11      	cmp	r3, #17
 8003ea6:	d002      	beq.n	8003eae <I2C_ITError+0x9a>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b21      	cmp	r3, #33	; 0x21
 8003eac:	d133      	bne.n	8003f16 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ebc:	d107      	bne.n	8003ece <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ecc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fa05 	bl	80022e2 <HAL_DMA_GetState>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d017      	beq.n	8003f0e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	4a33      	ldr	r2, [pc, #204]	; (8003fb0 <I2C_ITError+0x19c>)
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe f8df 	bl	80020b6 <HAL_DMA_Abort_IT>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04d      	beq.n	8003f9a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f0c:	e045      	b.n	8003f9a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f850 	bl	8003fb4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f14:	e041      	b.n	8003f9a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d039      	beq.n	8003f92 <I2C_ITError+0x17e>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b12      	cmp	r3, #18
 8003f22:	d002      	beq.n	8003f2a <I2C_ITError+0x116>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b22      	cmp	r3, #34	; 0x22
 8003f28:	d133      	bne.n	8003f92 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f38:	d107      	bne.n	8003f4a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f9c7 	bl	80022e2 <HAL_DMA_GetState>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d017      	beq.n	8003f8a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <I2C_ITError+0x19c>)
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe f8a1 	bl	80020b6 <HAL_DMA_Abort_IT>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d011      	beq.n	8003f9e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f84:	4610      	mov	r0, r2
 8003f86:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f88:	e009      	b.n	8003f9e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f812 	bl	8003fb4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f90:	e005      	b.n	8003f9e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f80e 	bl	8003fb4 <I2C_TreatErrorCallback>
  }
}
 8003f98:	e002      	b.n	8003fa0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f9e:	bf00      	nop
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	ffff0000 	.word	0xffff0000
 8003fac:	08003083 	.word	0x08003083
 8003fb0:	0800404b 	.word	0x0800404b

08003fb4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d10e      	bne.n	8003fe6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fe ff1d 	bl	8002e1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fe4:	e009      	b.n	8003ffa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fe ff08 	bl	8002e0a <HAL_I2C_ErrorCallback>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b02      	cmp	r3, #2
 8004016:	d103      	bne.n	8004020 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2200      	movs	r2, #0
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d007      	beq.n	800403e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699a      	ldr	r2, [r3, #24]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	619a      	str	r2, [r3, #24]
  }
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2200      	movs	r2, #0
 8004066:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	2200      	movs	r2, #0
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff ff9b 	bl	8003fb4 <I2C_TreatErrorCallback>
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004096:	e022      	b.n	80040de <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d01e      	beq.n	80040de <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	f7fd fe1c 	bl	8001cdc <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d113      	bne.n	80040de <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f043 0220 	orr.w	r2, r3, #32
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e00f      	b.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d0cd      	beq.n	8004098 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004112:	e02c      	b.n	800416e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f871 	bl	8004200 <I2C_IsErrorOccurred>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e02a      	b.n	800417e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d01e      	beq.n	800416e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004130:	f7fd fdd4 	bl	8001cdc <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e007      	b.n	800417e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d1cb      	bne.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004192:	e028      	b.n	80041e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f831 	bl	8004200 <I2C_IsErrorOccurred>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e026      	b.n	80041f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fd fd98 	bl	8001cdc <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d113      	bne.n	80041e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e007      	b.n	80041f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d1cf      	bne.n	8004194 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d075      	beq.n	8004318 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2210      	movs	r2, #16
 8004232:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004234:	e056      	b.n	80042e4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d052      	beq.n	80042e4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fd fd4d 	bl	8001cdc <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <I2C_IsErrorOccurred+0x54>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d147      	bne.n	80042e4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004266:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004276:	d12e      	bne.n	80042d6 <I2C_IsErrorOccurred+0xd6>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800427e:	d02a      	beq.n	80042d6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	2b20      	cmp	r3, #32
 8004284:	d027      	beq.n	80042d6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004294:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004296:	f7fd fd21 	bl	8001cdc <HAL_GetTick>
 800429a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800429c:	e01b      	b.n	80042d6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800429e:	f7fd fd1d 	bl	8001cdc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b19      	cmp	r3, #25
 80042aa:	d914      	bls.n	80042d6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d1dc      	bne.n	800429e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d003      	beq.n	80042fa <I2C_IsErrorOccurred+0xfa>
 80042f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d09d      	beq.n	8004236 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2220      	movs	r2, #32
 8004308:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800433a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	f043 0308 	orr.w	r3, r3, #8
 8004352:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800435c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	f043 0302 	orr.w	r3, r3, #2
 8004374:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01c      	beq.n	80043c8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff fe37 	bl	8004002 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <I2C_IsErrorOccurred+0x1d4>)
 80043a0:	400b      	ands	r3, r1
 80043a2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80043c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3728      	adds	r7, #40	; 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	fe00e800 	.word	0xfe00e800

080043d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	817b      	strh	r3, [r7, #10]
 80043e6:	4613      	mov	r3, r2
 80043e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043f0:	7a7b      	ldrb	r3, [r7, #9]
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043f8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	4313      	orrs	r3, r2
 8004402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004406:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	0d5b      	lsrs	r3, r3, #21
 8004412:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <I2C_TransferConfig+0x60>)
 8004418:	430b      	orrs	r3, r1
 800441a:	43db      	mvns	r3, r3
 800441c:	ea02 0103 	and.w	r1, r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	03ff63ff 	.word	0x03ff63ff

0800443c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <I2C_Enable_IRQ+0xc0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800445a:	4a29      	ldr	r2, [pc, #164]	; (8004500 <I2C_Enable_IRQ+0xc4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d11d      	bne.n	800449c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004460:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004464:	2b00      	cmp	r3, #0
 8004466:	da03      	bge.n	8004470 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800446e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004470:	887b      	ldrh	r3, [r7, #2]
 8004472:	2b10      	cmp	r3, #16
 8004474:	d103      	bne.n	800447e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800447c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800447e:	887b      	ldrh	r3, [r7, #2]
 8004480:	2b20      	cmp	r3, #32
 8004482:	d103      	bne.n	800448c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800448a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800448c:	887b      	ldrh	r3, [r7, #2]
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d125      	bne.n	80044de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004498:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800449a:	e020      	b.n	80044de <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800449c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	da03      	bge.n	80044ac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80044aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044ac:	887b      	ldrh	r3, [r7, #2]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80044bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80044ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044d0:	887b      	ldrh	r3, [r7, #2]
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d103      	bne.n	80044de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f043 0320 	orr.w	r3, r3, #32
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	08003289 	.word	0x08003289
 8004500:	0800346f 	.word	0x0800346f

08004504 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00f      	beq.n	800453e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004524:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004532:	2b28      	cmp	r3, #40	; 0x28
 8004534:	d003      	beq.n	800453e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800453c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00f      	beq.n	8004568 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800454e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800455c:	2b28      	cmp	r3, #40	; 0x28
 800455e:	d003      	beq.n	8004568 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004566:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800456c:	2b00      	cmp	r3, #0
 800456e:	da03      	bge.n	8004578 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004576:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004578:	887b      	ldrh	r3, [r7, #2]
 800457a:	2b10      	cmp	r3, #16
 800457c:	d103      	bne.n	8004586 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004584:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004586:	887b      	ldrh	r3, [r7, #2]
 8004588:	2b20      	cmp	r3, #32
 800458a:	d103      	bne.n	8004594 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f043 0320 	orr.w	r3, r3, #32
 8004592:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d103      	bne.n	80045a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6819      	ldr	r1, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	43da      	mvns	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	400a      	ands	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d138      	bne.n	8004648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e032      	b.n	800464a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b20      	cmp	r3, #32
 800466a:	d139      	bne.n	80046e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004676:	2302      	movs	r3, #2
 8004678:	e033      	b.n	80046e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2224      	movs	r2, #36	; 0x24
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	e000      	b.n	80046e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
  }
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d141      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046fe:	4b4b      	ldr	r3, [pc, #300]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d131      	bne.n	8004770 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800470c:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004712:	4a46      	ldr	r2, [pc, #280]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800471c:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004724:	4a41      	ldr	r2, [pc, #260]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800472a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800472c:	4b40      	ldr	r3, [pc, #256]	; (8004830 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2232      	movs	r2, #50	; 0x32
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	4a3f      	ldr	r2, [pc, #252]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	0c9b      	lsrs	r3, r3, #18
 800473e:	3301      	adds	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004742:	e002      	b.n	800474a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3b01      	subs	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474a:	4b38      	ldr	r3, [pc, #224]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d102      	bne.n	800475e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f2      	bne.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800475e:	4b33      	ldr	r3, [pc, #204]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d158      	bne.n	800481e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e057      	b.n	8004820 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004770:	4b2e      	ldr	r3, [pc, #184]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004776:	4a2d      	ldr	r2, [pc, #180]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800477c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004780:	e04d      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004788:	d141      	bne.n	800480e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800478a:	4b28      	ldr	r3, [pc, #160]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004796:	d131      	bne.n	80047fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004798:	4b24      	ldr	r3, [pc, #144]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479e:	4a23      	ldr	r2, [pc, #140]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a8:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047b0:	4a1e      	ldr	r2, [pc, #120]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2232      	movs	r2, #50	; 0x32
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	0c9b      	lsrs	r3, r3, #18
 80047ca:	3301      	adds	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ce:	e002      	b.n	80047d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e2:	d102      	bne.n	80047ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f2      	bne.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f6:	d112      	bne.n	800481e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e011      	b.n	8004820 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004802:	4a0a      	ldr	r2, [pc, #40]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800480c:	e007      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004816:	4a05      	ldr	r2, [pc, #20]	; (800482c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800481c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40007000 	.word	0x40007000
 8004830:	20000000 	.word	0x20000000
 8004834:	431bde83 	.word	0x431bde83

08004838 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a04      	ldr	r2, [pc, #16]	; (8004854 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004846:	6093      	str	r3, [r2, #8]
}
 8004848:	bf00      	nop
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40007000 	.word	0x40007000

08004858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e308      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d075      	beq.n	8004962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004876:	4ba3      	ldr	r3, [pc, #652]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004880:	4ba0      	ldr	r3, [pc, #640]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b0c      	cmp	r3, #12
 800488e:	d102      	bne.n	8004896 <HAL_RCC_OscConfig+0x3e>
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b03      	cmp	r3, #3
 8004894:	d002      	beq.n	800489c <HAL_RCC_OscConfig+0x44>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d10b      	bne.n	80048b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	4b99      	ldr	r3, [pc, #612]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d05b      	beq.n	8004960 <HAL_RCC_OscConfig+0x108>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d157      	bne.n	8004960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e2e3      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d106      	bne.n	80048cc <HAL_RCC_OscConfig+0x74>
 80048be:	4b91      	ldr	r3, [pc, #580]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a90      	ldr	r2, [pc, #576]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	e01d      	b.n	8004908 <HAL_RCC_OscConfig+0xb0>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x98>
 80048d6:	4b8b      	ldr	r3, [pc, #556]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a8a      	ldr	r2, [pc, #552]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a87      	ldr	r2, [pc, #540]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e00b      	b.n	8004908 <HAL_RCC_OscConfig+0xb0>
 80048f0:	4b84      	ldr	r3, [pc, #528]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a83      	ldr	r2, [pc, #524]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a80      	ldr	r2, [pc, #512]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d013      	beq.n	8004938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd f9e4 	bl	8001cdc <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004918:	f7fd f9e0 	bl	8001cdc <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e2a8      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492a:	4b76      	ldr	r3, [pc, #472]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0xc0>
 8004936:	e014      	b.n	8004962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd f9d0 	bl	8001cdc <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004940:	f7fd f9cc 	bl	8001cdc <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e294      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004952:	4b6c      	ldr	r3, [pc, #432]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0xe8>
 800495e:	e000      	b.n	8004962 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d075      	beq.n	8004a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496e:	4b65      	ldr	r3, [pc, #404]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004978:	4b62      	ldr	r3, [pc, #392]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b0c      	cmp	r3, #12
 8004986:	d102      	bne.n	800498e <HAL_RCC_OscConfig+0x136>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d002      	beq.n	8004994 <HAL_RCC_OscConfig+0x13c>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d11f      	bne.n	80049d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004994:	4b5b      	ldr	r3, [pc, #364]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCC_OscConfig+0x154>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e267      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ac:	4b55      	ldr	r3, [pc, #340]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	4952      	ldr	r1, [pc, #328]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049c0:	4b51      	ldr	r3, [pc, #324]	; (8004b08 <HAL_RCC_OscConfig+0x2b0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc ffc5 	bl	8001954 <HAL_InitTick>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d043      	beq.n	8004a58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e253      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d023      	beq.n	8004a24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049dc:	4b49      	ldr	r3, [pc, #292]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a48      	ldr	r2, [pc, #288]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd f978 	bl	8001cdc <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fd f974 	bl	8001cdc <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e23c      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a02:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	4939      	ldr	r1, [pc, #228]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
 8004a22:	e01a      	b.n	8004a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a24:	4b37      	ldr	r3, [pc, #220]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a36      	ldr	r2, [pc, #216]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fd f954 	bl	8001cdc <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fd f950 	bl	8001cdc <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e218      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a4a:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x1e0>
 8004a56:	e000      	b.n	8004a5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d03c      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01c      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6e:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fd f92d 	bl	8001cdc <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a86:	f7fd f929 	bl	8001cdc <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e1f1      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0ef      	beq.n	8004a86 <HAL_RCC_OscConfig+0x22e>
 8004aa6:	e01b      	b.n	8004ae0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa8:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fd f910 	bl	8001cdc <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7fd f90c 	bl	8001cdc <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e1d4      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1ef      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80ab 	beq.w	8004c44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aee:	2300      	movs	r3, #0
 8004af0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_RCC_OscConfig+0x2b4>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e005      	b.n	8004b0e <HAL_RCC_OscConfig+0x2b6>
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	20000004 	.word	0x20000004
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b12:	4baf      	ldr	r3, [pc, #700]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	4aae      	ldr	r2, [pc, #696]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b1e:	4bac      	ldr	r3, [pc, #688]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b2e:	4ba9      	ldr	r3, [pc, #676]	; (8004dd4 <HAL_RCC_OscConfig+0x57c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d118      	bne.n	8004b6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b3a:	4ba6      	ldr	r3, [pc, #664]	; (8004dd4 <HAL_RCC_OscConfig+0x57c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4aa5      	ldr	r2, [pc, #660]	; (8004dd4 <HAL_RCC_OscConfig+0x57c>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b46:	f7fd f8c9 	bl	8001cdc <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4e:	f7fd f8c5 	bl	8001cdc <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e18d      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b60:	4b9c      	ldr	r3, [pc, #624]	; (8004dd4 <HAL_RCC_OscConfig+0x57c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d108      	bne.n	8004b86 <HAL_RCC_OscConfig+0x32e>
 8004b74:	4b96      	ldr	r3, [pc, #600]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a95      	ldr	r2, [pc, #596]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b84:	e024      	b.n	8004bd0 <HAL_RCC_OscConfig+0x378>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d110      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x358>
 8004b8e:	4b90      	ldr	r3, [pc, #576]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	4a8e      	ldr	r2, [pc, #568]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004b96:	f043 0304 	orr.w	r3, r3, #4
 8004b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b9e:	4b8c      	ldr	r3, [pc, #560]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	4a8a      	ldr	r2, [pc, #552]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bae:	e00f      	b.n	8004bd0 <HAL_RCC_OscConfig+0x378>
 8004bb0:	4b87      	ldr	r3, [pc, #540]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	4a86      	ldr	r2, [pc, #536]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bc0:	4b83      	ldr	r3, [pc, #524]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	4a82      	ldr	r2, [pc, #520]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d016      	beq.n	8004c06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd f880 	bl	8001cdc <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fd f87c 	bl	8001cdc <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e142      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf6:	4b76      	ldr	r3, [pc, #472]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ed      	beq.n	8004be0 <HAL_RCC_OscConfig+0x388>
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fd f869 	bl	8001cdc <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fd f865 	bl	8001cdc <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e12b      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c24:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ed      	bne.n	8004c0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c32:	7ffb      	ldrb	r3, [r7, #31]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d105      	bne.n	8004c44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c38:	4b65      	ldr	r3, [pc, #404]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	4a64      	ldr	r2, [pc, #400]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d03c      	beq.n	8004cca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01c      	beq.n	8004c92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c58:	4b5d      	ldr	r3, [pc, #372]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5e:	4a5c      	ldr	r2, [pc, #368]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c68:	f7fd f838 	bl	8001cdc <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c70:	f7fd f834 	bl	8001cdc <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e0fc      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c82:	4b53      	ldr	r3, [pc, #332]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ef      	beq.n	8004c70 <HAL_RCC_OscConfig+0x418>
 8004c90:	e01b      	b.n	8004cca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c92:	4b4f      	ldr	r3, [pc, #316]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c98:	4a4d      	ldr	r2, [pc, #308]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7fd f81b 	bl	8001cdc <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004caa:	f7fd f817 	bl	8001cdc <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0df      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cbc:	4b44      	ldr	r3, [pc, #272]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ef      	bne.n	8004caa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80d3 	beq.w	8004e7a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cd4:	4b3e      	ldr	r3, [pc, #248]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 030c 	and.w	r3, r3, #12
 8004cdc:	2b0c      	cmp	r3, #12
 8004cde:	f000 808d 	beq.w	8004dfc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d15a      	bne.n	8004da0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cea:	4b39      	ldr	r3, [pc, #228]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a38      	ldr	r2, [pc, #224]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fc fff1 	bl	8001cdc <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfe:	f7fc ffed 	bl	8001cdc <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e0b5      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d10:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f0      	bne.n	8004cfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d1c:	4b2c      	ldr	r3, [pc, #176]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	4b2d      	ldr	r3, [pc, #180]	; (8004dd8 <HAL_RCC_OscConfig+0x580>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6a11      	ldr	r1, [r2, #32]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d2c:	3a01      	subs	r2, #1
 8004d2e:	0112      	lsls	r2, r2, #4
 8004d30:	4311      	orrs	r1, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d36:	0212      	lsls	r2, r2, #8
 8004d38:	4311      	orrs	r1, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d3e:	0852      	lsrs	r2, r2, #1
 8004d40:	3a01      	subs	r2, #1
 8004d42:	0552      	lsls	r2, r2, #21
 8004d44:	4311      	orrs	r1, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d4a:	0852      	lsrs	r2, r2, #1
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0652      	lsls	r2, r2, #25
 8004d50:	4311      	orrs	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d56:	06d2      	lsls	r2, r2, #27
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	491d      	ldr	r1, [pc, #116]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d6c:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fc ffb0 	bl	8001cdc <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fc ffac 	bl	8001cdc <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e074      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x528>
 8004d9e:	e06c      	b.n	8004e7a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004daa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004dac:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a07      	ldr	r2, [pc, #28]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <HAL_RCC_OscConfig+0x578>)
 8004dbe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fc ff88 	bl	8001cdc <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dce:	e00e      	b.n	8004dee <HAL_RCC_OscConfig+0x596>
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40007000 	.word	0x40007000
 8004dd8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fc ff7e 	bl	8001cdc <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e046      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dee:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_RCC_OscConfig+0x62c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x584>
 8004dfa:	e03e      	b.n	8004e7a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e039      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <HAL_RCC_OscConfig+0x62c>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f003 0203 	and.w	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d12c      	bne.n	8004e76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	3b01      	subs	r3, #1
 8004e28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d123      	bne.n	8004e76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d11b      	bne.n	8004e76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d113      	bne.n	8004e76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d109      	bne.n	8004e76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d001      	beq.n	8004e7a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40021000 	.word	0x40021000

08004e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e11e      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b91      	ldr	r3, [pc, #580]	; (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d910      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b8e      	ldr	r3, [pc, #568]	; (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 020f 	bic.w	r2, r3, #15
 8004eb6:	498c      	ldr	r1, [pc, #560]	; (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b8a      	ldr	r3, [pc, #552]	; (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e106      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d073      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d129      	bne.n	8004f38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee4:	4b81      	ldr	r3, [pc, #516]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0f4      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ef4:	f000 f9d0 	bl	8005298 <RCC_GetSysClockFreqFromPLLSource>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4a7c      	ldr	r2, [pc, #496]	; (80050f0 <HAL_RCC_ClockConfig+0x268>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d93f      	bls.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f02:	4b7a      	ldr	r3, [pc, #488]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d033      	beq.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12f      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f22:	4b72      	ldr	r3, [pc, #456]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f2a:	4a70      	ldr	r2, [pc, #448]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e024      	b.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f40:	4b6a      	ldr	r3, [pc, #424]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0c6      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f50:	4b66      	ldr	r3, [pc, #408]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0be      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f60:	f000 f8ce 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4a61      	ldr	r2, [pc, #388]	; (80050f0 <HAL_RCC_ClockConfig+0x268>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d909      	bls.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f6e:	4b5f      	ldr	r3, [pc, #380]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f76:	4a5d      	ldr	r2, [pc, #372]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b5a      	ldr	r3, [pc, #360]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4957      	ldr	r1, [pc, #348]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f94:	f7fc fea2 	bl	8001cdc <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fc fe9e 	bl	8001cdc <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e095      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b4e      	ldr	r3, [pc, #312]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d023      	beq.n	8005018 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fdc:	4b43      	ldr	r3, [pc, #268]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4a42      	ldr	r2, [pc, #264]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fe6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ffc:	4a3b      	ldr	r2, [pc, #236]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005002:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b39      	ldr	r3, [pc, #228]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4936      	ldr	r1, [pc, #216]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
 8005016:	e008      	b.n	800502a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b80      	cmp	r3, #128	; 0x80
 800501c:	d105      	bne.n	800502a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800501e:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4a32      	ldr	r2, [pc, #200]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005028:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800502a:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <HAL_RCC_ClockConfig+0x260>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d21d      	bcs.n	8005074 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005038:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <HAL_RCC_ClockConfig+0x260>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 020f 	bic.w	r2, r3, #15
 8005040:	4929      	ldr	r1, [pc, #164]	; (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005048:	f7fc fe48 	bl	8001cdc <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fc fe44 	bl	8001cdc <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e03b      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d1ed      	bne.n	8005050 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005080:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4917      	ldr	r1, [pc, #92]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800509e:	4b13      	ldr	r3, [pc, #76]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	490f      	ldr	r1, [pc, #60]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050b2:	f000 f825 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050b6:	4602      	mov	r2, r0
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <HAL_RCC_ClockConfig+0x264>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	490c      	ldr	r1, [pc, #48]	; (80050f4 <HAL_RCC_ClockConfig+0x26c>)
 80050c4:	5ccb      	ldrb	r3, [r1, r3]
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <HAL_RCC_ClockConfig+0x270>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_RCC_ClockConfig+0x274>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fc fc3c 	bl	8001954 <HAL_InitTick>
 80050dc:	4603      	mov	r3, r0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40022000 	.word	0x40022000
 80050ec:	40021000 	.word	0x40021000
 80050f0:	04c4b400 	.word	0x04c4b400
 80050f4:	0800bf48 	.word	0x0800bf48
 80050f8:	20000000 	.word	0x20000000
 80050fc:	20000004 	.word	0x20000004

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005106:	4b2c      	ldr	r3, [pc, #176]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b04      	cmp	r3, #4
 8005110:	d102      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005112:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e047      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005118:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d102      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005124:	4b26      	ldr	r3, [pc, #152]	; (80051c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e03e      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800512a:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b0c      	cmp	r3, #12
 8005134:	d136      	bne.n	80051a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005136:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	3301      	adds	r3, #1
 800514c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d10c      	bne.n	800516e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005154:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	fbb2 f3f3 	udiv	r3, r2, r3
 800515c:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800515e:	68d2      	ldr	r2, [r2, #12]
 8005160:	0a12      	lsrs	r2, r2, #8
 8005162:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	617b      	str	r3, [r7, #20]
      break;
 800516c:	e00c      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800516e:	4a13      	ldr	r2, [pc, #76]	; (80051bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005178:	68d2      	ldr	r2, [r2, #12]
 800517a:	0a12      	lsrs	r2, r2, #8
 800517c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
      break;
 8005186:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0e5b      	lsrs	r3, r3, #25
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	3301      	adds	r3, #1
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	e001      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051a8:	693b      	ldr	r3, [r7, #16]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	007a1200 	.word	0x007a1200

080051c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000000 	.word	0x20000000

080051dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051e0:	f7ff fff0 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4904      	ldr	r1, [pc, #16]	; (8005204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40021000 	.word	0x40021000
 8005204:	0800bf58 	.word	0x0800bf58

08005208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800520c:	f7ff ffda 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	0adb      	lsrs	r3, r3, #11
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4904      	ldr	r1, [pc, #16]	; (8005230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	0800bf58 	.word	0x0800bf58

08005234 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	220f      	movs	r2, #15
 8005242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <HAL_RCC_GetClockConfig+0x5c>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0203 	and.w	r2, r3, #3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <HAL_RCC_GetClockConfig+0x5c>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800525c:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <HAL_RCC_GetClockConfig+0x5c>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005268:	4b09      	ldr	r3, [pc, #36]	; (8005290 <HAL_RCC_GetClockConfig+0x5c>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	08db      	lsrs	r3, r3, #3
 800526e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_RCC_GetClockConfig+0x60>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 020f 	and.w	r2, r3, #15
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	601a      	str	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40021000 	.word	0x40021000
 8005294:	40022000 	.word	0x40022000

08005298 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052a8:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d10c      	bne.n	80052d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052bc:	4a17      	ldr	r2, [pc, #92]	; (800531c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	4a14      	ldr	r2, [pc, #80]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052c6:	68d2      	ldr	r2, [r2, #12]
 80052c8:	0a12      	lsrs	r2, r2, #8
 80052ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	617b      	str	r3, [r7, #20]
    break;
 80052d4:	e00c      	b.n	80052f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	4a0e      	ldr	r2, [pc, #56]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e0:	68d2      	ldr	r2, [r2, #12]
 80052e2:	0a12      	lsrs	r2, r2, #8
 80052e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052e8:	fb02 f303 	mul.w	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
    break;
 80052ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	0e5b      	lsrs	r3, r3, #25
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	3301      	adds	r3, #1
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800530a:	687b      	ldr	r3, [r7, #4]
}
 800530c:	4618      	mov	r0, r3
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40021000 	.word	0x40021000
 800531c:	007a1200 	.word	0x007a1200
 8005320:	00f42400 	.word	0x00f42400

08005324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800532c:	2300      	movs	r3, #0
 800532e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005330:	2300      	movs	r3, #0
 8005332:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8098 	beq.w	8005472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005346:	4b43      	ldr	r3, [pc, #268]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10d      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005352:	4b40      	ldr	r3, [pc, #256]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	4a3f      	ldr	r2, [pc, #252]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535c:	6593      	str	r3, [r2, #88]	; 0x58
 800535e:	4b3d      	ldr	r3, [pc, #244]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536a:	2301      	movs	r3, #1
 800536c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a39      	ldr	r2, [pc, #228]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800537a:	f7fc fcaf 	bl	8001cdc <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005380:	e009      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005382:	f7fc fcab 	bl	8001cdc <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d902      	bls.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	74fb      	strb	r3, [r7, #19]
        break;
 8005394:	e005      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0ef      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053a2:	7cfb      	ldrb	r3, [r7, #19]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d159      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053a8:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01e      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d019      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053c4:	4b23      	ldr	r3, [pc, #140]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d0:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053e0:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fc fc6b 	bl	8001cdc <HAL_GetTick>
 8005406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005408:	e00b      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fc fc67 	bl	8001cdc <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d902      	bls.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	74fb      	strb	r3, [r7, #19]
            break;
 8005420:	e006      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005422:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ec      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	4903      	ldr	r1, [pc, #12]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800544c:	e008      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	74bb      	strb	r3, [r7, #18]
 8005452:	e005      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005454:	40021000 	.word	0x40021000
 8005458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005460:	7c7b      	ldrb	r3, [r7, #17]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d105      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005466:	4ba6      	ldr	r3, [pc, #664]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546a:	4aa5      	ldr	r2, [pc, #660]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800547e:	4ba0      	ldr	r3, [pc, #640]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f023 0203 	bic.w	r2, r3, #3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	499c      	ldr	r1, [pc, #624]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054a0:	4b97      	ldr	r3, [pc, #604]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f023 020c 	bic.w	r2, r3, #12
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	4994      	ldr	r1, [pc, #592]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054c2:	4b8f      	ldr	r3, [pc, #572]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	498b      	ldr	r1, [pc, #556]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054e4:	4b86      	ldr	r3, [pc, #536]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	4983      	ldr	r1, [pc, #524]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005506:	4b7e      	ldr	r3, [pc, #504]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	497a      	ldr	r1, [pc, #488]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005528:	4b75      	ldr	r3, [pc, #468]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	4972      	ldr	r1, [pc, #456]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800554a:	4b6d      	ldr	r3, [pc, #436]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4969      	ldr	r1, [pc, #420]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800556c:	4b64      	ldr	r3, [pc, #400]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	4961      	ldr	r1, [pc, #388]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800558e:	4b5c      	ldr	r3, [pc, #368]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	4958      	ldr	r1, [pc, #352]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d015      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b0:	4b53      	ldr	r3, [pc, #332]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	4950      	ldr	r1, [pc, #320]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ce:	d105      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d0:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4a4a      	ldr	r2, [pc, #296]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055e8:	4b45      	ldr	r3, [pc, #276]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	4942      	ldr	r1, [pc, #264]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005606:	d105      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005608:	4b3d      	ldr	r3, [pc, #244]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	4a3c      	ldr	r2, [pc, #240]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005612:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005620:	4b37      	ldr	r3, [pc, #220]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	4934      	ldr	r1, [pc, #208]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005640:	4b2f      	ldr	r3, [pc, #188]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a2e      	ldr	r2, [pc, #184]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800564a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005658:	4b29      	ldr	r3, [pc, #164]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005666:	4926      	ldr	r1, [pc, #152]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b21      	ldr	r3, [pc, #132]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a20      	ldr	r2, [pc, #128]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005690:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	4918      	ldr	r1, [pc, #96]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ae:	d105      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b0:	4b13      	ldr	r3, [pc, #76]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056c8:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	490a      	ldr	r1, [pc, #40]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056e6:	d105      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a04      	ldr	r2, [pc, #16]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40021000 	.word	0x40021000

08005704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e049      	b.n	80057aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f841 	bl	80057b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fa52 	bl	8005bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d001      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e04a      	b.n	8005876 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a21      	ldr	r2, [pc, #132]	; (8005884 <HAL_TIM_Base_Start_IT+0xbc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d018      	beq.n	8005834 <HAL_TIM_Base_Start_IT+0x6c>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580a:	d013      	beq.n	8005834 <HAL_TIM_Base_Start_IT+0x6c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <HAL_TIM_Base_Start_IT+0xc0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00e      	beq.n	8005834 <HAL_TIM_Base_Start_IT+0x6c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_TIM_Base_Start_IT+0xc4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d009      	beq.n	8005834 <HAL_TIM_Base_Start_IT+0x6c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1a      	ldr	r2, [pc, #104]	; (8005890 <HAL_TIM_Base_Start_IT+0xc8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_TIM_Base_Start_IT+0x6c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a19      	ldr	r2, [pc, #100]	; (8005894 <HAL_TIM_Base_Start_IT+0xcc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d115      	bne.n	8005860 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	4b17      	ldr	r3, [pc, #92]	; (8005898 <HAL_TIM_Base_Start_IT+0xd0>)
 800583c:	4013      	ands	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b06      	cmp	r3, #6
 8005844:	d015      	beq.n	8005872 <HAL_TIM_Base_Start_IT+0xaa>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d011      	beq.n	8005872 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0201 	orr.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585e:	e008      	b.n	8005872 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e000      	b.n	8005874 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40000400 	.word	0x40000400
 800588c:	40000800 	.word	0x40000800
 8005890:	40013400 	.word	0x40013400
 8005894:	40014000 	.word	0x40014000
 8005898:	00010007 	.word	0x00010007

0800589c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0202 	mvn.w	r2, #2
 80058c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f965 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f957 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f968 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b04      	cmp	r3, #4
 8005904:	d122      	bne.n	800594c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b04      	cmp	r3, #4
 8005912:	d11b      	bne.n	800594c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0204 	mvn.w	r2, #4
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f93b 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f92d 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f93e 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b08      	cmp	r3, #8
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b08      	cmp	r3, #8
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0208 	mvn.w	r2, #8
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f911 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f903 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f914 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0210 	mvn.w	r2, #16
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2208      	movs	r2, #8
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8e7 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8d9 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f8ea 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10e      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d107      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0201 	mvn.w	r2, #1
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fb fd92 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b80      	cmp	r3, #128	; 0x80
 8005a2c:	d10e      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	d107      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f96a 	bl	8005d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5a:	d10e      	bne.n	8005a7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d107      	bne.n	8005a7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f95d 	bl	8005d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d10e      	bne.n	8005aa6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d107      	bne.n	8005aa6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f898 	bl	8005bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d10e      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d107      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f06f 0220 	mvn.w	r2, #32
 8005aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f91d 	bl	8005d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae0:	d10f      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af0:	d107      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f923 	bl	8005d48 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b10:	d10f      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b20:	d107      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f915 	bl	8005d5c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b40:	d10f      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b50:	d107      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f907 	bl	8005d70 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b70:	d10f      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b80:	d107      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f8f9 	bl	8005d84 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a3c      	ldr	r2, [pc, #240]	; (8005cf0 <TIM_Base_SetConfig+0x104>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_Base_SetConfig+0x38>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0a:	d00b      	beq.n	8005c24 <TIM_Base_SetConfig+0x38>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a39      	ldr	r2, [pc, #228]	; (8005cf4 <TIM_Base_SetConfig+0x108>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_Base_SetConfig+0x38>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <TIM_Base_SetConfig+0x10c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_Base_SetConfig+0x38>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a37      	ldr	r2, [pc, #220]	; (8005cfc <TIM_Base_SetConfig+0x110>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d108      	bne.n	8005c36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <TIM_Base_SetConfig+0x104>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01b      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d017      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2a      	ldr	r2, [pc, #168]	; (8005cf4 <TIM_Base_SetConfig+0x108>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <TIM_Base_SetConfig+0x10c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00f      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <TIM_Base_SetConfig+0x110>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <TIM_Base_SetConfig+0x114>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <TIM_Base_SetConfig+0x118>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a25      	ldr	r2, [pc, #148]	; (8005d08 <TIM_Base_SetConfig+0x11c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d108      	bne.n	8005c88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a10      	ldr	r2, [pc, #64]	; (8005cf0 <TIM_Base_SetConfig+0x104>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_Base_SetConfig+0xe8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <TIM_Base_SetConfig+0x110>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_Base_SetConfig+0xe8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <TIM_Base_SetConfig+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_Base_SetConfig+0xe8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a0f      	ldr	r2, [pc, #60]	; (8005d04 <TIM_Base_SetConfig+0x118>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_Base_SetConfig+0xe8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <TIM_Base_SetConfig+0x11c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d103      	bne.n	8005cdc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	615a      	str	r2, [r3, #20]
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e042      	b.n	8005e30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7fb fd0f 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2224      	movs	r2, #36	; 0x24
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fc62 	bl	80066a4 <UART_SetConfig>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e022      	b.n	8005e30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fef2 	bl	8006bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 ff79 	bl	8006d20 <UART_CheckIdleState>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b091      	sub	sp, #68	; 0x44
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	f040 808c 	bne.w	8005f6a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_UART_Transmit_IT+0x26>
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e084      	b.n	8005f6c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_UART_Transmit_IT+0x38>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e07d      	b.n	8005f6c <HAL_UART_Transmit_IT+0x134>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	88fa      	ldrh	r2, [r7, #6]
 8005e8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2221      	movs	r2, #33	; 0x21
 8005ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eac:	d12e      	bne.n	8005f0c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb6:	d107      	bne.n	8005ec8 <HAL_UART_Transmit_IT+0x90>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d103      	bne.n	8005ec8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a2d      	ldr	r2, [pc, #180]	; (8005f78 <HAL_UART_Transmit_IT+0x140>)
 8005ec4:	675a      	str	r2, [r3, #116]	; 0x74
 8005ec6:	e002      	b.n	8005ece <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a2c      	ldr	r2, [pc, #176]	; (8005f7c <HAL_UART_Transmit_IT+0x144>)
 8005ecc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3308      	adds	r3, #8
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ef8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e5      	bne.n	8005ed6 <HAL_UART_Transmit_IT+0x9e>
 8005f0a:	e02c      	b.n	8005f66 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f14:	d107      	bne.n	8005f26 <HAL_UART_Transmit_IT+0xee>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <HAL_UART_Transmit_IT+0x148>)
 8005f22:	675a      	str	r2, [r3, #116]	; 0x74
 8005f24:	e002      	b.n	8005f2c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <HAL_UART_Transmit_IT+0x14c>)
 8005f2a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	613b      	str	r3, [r7, #16]
   return(result);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f52:	623b      	str	r3, [r7, #32]
 8005f54:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	69f9      	ldr	r1, [r7, #28]
 8005f58:	6a3a      	ldr	r2, [r7, #32]
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e6      	bne.n	8005f34 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e000      	b.n	8005f6c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005f6a:	2302      	movs	r3, #2
  }
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3744      	adds	r7, #68	; 0x44
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	080074ef 	.word	0x080074ef
 8005f7c:	0800740f 	.word	0x0800740f
 8005f80:	0800734d 	.word	0x0800734d
 8005f84:	08007295 	.word	0x08007295

08005f88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d142      	bne.n	8006026 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_UART_Receive_IT+0x24>
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e03b      	b.n	8006028 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Receive_IT+0x36>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e034      	b.n	8006028 <HAL_UART_Receive_IT+0xa0>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a17      	ldr	r2, [pc, #92]	; (8006030 <HAL_UART_Receive_IT+0xa8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01f      	beq.n	8006016 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d018      	beq.n	8006016 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	623b      	str	r3, [r7, #32]
 8006004:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	69f9      	ldr	r1, [r7, #28]
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e6      	bne.n	8005fe4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	461a      	mov	r2, r3
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 ff93 	bl	8006f48 <UART_Start_Receive_IT>
 8006022:	4603      	mov	r3, r0
 8006024:	e000      	b.n	8006028 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	3728      	adds	r7, #40	; 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40008000 	.word	0x40008000

08006034 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b0ba      	sub	sp, #232	; 0xe8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800605a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800605e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006062:	4013      	ands	r3, r2
 8006064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d11b      	bne.n	80060a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d015      	beq.n	80060a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800607c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d009      	beq.n	80060a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 82d6 	beq.w	800664a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4798      	blx	r3
      }
      return;
 80060a6:	e2d0      	b.n	800664a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 811f 	beq.w	80062f0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80060b6:	4b8b      	ldr	r3, [pc, #556]	; (80062e4 <HAL_UART_IRQHandler+0x2b0>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060c2:	4b89      	ldr	r3, [pc, #548]	; (80062e8 <HAL_UART_IRQHandler+0x2b4>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8112 	beq.w	80062f0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d011      	beq.n	80060fc <HAL_UART_IRQHandler+0xc8>
 80060d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f2:	f043 0201 	orr.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d011      	beq.n	800612c <HAL_UART_IRQHandler+0xf8>
 8006108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2202      	movs	r2, #2
 800611a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006122:	f043 0204 	orr.w	r2, r3, #4
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d011      	beq.n	800615c <HAL_UART_IRQHandler+0x128>
 8006138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2204      	movs	r2, #4
 800614a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006152:	f043 0202 	orr.w	r2, r3, #2
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d017      	beq.n	8006198 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d105      	bne.n	8006180 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006174:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006178:	4b5a      	ldr	r3, [pc, #360]	; (80062e4 <HAL_UART_IRQHandler+0x2b0>)
 800617a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2208      	movs	r2, #8
 8006186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618e:	f043 0208 	orr.w	r2, r3, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d012      	beq.n	80061ca <HAL_UART_IRQHandler+0x196>
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00c      	beq.n	80061ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 823c 	beq.w	800664e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d013      	beq.n	800620a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d105      	bne.n	80061fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d005      	beq.n	800622e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006226:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800622a:	2b00      	cmp	r3, #0
 800622c:	d04f      	beq.n	80062ce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 ffb4 	bl	800719c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d141      	bne.n	80062c6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800625c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3308      	adds	r3, #8
 800626a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800626e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800627a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1d9      	bne.n	8006242 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d013      	beq.n	80062be <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629a:	4a14      	ldr	r2, [pc, #80]	; (80062ec <HAL_UART_IRQHandler+0x2b8>)
 800629c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fb ff07 	bl	80020b6 <HAL_DMA_Abort_IT>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d017      	beq.n	80062de <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80062b8:	4610      	mov	r0, r2
 80062ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062bc:	e00f      	b.n	80062de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f9da 	bl	8006678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c4:	e00b      	b.n	80062de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9d6 	bl	8006678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	e007      	b.n	80062de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f9d2 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80062dc:	e1b7      	b.n	800664e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062de:	bf00      	nop
    return;
 80062e0:	e1b5      	b.n	800664e <HAL_UART_IRQHandler+0x61a>
 80062e2:	bf00      	nop
 80062e4:	10000001 	.word	0x10000001
 80062e8:	04000120 	.word	0x04000120
 80062ec:	08007269 	.word	0x08007269

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	f040 814a 	bne.w	800658e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8143 	beq.w	800658e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 813c 	beq.w	800658e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2210      	movs	r2, #16
 800631c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	f040 80b5 	bne.w	8006498 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800633a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8187 	beq.w	8006652 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800634a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800634e:	429a      	cmp	r2, r3
 8006350:	f080 817f 	bcs.w	8006652 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800635a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 8086 	bne.w	800647c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800639a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800639e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1da      	bne.n	8006370 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e1      	bne.n	80063ba <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3308      	adds	r3, #8
 80063fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800641a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800641c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e3      	bne.n	80063f6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800644a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644c:	f023 0310 	bic.w	r3, r3, #16
 8006450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800645e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006460:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800646c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e4      	bne.n	800643c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006476:	4618      	mov	r0, r3
 8006478:	f7fb fdc4 	bl	8002004 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006488:	b29b      	uxth	r3, r3
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	b29b      	uxth	r3, r3
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8fb 	bl	800668c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006496:	e0dc      	b.n	8006652 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80ce 	beq.w	8006656 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80064ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 80c9 	beq.w	8006656 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064e6:	647b      	str	r3, [r7, #68]	; 0x44
 80064e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e4      	bne.n	80064c4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	623b      	str	r3, [r7, #32]
   return(result);
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3308      	adds	r3, #8
 800651e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006522:	633a      	str	r2, [r7, #48]	; 0x30
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e1      	bne.n	80064fa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	60fb      	str	r3, [r7, #12]
   return(result);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0310 	bic.w	r3, r3, #16
 800655e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	617b      	str	r3, [r7, #20]
   return(result);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e4      	bne.n	800654a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f880 	bl	800668c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800658c:	e063      	b.n	8006656 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00e      	beq.n	80065b8 <HAL_UART_IRQHandler+0x584>
 800659a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800659e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 fc99 	bl	8007ee8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065b6:	e051      	b.n	800665c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d014      	beq.n	80065ee <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d03a      	beq.n	800665a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
    }
    return;
 80065ec:	e035      	b.n	800665a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <HAL_UART_IRQHandler+0x5da>
 80065fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 ffe6 	bl	80075d8 <UART_EndTransmit_IT>
    return;
 800660c:	e026      	b.n	800665c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_UART_IRQHandler+0x5fa>
 800661a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 fc72 	bl	8007f10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800662c:	e016      	b.n	800665c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d010      	beq.n	800665c <HAL_UART_IRQHandler+0x628>
 800663a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663e:	2b00      	cmp	r3, #0
 8006640:	da0c      	bge.n	800665c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fc5a 	bl	8007efc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006648:	e008      	b.n	800665c <HAL_UART_IRQHandler+0x628>
      return;
 800664a:	bf00      	nop
 800664c:	e006      	b.n	800665c <HAL_UART_IRQHandler+0x628>
    return;
 800664e:	bf00      	nop
 8006650:	e004      	b.n	800665c <HAL_UART_IRQHandler+0x628>
      return;
 8006652:	bf00      	nop
 8006654:	e002      	b.n	800665c <HAL_UART_IRQHandler+0x628>
      return;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <HAL_UART_IRQHandler+0x628>
    return;
 800665a:	bf00      	nop
  }
}
 800665c:	37e8      	adds	r7, #232	; 0xe8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop

08006664 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a4:	b5b0      	push	{r4, r5, r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4baf      	ldr	r3, [pc, #700]	; (800698c <UART_SetConfig+0x2e8>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	69f9      	ldr	r1, [r7, #28]
 80066d8:	430b      	orrs	r3, r1
 80066da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4aa4      	ldr	r2, [pc, #656]	; (8006990 <UART_SetConfig+0x2ec>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	4313      	orrs	r3, r2
 800670a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006716:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	69f9      	ldr	r1, [r7, #28]
 8006720:	430b      	orrs	r3, r1
 8006722:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	f023 010f 	bic.w	r1, r3, #15
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a95      	ldr	r2, [pc, #596]	; (8006994 <UART_SetConfig+0x2f0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d120      	bne.n	8006786 <UART_SetConfig+0xe2>
 8006744:	4b94      	ldr	r3, [pc, #592]	; (8006998 <UART_SetConfig+0x2f4>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	2b03      	cmp	r3, #3
 8006750:	d816      	bhi.n	8006780 <UART_SetConfig+0xdc>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <UART_SetConfig+0xb4>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	08006769 	.word	0x08006769
 800675c:	08006775 	.word	0x08006775
 8006760:	0800676f 	.word	0x0800676f
 8006764:	0800677b 	.word	0x0800677b
 8006768:	2301      	movs	r3, #1
 800676a:	76fb      	strb	r3, [r7, #27]
 800676c:	e0bc      	b.n	80068e8 <UART_SetConfig+0x244>
 800676e:	2302      	movs	r3, #2
 8006770:	76fb      	strb	r3, [r7, #27]
 8006772:	e0b9      	b.n	80068e8 <UART_SetConfig+0x244>
 8006774:	2304      	movs	r3, #4
 8006776:	76fb      	strb	r3, [r7, #27]
 8006778:	e0b6      	b.n	80068e8 <UART_SetConfig+0x244>
 800677a:	2308      	movs	r3, #8
 800677c:	76fb      	strb	r3, [r7, #27]
 800677e:	e0b3      	b.n	80068e8 <UART_SetConfig+0x244>
 8006780:	2310      	movs	r3, #16
 8006782:	76fb      	strb	r3, [r7, #27]
 8006784:	e0b0      	b.n	80068e8 <UART_SetConfig+0x244>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a84      	ldr	r2, [pc, #528]	; (800699c <UART_SetConfig+0x2f8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d132      	bne.n	80067f6 <UART_SetConfig+0x152>
 8006790:	4b81      	ldr	r3, [pc, #516]	; (8006998 <UART_SetConfig+0x2f4>)
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006796:	f003 030c 	and.w	r3, r3, #12
 800679a:	2b0c      	cmp	r3, #12
 800679c:	d828      	bhi.n	80067f0 <UART_SetConfig+0x14c>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <UART_SetConfig+0x100>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067d9 	.word	0x080067d9
 80067a8:	080067f1 	.word	0x080067f1
 80067ac:	080067f1 	.word	0x080067f1
 80067b0:	080067f1 	.word	0x080067f1
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	080067f1 	.word	0x080067f1
 80067bc:	080067f1 	.word	0x080067f1
 80067c0:	080067f1 	.word	0x080067f1
 80067c4:	080067df 	.word	0x080067df
 80067c8:	080067f1 	.word	0x080067f1
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067eb 	.word	0x080067eb
 80067d8:	2300      	movs	r3, #0
 80067da:	76fb      	strb	r3, [r7, #27]
 80067dc:	e084      	b.n	80068e8 <UART_SetConfig+0x244>
 80067de:	2302      	movs	r3, #2
 80067e0:	76fb      	strb	r3, [r7, #27]
 80067e2:	e081      	b.n	80068e8 <UART_SetConfig+0x244>
 80067e4:	2304      	movs	r3, #4
 80067e6:	76fb      	strb	r3, [r7, #27]
 80067e8:	e07e      	b.n	80068e8 <UART_SetConfig+0x244>
 80067ea:	2308      	movs	r3, #8
 80067ec:	76fb      	strb	r3, [r7, #27]
 80067ee:	e07b      	b.n	80068e8 <UART_SetConfig+0x244>
 80067f0:	2310      	movs	r3, #16
 80067f2:	76fb      	strb	r3, [r7, #27]
 80067f4:	e078      	b.n	80068e8 <UART_SetConfig+0x244>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a69      	ldr	r2, [pc, #420]	; (80069a0 <UART_SetConfig+0x2fc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d120      	bne.n	8006842 <UART_SetConfig+0x19e>
 8006800:	4b65      	ldr	r3, [pc, #404]	; (8006998 <UART_SetConfig+0x2f4>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800680a:	2b30      	cmp	r3, #48	; 0x30
 800680c:	d013      	beq.n	8006836 <UART_SetConfig+0x192>
 800680e:	2b30      	cmp	r3, #48	; 0x30
 8006810:	d814      	bhi.n	800683c <UART_SetConfig+0x198>
 8006812:	2b20      	cmp	r3, #32
 8006814:	d009      	beq.n	800682a <UART_SetConfig+0x186>
 8006816:	2b20      	cmp	r3, #32
 8006818:	d810      	bhi.n	800683c <UART_SetConfig+0x198>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <UART_SetConfig+0x180>
 800681e:	2b10      	cmp	r3, #16
 8006820:	d006      	beq.n	8006830 <UART_SetConfig+0x18c>
 8006822:	e00b      	b.n	800683c <UART_SetConfig+0x198>
 8006824:	2300      	movs	r3, #0
 8006826:	76fb      	strb	r3, [r7, #27]
 8006828:	e05e      	b.n	80068e8 <UART_SetConfig+0x244>
 800682a:	2302      	movs	r3, #2
 800682c:	76fb      	strb	r3, [r7, #27]
 800682e:	e05b      	b.n	80068e8 <UART_SetConfig+0x244>
 8006830:	2304      	movs	r3, #4
 8006832:	76fb      	strb	r3, [r7, #27]
 8006834:	e058      	b.n	80068e8 <UART_SetConfig+0x244>
 8006836:	2308      	movs	r3, #8
 8006838:	76fb      	strb	r3, [r7, #27]
 800683a:	e055      	b.n	80068e8 <UART_SetConfig+0x244>
 800683c:	2310      	movs	r3, #16
 800683e:	76fb      	strb	r3, [r7, #27]
 8006840:	e052      	b.n	80068e8 <UART_SetConfig+0x244>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a57      	ldr	r2, [pc, #348]	; (80069a4 <UART_SetConfig+0x300>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d120      	bne.n	800688e <UART_SetConfig+0x1ea>
 800684c:	4b52      	ldr	r3, [pc, #328]	; (8006998 <UART_SetConfig+0x2f4>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006856:	2bc0      	cmp	r3, #192	; 0xc0
 8006858:	d013      	beq.n	8006882 <UART_SetConfig+0x1de>
 800685a:	2bc0      	cmp	r3, #192	; 0xc0
 800685c:	d814      	bhi.n	8006888 <UART_SetConfig+0x1e4>
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d009      	beq.n	8006876 <UART_SetConfig+0x1d2>
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d810      	bhi.n	8006888 <UART_SetConfig+0x1e4>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <UART_SetConfig+0x1cc>
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d006      	beq.n	800687c <UART_SetConfig+0x1d8>
 800686e:	e00b      	b.n	8006888 <UART_SetConfig+0x1e4>
 8006870:	2300      	movs	r3, #0
 8006872:	76fb      	strb	r3, [r7, #27]
 8006874:	e038      	b.n	80068e8 <UART_SetConfig+0x244>
 8006876:	2302      	movs	r3, #2
 8006878:	76fb      	strb	r3, [r7, #27]
 800687a:	e035      	b.n	80068e8 <UART_SetConfig+0x244>
 800687c:	2304      	movs	r3, #4
 800687e:	76fb      	strb	r3, [r7, #27]
 8006880:	e032      	b.n	80068e8 <UART_SetConfig+0x244>
 8006882:	2308      	movs	r3, #8
 8006884:	76fb      	strb	r3, [r7, #27]
 8006886:	e02f      	b.n	80068e8 <UART_SetConfig+0x244>
 8006888:	2310      	movs	r3, #16
 800688a:	76fb      	strb	r3, [r7, #27]
 800688c:	e02c      	b.n	80068e8 <UART_SetConfig+0x244>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a3f      	ldr	r2, [pc, #252]	; (8006990 <UART_SetConfig+0x2ec>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d125      	bne.n	80068e4 <UART_SetConfig+0x240>
 8006898:	4b3f      	ldr	r3, [pc, #252]	; (8006998 <UART_SetConfig+0x2f4>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a6:	d017      	beq.n	80068d8 <UART_SetConfig+0x234>
 80068a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ac:	d817      	bhi.n	80068de <UART_SetConfig+0x23a>
 80068ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b2:	d00b      	beq.n	80068cc <UART_SetConfig+0x228>
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b8:	d811      	bhi.n	80068de <UART_SetConfig+0x23a>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <UART_SetConfig+0x222>
 80068be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c2:	d006      	beq.n	80068d2 <UART_SetConfig+0x22e>
 80068c4:	e00b      	b.n	80068de <UART_SetConfig+0x23a>
 80068c6:	2300      	movs	r3, #0
 80068c8:	76fb      	strb	r3, [r7, #27]
 80068ca:	e00d      	b.n	80068e8 <UART_SetConfig+0x244>
 80068cc:	2302      	movs	r3, #2
 80068ce:	76fb      	strb	r3, [r7, #27]
 80068d0:	e00a      	b.n	80068e8 <UART_SetConfig+0x244>
 80068d2:	2304      	movs	r3, #4
 80068d4:	76fb      	strb	r3, [r7, #27]
 80068d6:	e007      	b.n	80068e8 <UART_SetConfig+0x244>
 80068d8:	2308      	movs	r3, #8
 80068da:	76fb      	strb	r3, [r7, #27]
 80068dc:	e004      	b.n	80068e8 <UART_SetConfig+0x244>
 80068de:	2310      	movs	r3, #16
 80068e0:	76fb      	strb	r3, [r7, #27]
 80068e2:	e001      	b.n	80068e8 <UART_SetConfig+0x244>
 80068e4:	2310      	movs	r3, #16
 80068e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a28      	ldr	r2, [pc, #160]	; (8006990 <UART_SetConfig+0x2ec>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f040 809e 	bne.w	8006a30 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068f4:	7efb      	ldrb	r3, [r7, #27]
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d823      	bhi.n	8006942 <UART_SetConfig+0x29e>
 80068fa:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <UART_SetConfig+0x25c>)
 80068fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006900:	08006925 	.word	0x08006925
 8006904:	08006943 	.word	0x08006943
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006943 	.word	0x08006943
 8006910:	08006933 	.word	0x08006933
 8006914:	08006943 	.word	0x08006943
 8006918:	08006943 	.word	0x08006943
 800691c:	08006943 	.word	0x08006943
 8006920:	0800693b 	.word	0x0800693b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006924:	f7fe fc5a 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8006928:	6178      	str	r0, [r7, #20]
        break;
 800692a:	e00f      	b.n	800694c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800692c:	4b1e      	ldr	r3, [pc, #120]	; (80069a8 <UART_SetConfig+0x304>)
 800692e:	617b      	str	r3, [r7, #20]
        break;
 8006930:	e00c      	b.n	800694c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006932:	f7fe fbe5 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8006936:	6178      	str	r0, [r7, #20]
        break;
 8006938:	e008      	b.n	800694c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800693a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693e:	617b      	str	r3, [r7, #20]
        break;
 8006940:	e004      	b.n	800694c <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	76bb      	strb	r3, [r7, #26]
        break;
 800694a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 812c 	beq.w	8006bac <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	4a14      	ldr	r2, [pc, #80]	; (80069ac <UART_SetConfig+0x308>)
 800695a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800695e:	461a      	mov	r2, r3
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	fbb3 f3f2 	udiv	r3, r3, r2
 8006966:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4413      	add	r3, r2
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	429a      	cmp	r2, r3
 8006976:	d305      	bcc.n	8006984 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	429a      	cmp	r2, r3
 8006982:	d915      	bls.n	80069b0 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	76bb      	strb	r3, [r7, #26]
 8006988:	e110      	b.n	8006bac <UART_SetConfig+0x508>
 800698a:	bf00      	nop
 800698c:	cfff69f3 	.word	0xcfff69f3
 8006990:	40008000 	.word	0x40008000
 8006994:	40013800 	.word	0x40013800
 8006998:	40021000 	.word	0x40021000
 800699c:	40004400 	.word	0x40004400
 80069a0:	40004800 	.word	0x40004800
 80069a4:	40004c00 	.word	0x40004c00
 80069a8:	00f42400 	.word	0x00f42400
 80069ac:	0800bf60 	.word	0x0800bf60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f04f 0100 	mov.w	r1, #0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	4a85      	ldr	r2, [pc, #532]	; (8006bd4 <UART_SetConfig+0x530>)
 80069be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	f7f9 fc2a 	bl	8000220 <__aeabi_uldivmod>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4610      	mov	r0, r2
 80069d2:	4619      	mov	r1, r3
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	020b      	lsls	r3, r1, #8
 80069de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069e2:	0202      	lsls	r2, r0, #8
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	6849      	ldr	r1, [r1, #4]
 80069e8:	0849      	lsrs	r1, r1, #1
 80069ea:	4608      	mov	r0, r1
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	1814      	adds	r4, r2, r0
 80069f2:	eb43 0501 	adc.w	r5, r3, r1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	4620      	mov	r0, r4
 8006a02:	4629      	mov	r1, r5
 8006a04:	f7f9 fc0c 	bl	8000220 <__aeabi_uldivmod>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a16:	d308      	bcc.n	8006a2a <UART_SetConfig+0x386>
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1e:	d204      	bcs.n	8006a2a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	60da      	str	r2, [r3, #12]
 8006a28:	e0c0      	b.n	8006bac <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	76bb      	strb	r3, [r7, #26]
 8006a2e:	e0bd      	b.n	8006bac <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a38:	d164      	bne.n	8006b04 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006a3a:	7efb      	ldrb	r3, [r7, #27]
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d828      	bhi.n	8006a92 <UART_SetConfig+0x3ee>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0x3a4>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006a93 	.word	0x08006a93
 8006a58:	08006a83 	.word	0x08006a83
 8006a5c:	08006a93 	.word	0x08006a93
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006a93 	.word	0x08006a93
 8006a68:	08006a8b 	.word	0x08006a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7fe fbb6 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8006a70:	6178      	str	r0, [r7, #20]
        break;
 8006a72:	e013      	b.n	8006a9c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7fe fbc8 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8006a78:	6178      	str	r0, [r7, #20]
        break;
 8006a7a:	e00f      	b.n	8006a9c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a7c:	4b56      	ldr	r3, [pc, #344]	; (8006bd8 <UART_SetConfig+0x534>)
 8006a7e:	617b      	str	r3, [r7, #20]
        break;
 8006a80:	e00c      	b.n	8006a9c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a82:	f7fe fb3d 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8006a86:	6178      	str	r0, [r7, #20]
        break;
 8006a88:	e008      	b.n	8006a9c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8e:	617b      	str	r3, [r7, #20]
        break;
 8006a90:	e004      	b.n	8006a9c <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	76bb      	strb	r3, [r7, #26]
        break;
 8006a9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8084 	beq.w	8006bac <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	4a4a      	ldr	r2, [pc, #296]	; (8006bd4 <UART_SetConfig+0x530>)
 8006aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ab6:	005a      	lsls	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	441a      	add	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b0f      	cmp	r3, #15
 8006ace:	d916      	bls.n	8006afe <UART_SetConfig+0x45a>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad6:	d212      	bcs.n	8006afe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f023 030f 	bic.w	r3, r3, #15
 8006ae0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	085b      	lsrs	r3, r3, #1
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	89fb      	ldrh	r3, [r7, #14]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	89fa      	ldrh	r2, [r7, #14]
 8006afa:	60da      	str	r2, [r3, #12]
 8006afc:	e056      	b.n	8006bac <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	76bb      	strb	r3, [r7, #26]
 8006b02:	e053      	b.n	8006bac <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b04:	7efb      	ldrb	r3, [r7, #27]
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d827      	bhi.n	8006b5a <UART_SetConfig+0x4b6>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <UART_SetConfig+0x46c>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b35 	.word	0x08006b35
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	08006b5b 	.word	0x08006b5b
 8006b20:	08006b4b 	.word	0x08006b4b
 8006b24:	08006b5b 	.word	0x08006b5b
 8006b28:	08006b5b 	.word	0x08006b5b
 8006b2c:	08006b5b 	.word	0x08006b5b
 8006b30:	08006b53 	.word	0x08006b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b34:	f7fe fb52 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8006b38:	6178      	str	r0, [r7, #20]
        break;
 8006b3a:	e013      	b.n	8006b64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3c:	f7fe fb64 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8006b40:	6178      	str	r0, [r7, #20]
        break;
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b44:	4b24      	ldr	r3, [pc, #144]	; (8006bd8 <UART_SetConfig+0x534>)
 8006b46:	617b      	str	r3, [r7, #20]
        break;
 8006b48:	e00c      	b.n	8006b64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b4a:	f7fe fad9 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8006b4e:	6178      	str	r0, [r7, #20]
        break;
 8006b50:	e008      	b.n	8006b64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b56:	617b      	str	r3, [r7, #20]
        break;
 8006b58:	e004      	b.n	8006b64 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	76bb      	strb	r3, [r7, #26]
        break;
 8006b62:	bf00      	nop
    }

    if (pclk != 0U)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d020      	beq.n	8006bac <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <UART_SetConfig+0x530>)
 8006b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b74:	461a      	mov	r2, r3
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	085b      	lsrs	r3, r3, #1
 8006b82:	441a      	add	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b0f      	cmp	r3, #15
 8006b92:	d909      	bls.n	8006ba8 <UART_SetConfig+0x504>
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9a:	d205      	bcs.n	8006ba8 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	e001      	b.n	8006bac <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006bc8:	7ebb      	ldrb	r3, [r7, #26]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	0800bf60 	.word	0x0800bf60
 8006bd8:	00f42400 	.word	0x00f42400

08006bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cda:	d10a      	bne.n	8006cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d30:	f7fa ffd4 	bl	8001cdc <HAL_GetTick>
 8006d34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d10e      	bne.n	8006d62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f82f 	bl	8006db6 <UART_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e025      	b.n	8006dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d10e      	bne.n	8006d8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f819 	bl	8006db6 <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e00f      	b.n	8006dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b09c      	sub	sp, #112	; 0x70
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	603b      	str	r3, [r7, #0]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc6:	e0a9      	b.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	f000 80a5 	beq.w	8006f1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fa ff83 	bl	8001cdc <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d140      	bne.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e6      	bne.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	663b      	str	r3, [r7, #96]	; 0x60
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e5      	bne.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e069      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d051      	beq.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e86:	d149      	bne.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ee4:	623a      	str	r2, [r7, #32]
 8006ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	6a3a      	ldr	r2, [r7, #32]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e010      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69da      	ldr	r2, [r3, #28]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4013      	ands	r3, r2
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	461a      	mov	r2, r3
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	f43f af46 	beq.w	8006dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3770      	adds	r7, #112	; 0x70
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b0a3      	sub	sp, #140	; 0x8c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	88fa      	ldrh	r2, [r7, #6]
 8006f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7a:	d10e      	bne.n	8006f9a <UART_Start_Receive_IT+0x52>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d105      	bne.n	8006f90 <UART_Start_Receive_IT+0x48>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f8e:	e02d      	b.n	8006fec <UART_Start_Receive_IT+0xa4>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	22ff      	movs	r2, #255	; 0xff
 8006f94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f98:	e028      	b.n	8006fec <UART_Start_Receive_IT+0xa4>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10d      	bne.n	8006fbe <UART_Start_Receive_IT+0x76>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <UART_Start_Receive_IT+0x6c>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	22ff      	movs	r2, #255	; 0xff
 8006fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006fb2:	e01b      	b.n	8006fec <UART_Start_Receive_IT+0xa4>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	227f      	movs	r2, #127	; 0x7f
 8006fb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006fbc:	e016      	b.n	8006fec <UART_Start_Receive_IT+0xa4>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fc6:	d10d      	bne.n	8006fe4 <UART_Start_Receive_IT+0x9c>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <UART_Start_Receive_IT+0x92>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	227f      	movs	r2, #127	; 0x7f
 8006fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006fd8:	e008      	b.n	8006fec <UART_Start_Receive_IT+0xa4>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	223f      	movs	r2, #63	; 0x3f
 8006fde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006fe2:	e003      	b.n	8006fec <UART_Start_Receive_IT+0xa4>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2222      	movs	r2, #34	; 0x22
 8006ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3308      	adds	r3, #8
 8007002:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800700c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3308      	adds	r3, #8
 800701c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007020:	673a      	str	r2, [r7, #112]	; 0x70
 8007022:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007026:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800702e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e3      	bne.n	8006ffc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703c:	d153      	bne.n	80070e6 <UART_Start_Receive_IT+0x19e>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007044:	88fa      	ldrh	r2, [r7, #6]
 8007046:	429a      	cmp	r2, r3
 8007048:	d34d      	bcc.n	80070e6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007052:	d107      	bne.n	8007064 <UART_Start_Receive_IT+0x11c>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d103      	bne.n	8007064 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a4b      	ldr	r2, [pc, #300]	; (800718c <UART_Start_Receive_IT+0x244>)
 8007060:	671a      	str	r2, [r3, #112]	; 0x70
 8007062:	e002      	b.n	800706a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4a4a      	ldr	r2, [pc, #296]	; (8007190 <UART_Start_Receive_IT+0x248>)
 8007068:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d01a      	beq.n	80070b0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800708a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800709c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800709e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e4      	bne.n	800707a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3308      	adds	r3, #8
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3308      	adds	r3, #8
 80070ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80070d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80070d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e5      	bne.n	80070b0 <UART_Start_Receive_IT+0x168>
 80070e4:	e04a      	b.n	800717c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ee:	d107      	bne.n	8007100 <UART_Start_Receive_IT+0x1b8>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4a26      	ldr	r2, [pc, #152]	; (8007194 <UART_Start_Receive_IT+0x24c>)
 80070fc:	671a      	str	r2, [r3, #112]	; 0x70
 80070fe:	e002      	b.n	8007106 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a25      	ldr	r2, [pc, #148]	; (8007198 <UART_Start_Receive_IT+0x250>)
 8007104:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d019      	beq.n	800714a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800712a:	677b      	str	r3, [r7, #116]	; 0x74
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
 8007136:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800713a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e6      	bne.n	8007116 <UART_Start_Receive_IT+0x1ce>
 8007148:	e018      	b.n	800717c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	613b      	str	r3, [r7, #16]
   return(result);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f043 0320 	orr.w	r3, r3, #32
 800715e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007168:	623b      	str	r3, [r7, #32]
 800716a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	69f9      	ldr	r1, [r7, #28]
 800716e:	6a3a      	ldr	r2, [r7, #32]
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	61bb      	str	r3, [r7, #24]
   return(result);
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e6      	bne.n	800714a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	378c      	adds	r7, #140	; 0x8c
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	08007be9 	.word	0x08007be9
 8007190:	080078f1 	.word	0x080078f1
 8007194:	0800778f 	.word	0x0800778f
 8007198:	0800762f 	.word	0x0800762f

0800719c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800719c:	b480      	push	{r7}
 800719e:	b095      	sub	sp, #84	; 0x54
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c2:	643b      	str	r3, [r7, #64]	; 0x40
 80071c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e6      	bne.n	80071a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e3      	bne.n	80071d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d118      	bne.n	8007248 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	60bb      	str	r3, [r7, #8]
   return(result);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f023 0310 	bic.w	r3, r3, #16
 800722a:	647b      	str	r3, [r7, #68]	; 0x44
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007234:	61bb      	str	r3, [r7, #24]
 8007236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6979      	ldr	r1, [r7, #20]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	613b      	str	r3, [r7, #16]
   return(result);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e6      	bne.n	8007216 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800725c:	bf00      	nop
 800725e:	3754      	adds	r7, #84	; 0x54
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f7ff f9f6 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b08f      	sub	sp, #60	; 0x3c
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a2:	2b21      	cmp	r3, #33	; 0x21
 80072a4:	d14c      	bne.n	8007340 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d132      	bne.n	8007318 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	61fb      	str	r3, [r7, #28]
   return(result);
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c6:	637b      	str	r3, [r7, #52]	; 0x34
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f8:	633b      	str	r3, [r7, #48]	; 0x30
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	61bb      	str	r3, [r7, #24]
 8007304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6979      	ldr	r1, [r7, #20]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	613b      	str	r3, [r7, #16]
   return(result);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e6      	bne.n	80072e4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007316:	e013      	b.n	8007340 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007340:	bf00      	nop
 8007342:	373c      	adds	r7, #60	; 0x3c
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b091      	sub	sp, #68	; 0x44
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735a:	2b21      	cmp	r3, #33	; 0x21
 800735c:	d151      	bne.n	8007402 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d132      	bne.n	80073d0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	623b      	str	r3, [r7, #32]
   return(result);
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800737e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	633b      	str	r3, [r7, #48]	; 0x30
 800738a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e6      	bne.n	800736a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	69b9      	ldr	r1, [r7, #24]
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	617b      	str	r3, [r7, #20]
   return(result);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e6      	bne.n	800739c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80073ce:	e018      	b.n	8007402 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80073d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ea:	1c9a      	adds	r2, r3, #2
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007402:	bf00      	nop
 8007404:	3744      	adds	r7, #68	; 0x44
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800740e:	b480      	push	{r7}
 8007410:	b091      	sub	sp, #68	; 0x44
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800741c:	2b21      	cmp	r3, #33	; 0x21
 800741e:	d160      	bne.n	80074e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007426:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007428:	e057      	b.n	80074da <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d133      	bne.n	800749e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	623b      	str	r3, [r7, #32]
   return(result);
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800744c:	63bb      	str	r3, [r7, #56]	; 0x38
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3308      	adds	r3, #8
 8007454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007456:	633a      	str	r2, [r7, #48]	; 0x30
 8007458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800745c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e5      	bne.n	8007436 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	60fb      	str	r3, [r7, #12]
   return(result);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	61fb      	str	r3, [r7, #28]
 800748a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	69b9      	ldr	r1, [r7, #24]
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	617b      	str	r3, [r7, #20]
   return(result);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800749c:	e021      	b.n	80074e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d013      	beq.n	80074d4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b0:	781a      	ldrb	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80074d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80074d6:	3b01      	subs	r3, #1
 80074d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80074da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1a4      	bne.n	800742a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80074e0:	e7ff      	b.n	80074e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80074e2:	bf00      	nop
 80074e4:	3744      	adds	r7, #68	; 0x44
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b091      	sub	sp, #68	; 0x44
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fc:	2b21      	cmp	r3, #33	; 0x21
 80074fe:	d165      	bne.n	80075cc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007506:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007508:	e05c      	b.n	80075c4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d133      	bne.n	800757e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	61fb      	str	r3, [r7, #28]
   return(result);
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800753c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	60bb      	str	r3, [r7, #8]
   return(result);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800755e:	633b      	str	r3, [r7, #48]	; 0x30
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6979      	ldr	r1, [r7, #20]
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	613b      	str	r3, [r7, #16]
   return(result);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e6      	bne.n	800754a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800757c:	e026      	b.n	80075cc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007588:	2b00      	cmp	r3, #0
 800758a:	d018      	beq.n	80075be <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075a0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a6:	1c9a      	adds	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80075be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80075c0:	3b01      	subs	r3, #1
 80075c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80075c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d19f      	bne.n	800750a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80075ca:	e7ff      	b.n	80075cc <UART_TxISR_16BIT_FIFOEN+0xde>
 80075cc:	bf00      	nop
 80075ce:	3744      	adds	r7, #68	; 0x44
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	613b      	str	r3, [r7, #16]
   return(result);
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e6      	bne.n	80075e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff f81f 	bl	8006664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007626:	bf00      	nop
 8007628:	3720      	adds	r7, #32
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b096      	sub	sp, #88	; 0x58
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800763c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007646:	2b22      	cmp	r3, #34	; 0x22
 8007648:	f040 8095 	bne.w	8007776 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007656:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800765a:	b2d9      	uxtb	r1, r3
 800765c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007660:	b2da      	uxtb	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007666:	400a      	ands	r2, r1
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d178      	bne.n	8007786 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a8:	653b      	str	r3, [r7, #80]	; 0x50
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b2:	647b      	str	r3, [r7, #68]	; 0x44
 80076b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e6      	bne.n	8007694 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	623b      	str	r3, [r7, #32]
   return(result);
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076e6:	633a      	str	r2, [r7, #48]	; 0x30
 80076e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770c:	2b01      	cmp	r3, #1
 800770e:	d12e      	bne.n	800776e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	60fb      	str	r3, [r7, #12]
   return(result);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0310 	bic.w	r3, r3, #16
 800772a:	64bb      	str	r3, [r7, #72]	; 0x48
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	69b9      	ldr	r1, [r7, #24]
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	617b      	str	r3, [r7, #20]
   return(result);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e6      	bne.n	8007716 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f003 0310 	and.w	r3, r3, #16
 8007752:	2b10      	cmp	r3, #16
 8007754:	d103      	bne.n	800775e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2210      	movs	r2, #16
 800775c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fe ff90 	bl	800668c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800776c:	e00b      	b.n	8007786 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7f9 fd26 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 8007774:	e007      	b.n	8007786 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	699a      	ldr	r2, [r3, #24]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0208 	orr.w	r2, r2, #8
 8007784:	619a      	str	r2, [r3, #24]
}
 8007786:	bf00      	nop
 8007788:	3758      	adds	r7, #88	; 0x58
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b096      	sub	sp, #88	; 0x58
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800779c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a6:	2b22      	cmp	r3, #34	; 0x22
 80077a8:	f040 8095 	bne.w	80078d6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ba:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80077bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80077c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80077c4:	4013      	ands	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d0:	1c9a      	adds	r2, r3, #2
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d178      	bne.n	80078e6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007812:	643b      	str	r3, [r7, #64]	; 0x40
 8007814:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e6      	bne.n	80077f4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	61fb      	str	r3, [r7, #28]
   return(result);
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	64bb      	str	r3, [r7, #72]	; 0x48
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800784c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e5      	bne.n	8007826 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800786c:	2b01      	cmp	r3, #1
 800786e:	d12e      	bne.n	80078ce <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60bb      	str	r3, [r7, #8]
   return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	647b      	str	r3, [r7, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007894:	61bb      	str	r3, [r7, #24]
 8007896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	613b      	str	r3, [r7, #16]
   return(result);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e6      	bne.n	8007876 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b10      	cmp	r3, #16
 80078b4:	d103      	bne.n	80078be <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2210      	movs	r2, #16
 80078bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fe fee0 	bl	800668c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078cc:	e00b      	b.n	80078e6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7f9 fc76 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 80078d4:	e007      	b.n	80078e6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699a      	ldr	r2, [r3, #24]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0208 	orr.w	r2, r2, #8
 80078e4:	619a      	str	r2, [r3, #24]
}
 80078e6:	bf00      	nop
 80078e8:	3758      	adds	r7, #88	; 0x58
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b0a6      	sub	sp, #152	; 0x98
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078fe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007926:	2b22      	cmp	r3, #34	; 0x22
 8007928:	f040 814f 	bne.w	8007bca <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007932:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007936:	e0f6      	b.n	8007b26 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007942:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007946:	b2d9      	uxtb	r1, r3
 8007948:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800794c:	b2da      	uxtb	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007952:	400a      	ands	r2, r1
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800797e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b00      	cmp	r3, #0
 8007988:	d053      	beq.n	8007a32 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800798a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d011      	beq.n	80079ba <UART_RxISR_8BIT_FIFOEN+0xca>
 8007996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800799a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00b      	beq.n	80079ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b0:	f043 0201 	orr.w	r2, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d011      	beq.n	80079ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 80079c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00b      	beq.n	80079ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2202      	movs	r2, #2
 80079d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e0:	f043 0204 	orr.w	r2, r3, #4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d011      	beq.n	8007a1a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80079f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2204      	movs	r2, #4
 8007a08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a10:	f043 0202 	orr.w	r2, r3, #2
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d006      	beq.n	8007a32 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fe fe27 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d173      	bne.n	8007b26 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a62:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007a66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e4      	bne.n	8007a3e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a98:	657a      	str	r2, [r7, #84]	; 0x54
 8007a9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e3      	bne.n	8007a74 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d12e      	bne.n	8007b20 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	f023 0310 	bic.w	r3, r3, #16
 8007adc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ae8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e6      	bne.n	8007ac8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d103      	bne.n	8007b10 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe fdb7 	bl	800668c <HAL_UARTEx_RxEventCallback>
 8007b1e:	e002      	b.n	8007b26 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7f9 fb4d 	bl	80011c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d006      	beq.n	8007b3c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f47f aefe 	bne.w	8007938 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b46:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d045      	beq.n	8007bda <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d23e      	bcs.n	8007bda <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b72:	673b      	str	r3, [r7, #112]	; 0x70
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e5      	bne.n	8007b5c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a14      	ldr	r2, [pc, #80]	; (8007be4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007b94:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f043 0320 	orr.w	r3, r3, #32
 8007baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	6979      	ldr	r1, [r7, #20]
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e6      	bne.n	8007b96 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bc8:	e007      	b.n	8007bda <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0208 	orr.w	r2, r2, #8
 8007bd8:	619a      	str	r2, [r3, #24]
}
 8007bda:	bf00      	nop
 8007bdc:	3798      	adds	r7, #152	; 0x98
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	0800762f 	.word	0x0800762f

08007be8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b0a8      	sub	sp, #160	; 0xa0
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bf6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1e:	2b22      	cmp	r3, #34	; 0x22
 8007c20:	f040 8153 	bne.w	8007eca <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c2e:	e0fa      	b.n	8007e26 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007c42:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007c46:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c58:	1c9a      	adds	r2, r3, #2
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d053      	beq.n	8007d2e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d011      	beq.n	8007cb6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cac:	f043 0201 	orr.w	r2, r3, #1
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d011      	beq.n	8007ce6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cdc:	f043 0204 	orr.w	r2, r3, #4
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d011      	beq.n	8007d16 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2204      	movs	r2, #4
 8007d04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d0c:	f043 0202 	orr.w	r2, r3, #2
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d006      	beq.n	8007d2e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe fca9 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d175      	bne.n	8007e26 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d5e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e4      	bne.n	8007d3a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d86:	f023 0301 	bic.w	r3, r3, #1
 8007d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d98:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e1      	bne.n	8007d70 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d12e      	bne.n	8007e20 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	f023 0310 	bic.w	r3, r3, #16
 8007ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007de6:	647b      	str	r3, [r7, #68]	; 0x44
 8007de8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e6      	bne.n	8007dc8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f003 0310 	and.w	r3, r3, #16
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d103      	bne.n	8007e10 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2210      	movs	r2, #16
 8007e0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7fe fc37 	bl	800668c <HAL_UARTEx_RxEventCallback>
 8007e1e:	e002      	b.n	8007e26 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7f9 f9cd 	bl	80011c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d006      	beq.n	8007e3c <UART_RxISR_16BIT_FIFOEN+0x254>
 8007e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f47f aefa 	bne.w	8007c30 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e42:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e46:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d045      	beq.n	8007eda <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e54:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d23e      	bcs.n	8007eda <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	623b      	str	r3, [r7, #32]
   return(result);
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e72:	677b      	str	r3, [r7, #116]	; 0x74
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e7c:	633a      	str	r2, [r7, #48]	; 0x30
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e5      	bne.n	8007e5c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a14      	ldr	r2, [pc, #80]	; (8007ee4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007e94:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f043 0320 	orr.w	r3, r3, #32
 8007eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eb4:	61fb      	str	r3, [r7, #28]
 8007eb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	69b9      	ldr	r1, [r7, #24]
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e6      	bne.n	8007e96 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ec8:	e007      	b.n	8007eda <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699a      	ldr	r2, [r3, #24]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0208 	orr.w	r2, r2, #8
 8007ed8:	619a      	str	r2, [r3, #24]
}
 8007eda:	bf00      	nop
 8007edc:	37a0      	adds	r7, #160	; 0xa0
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	0800778f 	.word	0x0800778f

08007ee8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <HAL_UARTEx_DisableFifoMode+0x16>
 8007f36:	2302      	movs	r3, #2
 8007f38:	e027      	b.n	8007f8a <HAL_UARTEx_DisableFifoMode+0x66>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2224      	movs	r2, #36	; 0x24
 8007f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0201 	bic.w	r2, r2, #1
 8007f60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d101      	bne.n	8007fae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e02d      	b.n	800800a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2224      	movs	r2, #36	; 0x24
 8007fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0201 	bic.w	r2, r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f850 	bl	8008090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008022:	2b01      	cmp	r3, #1
 8008024:	d101      	bne.n	800802a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008026:	2302      	movs	r3, #2
 8008028:	e02d      	b.n	8008086 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2224      	movs	r2, #36	; 0x24
 8008036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0201 	bic.w	r2, r2, #1
 8008050:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f812 	bl	8008090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2220      	movs	r2, #32
 8008078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800809c:	2b00      	cmp	r3, #0
 800809e:	d108      	bne.n	80080b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080b0:	e031      	b.n	8008116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080b2:	2308      	movs	r3, #8
 80080b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080b6:	2308      	movs	r3, #8
 80080b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	0e5b      	lsrs	r3, r3, #25
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	0f5b      	lsrs	r3, r3, #29
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	7b3a      	ldrb	r2, [r7, #12]
 80080de:	4911      	ldr	r1, [pc, #68]	; (8008124 <UARTEx_SetNbDataToProcess+0x94>)
 80080e0:	5c8a      	ldrb	r2, [r1, r2]
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080e6:	7b3a      	ldrb	r2, [r7, #12]
 80080e8:	490f      	ldr	r1, [pc, #60]	; (8008128 <UARTEx_SetNbDataToProcess+0x98>)
 80080ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	7b7a      	ldrb	r2, [r7, #13]
 80080fc:	4909      	ldr	r1, [pc, #36]	; (8008124 <UARTEx_SetNbDataToProcess+0x94>)
 80080fe:	5c8a      	ldrb	r2, [r1, r2]
 8008100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008104:	7b7a      	ldrb	r2, [r7, #13]
 8008106:	4908      	ldr	r1, [pc, #32]	; (8008128 <UARTEx_SetNbDataToProcess+0x98>)
 8008108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800810a:	fb93 f3f2 	sdiv	r3, r3, r2
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	0800bf78 	.word	0x0800bf78
 8008128:	0800bf80 	.word	0x0800bf80

0800812c <__NVIC_SetPriority>:
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	6039      	str	r1, [r7, #0]
 8008136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800813c:	2b00      	cmp	r3, #0
 800813e:	db0a      	blt.n	8008156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	b2da      	uxtb	r2, r3
 8008144:	490c      	ldr	r1, [pc, #48]	; (8008178 <__NVIC_SetPriority+0x4c>)
 8008146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800814a:	0112      	lsls	r2, r2, #4
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	440b      	add	r3, r1
 8008150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008154:	e00a      	b.n	800816c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	b2da      	uxtb	r2, r3
 800815a:	4908      	ldr	r1, [pc, #32]	; (800817c <__NVIC_SetPriority+0x50>)
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	3b04      	subs	r3, #4
 8008164:	0112      	lsls	r2, r2, #4
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	440b      	add	r3, r1
 800816a:	761a      	strb	r2, [r3, #24]
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	e000e100 	.word	0xe000e100
 800817c:	e000ed00 	.word	0xe000ed00

08008180 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <SysTick_Handler+0x1c>)
 8008186:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008188:	f001 fe44 	bl	8009e14 <xTaskGetSchedulerState>
 800818c:	4603      	mov	r3, r0
 800818e:	2b01      	cmp	r3, #1
 8008190:	d001      	beq.n	8008196 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008192:	f002 fe31 	bl	800adf8 <xPortSysTickHandler>
  }
}
 8008196:	bf00      	nop
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	e000e010 	.word	0xe000e010

080081a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081a4:	2100      	movs	r1, #0
 80081a6:	f06f 0004 	mvn.w	r0, #4
 80081aa:	f7ff ffbf 	bl	800812c <__NVIC_SetPriority>
#endif
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ba:	f3ef 8305 	mrs	r3, IPSR
 80081be:	603b      	str	r3, [r7, #0]
  return(result);
 80081c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081c6:	f06f 0305 	mvn.w	r3, #5
 80081ca:	607b      	str	r3, [r7, #4]
 80081cc:	e00c      	b.n	80081e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081ce:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <osKernelInitialize+0x44>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d105      	bne.n	80081e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <osKernelInitialize+0x44>)
 80081d8:	2201      	movs	r2, #1
 80081da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081dc:	2300      	movs	r3, #0
 80081de:	607b      	str	r3, [r7, #4]
 80081e0:	e002      	b.n	80081e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
 80081e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081e8:	687b      	ldr	r3, [r7, #4]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	200002ac 	.word	0x200002ac

080081fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008202:	f3ef 8305 	mrs	r3, IPSR
 8008206:	603b      	str	r3, [r7, #0]
  return(result);
 8008208:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <osKernelStart+0x1a>
    stat = osErrorISR;
 800820e:	f06f 0305 	mvn.w	r3, #5
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	e010      	b.n	8008238 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <osKernelStart+0x48>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d109      	bne.n	8008232 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800821e:	f7ff ffbf 	bl	80081a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <osKernelStart+0x48>)
 8008224:	2202      	movs	r2, #2
 8008226:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008228:	f001 f988 	bl	800953c <vTaskStartScheduler>
      stat = osOK;
 800822c:	2300      	movs	r3, #0
 800822e:	607b      	str	r3, [r7, #4]
 8008230:	e002      	b.n	8008238 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008232:	f04f 33ff 	mov.w	r3, #4294967295
 8008236:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008238:	687b      	ldr	r3, [r7, #4]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	200002ac 	.word	0x200002ac

08008248 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b08e      	sub	sp, #56	; 0x38
 800824c:	af04      	add	r7, sp, #16
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008254:	2300      	movs	r3, #0
 8008256:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008258:	f3ef 8305 	mrs	r3, IPSR
 800825c:	617b      	str	r3, [r7, #20]
  return(result);
 800825e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008260:	2b00      	cmp	r3, #0
 8008262:	d17e      	bne.n	8008362 <osThreadNew+0x11a>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d07b      	beq.n	8008362 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800826a:	2380      	movs	r3, #128	; 0x80
 800826c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800826e:	2318      	movs	r3, #24
 8008270:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008276:	f04f 33ff 	mov.w	r3, #4294967295
 800827a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d045      	beq.n	800830e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <osThreadNew+0x48>
        name = attr->name;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d008      	beq.n	80082b6 <osThreadNew+0x6e>
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b38      	cmp	r3, #56	; 0x38
 80082a8:	d805      	bhi.n	80082b6 <osThreadNew+0x6e>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <osThreadNew+0x72>
        return (NULL);
 80082b6:	2300      	movs	r3, #0
 80082b8:	e054      	b.n	8008364 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	089b      	lsrs	r3, r3, #2
 80082c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <osThreadNew+0xa8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	2bbb      	cmp	r3, #187	; 0xbb
 80082d8:	d90a      	bls.n	80082f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d006      	beq.n	80082f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <osThreadNew+0xa8>
        mem = 1;
 80082ea:	2301      	movs	r3, #1
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	e010      	b.n	8008312 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10c      	bne.n	8008312 <osThreadNew+0xca>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d108      	bne.n	8008312 <osThreadNew+0xca>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d104      	bne.n	8008312 <osThreadNew+0xca>
          mem = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	61bb      	str	r3, [r7, #24]
 800830c:	e001      	b.n	8008312 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d110      	bne.n	800833a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008320:	9202      	str	r2, [sp, #8]
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	6a3a      	ldr	r2, [r7, #32]
 800832c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 ff18 	bl	8009164 <xTaskCreateStatic>
 8008334:	4603      	mov	r3, r0
 8008336:	613b      	str	r3, [r7, #16]
 8008338:	e013      	b.n	8008362 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d110      	bne.n	8008362 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	b29a      	uxth	r2, r3
 8008344:	f107 0310 	add.w	r3, r7, #16
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 ff63 	bl	800921e <xTaskCreate>
 8008358:	4603      	mov	r3, r0
 800835a:	2b01      	cmp	r3, #1
 800835c:	d001      	beq.n	8008362 <osThreadNew+0x11a>
            hTask = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008362:	693b      	ldr	r3, [r7, #16]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3728      	adds	r7, #40	; 0x28
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af02      	add	r7, sp, #8
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <osThreadFlagsSet+0x1a>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	da03      	bge.n	800838e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8008386:	f06f 0303 	mvn.w	r3, #3
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	e035      	b.n	80083fa <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800838e:	f04f 33ff 	mov.w	r3, #4294967295
 8008392:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008394:	f3ef 8305 	mrs	r3, IPSR
 8008398:	613b      	str	r3, [r7, #16]
  return(result);
 800839a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01f      	beq.n	80083e0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80083a4:	f107 0308 	add.w	r3, r7, #8
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	2201      	movs	r2, #1
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6978      	ldr	r0, [r7, #20]
 80083b2:	f001 fed9 	bl	800a168 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	2200      	movs	r2, #0
 80083bc:	9200      	str	r2, [sp, #0]
 80083be:	2200      	movs	r2, #0
 80083c0:	2100      	movs	r1, #0
 80083c2:	6978      	ldr	r0, [r7, #20]
 80083c4:	f001 fed0 	bl	800a168 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d015      	beq.n	80083fa <osThreadFlagsSet+0x8e>
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <osThreadFlagsSet+0x98>)
 80083d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	e00c      	b.n	80083fa <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80083e0:	2300      	movs	r3, #0
 80083e2:	2201      	movs	r2, #1
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6978      	ldr	r0, [r7, #20]
 80083e8:	f001 fe00 	bl	8009fec <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80083ec:	f107 030c 	add.w	r3, r7, #12
 80083f0:	2200      	movs	r2, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	6978      	ldr	r0, [r7, #20]
 80083f6:	f001 fdf9 	bl	8009fec <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80083fa:	68fb      	ldr	r3, [r7, #12]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008410:	f3ef 8305 	mrs	r3, IPSR
 8008414:	60fb      	str	r3, [r7, #12]
  return(result);
 8008416:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800841c:	f06f 0305 	mvn.w	r3, #5
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	e02a      	b.n	800847a <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	da03      	bge.n	8008432 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800842a:	f06f 0303 	mvn.w	r3, #3
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	e023      	b.n	800847a <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8008432:	f001 fcdf 	bl	8009df4 <xTaskGetCurrentTaskHandle>
 8008436:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8008438:	f107 0308 	add.w	r3, r7, #8
 800843c:	2200      	movs	r2, #0
 800843e:	2100      	movs	r1, #0
 8008440:	6938      	ldr	r0, [r7, #16]
 8008442:	f001 fdd3 	bl	8009fec <xTaskGenericNotify>
 8008446:	4603      	mov	r3, r0
 8008448:	2b01      	cmp	r3, #1
 800844a:	d113      	bne.n	8008474 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	43da      	mvns	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4013      	ands	r3, r2
 8008458:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	2300      	movs	r3, #0
 800845e:	2203      	movs	r2, #3
 8008460:	6938      	ldr	r0, [r7, #16]
 8008462:	f001 fdc3 	bl	8009fec <xTaskGenericNotify>
 8008466:	4603      	mov	r3, r0
 8008468:	2b01      	cmp	r3, #1
 800846a:	d006      	beq.n	800847a <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 800846c:	f04f 33ff 	mov.w	r3, #4294967295
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e002      	b.n	800847a <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8008474:	f04f 33ff 	mov.w	r3, #4294967295
 8008478:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800847a:	697b      	ldr	r3, [r7, #20]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b08c      	sub	sp, #48	; 0x30
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008490:	f3ef 8305 	mrs	r3, IPSR
 8008494:	617b      	str	r3, [r7, #20]
  return(result);
 8008496:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800849c:	f06f 0305 	mvn.w	r3, #5
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084a2:	e06b      	b.n	800857c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da03      	bge.n	80084b2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80084aa:	f06f 0303 	mvn.w	r3, #3
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084b0:	e064      	b.n	800857c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	62bb      	str	r3, [r7, #40]	; 0x28
 80084c0:	e001      	b.n	80084c6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80084ce:	f001 f951 	bl	8009774 <xTaskGetTickCount>
 80084d2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80084d4:	f107 0210 	add.w	r2, r7, #16
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084dc:	2000      	movs	r0, #0
 80084de:	f001 fd25 	bl	8009f2c <xTaskNotifyWait>
 80084e2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d137      	bne.n	800855a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80084ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4013      	ands	r3, r2
 80084f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f6:	4313      	orrs	r3, r2
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00c      	beq.n	800851e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	4013      	ands	r3, r2
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	429a      	cmp	r2, r3
 800850e:	d032      	beq.n	8008576 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10f      	bne.n	8008536 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008516:	f06f 0302 	mvn.w	r3, #2
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800851c:	e02e      	b.n	800857c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	4013      	ands	r3, r2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d128      	bne.n	800857a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d103      	bne.n	8008536 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800852e:	f06f 0302 	mvn.w	r3, #2
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008534:	e022      	b.n	800857c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008536:	f001 f91d 	bl	8009774 <xTaskGetTickCount>
 800853a:	4602      	mov	r2, r0
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	429a      	cmp	r2, r3
 8008548:	d902      	bls.n	8008550 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
 800854e:	e00e      	b.n	800856e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
 8008558:	e009      	b.n	800856e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d103      	bne.n	8008568 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008560:	f06f 0302 	mvn.w	r3, #2
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008566:	e002      	b.n	800856e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008568:	f06f 0301 	mvn.w	r3, #1
 800856c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1af      	bne.n	80084d4 <osThreadFlagsWait+0x50>
 8008574:	e002      	b.n	800857c <osThreadFlagsWait+0xf8>
            break;
 8008576:	bf00      	nop
 8008578:	e000      	b.n	800857c <osThreadFlagsWait+0xf8>
            break;
 800857a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800857e:	4618      	mov	r0, r3
 8008580:	3730      	adds	r7, #48	; 0x30
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800858e:	f3ef 8305 	mrs	r3, IPSR
 8008592:	60bb      	str	r3, [r7, #8]
  return(result);
 8008594:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <osDelay+0x1c>
    stat = osErrorISR;
 800859a:	f06f 0305 	mvn.w	r3, #5
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	e007      	b.n	80085b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 ff91 	bl	80094d4 <vTaskDelay>
    }
  }

  return (stat);
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4a07      	ldr	r2, [pc, #28]	; (80085e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80085cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4a06      	ldr	r2, [pc, #24]	; (80085ec <vApplicationGetIdleTaskMemory+0x30>)
 80085d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2280      	movs	r2, #128	; 0x80
 80085d8:	601a      	str	r2, [r3, #0]
}
 80085da:	bf00      	nop
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	200002b0 	.word	0x200002b0
 80085ec:	2000036c 	.word	0x2000036c

080085f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a07      	ldr	r2, [pc, #28]	; (800861c <vApplicationGetTimerTaskMemory+0x2c>)
 8008600:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	4a06      	ldr	r2, [pc, #24]	; (8008620 <vApplicationGetTimerTaskMemory+0x30>)
 8008606:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800860e:	601a      	str	r2, [r3, #0]
}
 8008610:	bf00      	nop
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	2000056c 	.word	0x2000056c
 8008620:	20000628 	.word	0x20000628

08008624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f103 0208 	add.w	r2, r3, #8
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f04f 32ff 	mov.w	r2, #4294967295
 800863c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f103 0208 	add.w	r2, r3, #8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f103 0208 	add.w	r2, r3, #8
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	601a      	str	r2, [r3, #0]
}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086dc:	d103      	bne.n	80086e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	e00c      	b.n	8008700 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3308      	adds	r3, #8
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	e002      	b.n	80086f4 <vListInsert+0x2e>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d2f6      	bcs.n	80086ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	601a      	str	r2, [r3, #0]
}
 800872c:	bf00      	nop
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	6892      	ldr	r2, [r2, #8]
 800874e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6852      	ldr	r2, [r2, #4]
 8008758:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d103      	bne.n	800876c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	1e5a      	subs	r2, r3, #1
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087b6:	f002 fa8d 	bl	800acd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087c6:	fb01 f303 	mul.w	r3, r1, r3
 80087ca:	441a      	add	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e6:	3b01      	subs	r3, #1
 80087e8:	68f9      	ldr	r1, [r7, #12]
 80087ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	22ff      	movs	r2, #255	; 0xff
 80087fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	22ff      	movs	r2, #255	; 0xff
 8008802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d114      	bne.n	8008836 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01a      	beq.n	800884a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3310      	adds	r3, #16
 8008818:	4618      	mov	r0, r3
 800881a:	f001 f929 	bl	8009a70 <xTaskRemoveFromEventList>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d012      	beq.n	800884a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <xQueueGenericReset+0xcc>)
 8008826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	e009      	b.n	800884a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3310      	adds	r3, #16
 800883a:	4618      	mov	r0, r3
 800883c:	f7ff fef2 	bl	8008624 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3324      	adds	r3, #36	; 0x24
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff feed 	bl	8008624 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800884a:	f002 fa73 	bl	800ad34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800884e:	2301      	movs	r3, #1
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08e      	sub	sp, #56	; 0x38
 8008860:	af02      	add	r7, sp, #8
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <xQueueGenericCreateStatic+0x52>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <xQueueGenericCreateStatic+0x56>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <xQueueGenericCreateStatic+0x58>
 80088b2:	2300      	movs	r3, #0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10a      	bne.n	80088ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80088b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	623b      	str	r3, [r7, #32]
}
 80088ca:	bf00      	nop
 80088cc:	e7fe      	b.n	80088cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <xQueueGenericCreateStatic+0x7e>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <xQueueGenericCreateStatic+0x82>
 80088da:	2301      	movs	r3, #1
 80088dc:	e000      	b.n	80088e0 <xQueueGenericCreateStatic+0x84>
 80088de:	2300      	movs	r3, #0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	61fb      	str	r3, [r7, #28]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088fa:	2350      	movs	r3, #80	; 0x50
 80088fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b50      	cmp	r3, #80	; 0x50
 8008902:	d00a      	beq.n	800891a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	61bb      	str	r3, [r7, #24]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800891a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00d      	beq.n	8008942 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800892e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	4613      	mov	r3, r2
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f805 	bl	800894c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008944:	4618      	mov	r0, r3
 8008946:	3730      	adds	r7, #48	; 0x30
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	e002      	b.n	800896e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800897a:	2101      	movs	r1, #1
 800897c:	69b8      	ldr	r0, [r7, #24]
 800897e:	f7ff ff05 	bl	800878c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	78fa      	ldrb	r2, [r7, #3]
 8008986:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08e      	sub	sp, #56	; 0x38
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089a2:	2300      	movs	r3, #0
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10a      	bne.n	80089c6 <xQueueGenericSend+0x32>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d103      	bne.n	80089d4 <xQueueGenericSend+0x40>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <xQueueGenericSend+0x44>
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <xQueueGenericSend+0x46>
 80089d8:	2300      	movs	r3, #0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <xQueueGenericSend+0x60>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d103      	bne.n	8008a02 <xQueueGenericSend+0x6e>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <xQueueGenericSend+0x72>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e000      	b.n	8008a08 <xQueueGenericSend+0x74>
 8008a06:	2300      	movs	r3, #0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <xQueueGenericSend+0x8e>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	623b      	str	r3, [r7, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a22:	f001 f9f7 	bl	8009e14 <xTaskGetSchedulerState>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d102      	bne.n	8008a32 <xQueueGenericSend+0x9e>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <xQueueGenericSend+0xa2>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <xQueueGenericSend+0xa4>
 8008a36:	2300      	movs	r3, #0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <xQueueGenericSend+0xbe>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	61fb      	str	r3, [r7, #28]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a52:	f002 f93f 	bl	800acd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d302      	bcc.n	8008a68 <xQueueGenericSend+0xd4>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d129      	bne.n	8008abc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a6e:	f000 fa0b 	bl	8008e88 <prvCopyDataToQueue>
 8008a72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d010      	beq.n	8008a9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	3324      	adds	r3, #36	; 0x24
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fff5 	bl	8009a70 <xTaskRemoveFromEventList>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d013      	beq.n	8008ab4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a8c:	4b3f      	ldr	r3, [pc, #252]	; (8008b8c <xQueueGenericSend+0x1f8>)
 8008a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	e00a      	b.n	8008ab4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008aa4:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <xQueueGenericSend+0x1f8>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ab4:	f002 f93e 	bl	800ad34 <vPortExitCritical>
				return pdPASS;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e063      	b.n	8008b84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d103      	bne.n	8008aca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ac2:	f002 f937 	bl	800ad34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e05c      	b.n	8008b84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d106      	bne.n	8008ade <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ad0:	f107 0314 	add.w	r3, r7, #20
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f001 f82f 	bl	8009b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ade:	f002 f929 	bl	800ad34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ae2:	f000 fd9b 	bl	800961c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ae6:	f002 f8f5 	bl	800acd4 <vPortEnterCritical>
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008af0:	b25b      	sxtb	r3, r3
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d103      	bne.n	8008b00 <xQueueGenericSend+0x16c>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b06:	b25b      	sxtb	r3, r3
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d103      	bne.n	8008b16 <xQueueGenericSend+0x182>
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b16:	f002 f90d 	bl	800ad34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b1a:	1d3a      	adds	r2, r7, #4
 8008b1c:	f107 0314 	add.w	r3, r7, #20
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 f81e 	bl	8009b64 <xTaskCheckForTimeOut>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d124      	bne.n	8008b78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b30:	f000 faa2 	bl	8009078 <prvIsQueueFull>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d018      	beq.n	8008b6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	3310      	adds	r3, #16
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 ff44 	bl	80099d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b4a:	f000 fa2d 	bl	8008fa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b4e:	f000 fd73 	bl	8009638 <xTaskResumeAll>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f47f af7c 	bne.w	8008a52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <xQueueGenericSend+0x1f8>)
 8008b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	e772      	b.n	8008a52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b6e:	f000 fa1b 	bl	8008fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b72:	f000 fd61 	bl	8009638 <xTaskResumeAll>
 8008b76:	e76c      	b.n	8008a52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b7a:	f000 fa15 	bl	8008fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b7e:	f000 fd5b 	bl	8009638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3738      	adds	r7, #56	; 0x38
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b090      	sub	sp, #64	; 0x40
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <xQueueGenericSendFromISR+0x3c>
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <xQueueGenericSendFromISR+0x40>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <xQueueGenericSendFromISR+0x42>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d103      	bne.n	8008bfa <xQueueGenericSendFromISR+0x6a>
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <xQueueGenericSendFromISR+0x6e>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <xQueueGenericSendFromISR+0x70>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10a      	bne.n	8008c1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	623b      	str	r3, [r7, #32]
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c1a:	f002 f93d 	bl	800ae98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	61fa      	str	r2, [r7, #28]
 8008c34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d302      	bcc.n	8008c4c <xQueueGenericSendFromISR+0xbc>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d12f      	bne.n	8008cac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c62:	f000 f911 	bl	8008e88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6e:	d112      	bne.n	8008c96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d016      	beq.n	8008ca6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	3324      	adds	r3, #36	; 0x24
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fef7 	bl	8009a70 <xTaskRemoveFromEventList>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00e      	beq.n	8008ca6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e007      	b.n	8008ca6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	b25a      	sxtb	r2, r3
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008caa:	e001      	b.n	8008cb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3740      	adds	r7, #64	; 0x40
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08c      	sub	sp, #48	; 0x30
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <xQueueReceive+0x30>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	623b      	str	r3, [r7, #32]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d103      	bne.n	8008d06 <xQueueReceive+0x3e>
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <xQueueReceive+0x42>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xQueueReceive+0x44>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xQueueReceive+0x5e>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	61fb      	str	r3, [r7, #28]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d26:	f001 f875 	bl	8009e14 <xTaskGetSchedulerState>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <xQueueReceive+0x6e>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <xQueueReceive+0x72>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <xQueueReceive+0x74>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <xQueueReceive+0x8e>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	61bb      	str	r3, [r7, #24]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d56:	f001 ffbd 	bl	800acd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01f      	beq.n	8008da6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d6a:	f000 f8f7 	bl	8008f5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	1e5a      	subs	r2, r3, #1
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00f      	beq.n	8008d9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	3310      	adds	r3, #16
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fe74 	bl	8009a70 <xTaskRemoveFromEventList>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d007      	beq.n	8008d9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d8e:	4b3d      	ldr	r3, [pc, #244]	; (8008e84 <xQueueReceive+0x1bc>)
 8008d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d9e:	f001 ffc9 	bl	800ad34 <vPortExitCritical>
				return pdPASS;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e069      	b.n	8008e7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dac:	f001 ffc2 	bl	800ad34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e062      	b.n	8008e7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dba:	f107 0310 	add.w	r3, r7, #16
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 feba 	bl	8009b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dc8:	f001 ffb4 	bl	800ad34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dcc:	f000 fc26 	bl	800961c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dd0:	f001 ff80 	bl	800acd4 <vPortEnterCritical>
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dda:	b25b      	sxtb	r3, r3
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d103      	bne.n	8008dea <xQueueReceive+0x122>
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d103      	bne.n	8008e00 <xQueueReceive+0x138>
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e00:	f001 ff98 	bl	800ad34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e04:	1d3a      	adds	r2, r7, #4
 8008e06:	f107 0310 	add.w	r3, r7, #16
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 fea9 	bl	8009b64 <xTaskCheckForTimeOut>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d123      	bne.n	8008e60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e1a:	f000 f917 	bl	800904c <prvIsQueueEmpty>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d017      	beq.n	8008e54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	3324      	adds	r3, #36	; 0x24
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fdcf 	bl	80099d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e34:	f000 f8b8 	bl	8008fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e38:	f000 fbfe 	bl	8009638 <xTaskResumeAll>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d189      	bne.n	8008d56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e42:	4b10      	ldr	r3, [pc, #64]	; (8008e84 <xQueueReceive+0x1bc>)
 8008e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	e780      	b.n	8008d56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e56:	f000 f8a7 	bl	8008fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e5a:	f000 fbed 	bl	8009638 <xTaskResumeAll>
 8008e5e:	e77a      	b.n	8008d56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e62:	f000 f8a1 	bl	8008fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e66:	f000 fbe7 	bl	8009638 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e6c:	f000 f8ee 	bl	800904c <prvIsQueueEmpty>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f43f af6f 	beq.w	8008d56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3730      	adds	r7, #48	; 0x30
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	e000ed04 	.word	0xe000ed04

08008e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10d      	bne.n	8008ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d14d      	bne.n	8008f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 ffcc 	bl	8009e50 <xTaskPriorityDisinherit>
 8008eb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	609a      	str	r2, [r3, #8]
 8008ec0:	e043      	b.n	8008f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d119      	bne.n	8008efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6858      	ldr	r0, [r3, #4]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	f002 fb3a 	bl	800b54c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	441a      	add	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d32b      	bcc.n	8008f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	e026      	b.n	8008f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68d8      	ldr	r0, [r3, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f04:	461a      	mov	r2, r3
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	f002 fb20 	bl	800b54c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f14:	425b      	negs	r3, r3
 8008f16:	441a      	add	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d207      	bcs.n	8008f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f30:	425b      	negs	r3, r3
 8008f32:	441a      	add	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d105      	bne.n	8008f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f52:	697b      	ldr	r3, [r7, #20]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d018      	beq.n	8008fa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	441a      	add	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d303      	bcc.n	8008f90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68d9      	ldr	r1, [r3, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6838      	ldr	r0, [r7, #0]
 8008f9c:	f002 fad6 	bl	800b54c <memcpy>
	}
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fb0:	f001 fe90 	bl	800acd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fbc:	e011      	b.n	8008fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d012      	beq.n	8008fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3324      	adds	r3, #36	; 0x24
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fd50 	bl	8009a70 <xTaskRemoveFromEventList>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fd6:	f000 fe27 	bl	8009c28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dce9      	bgt.n	8008fbe <prvUnlockQueue+0x16>
 8008fea:	e000      	b.n	8008fee <prvUnlockQueue+0x46>
					break;
 8008fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	22ff      	movs	r2, #255	; 0xff
 8008ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ff6:	f001 fe9d 	bl	800ad34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ffa:	f001 fe6b 	bl	800acd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009006:	e011      	b.n	800902c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d012      	beq.n	8009036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3310      	adds	r3, #16
 8009014:	4618      	mov	r0, r3
 8009016:	f000 fd2b 	bl	8009a70 <xTaskRemoveFromEventList>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009020:	f000 fe02 	bl	8009c28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	3b01      	subs	r3, #1
 8009028:	b2db      	uxtb	r3, r3
 800902a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800902c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009030:	2b00      	cmp	r3, #0
 8009032:	dce9      	bgt.n	8009008 <prvUnlockQueue+0x60>
 8009034:	e000      	b.n	8009038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	22ff      	movs	r2, #255	; 0xff
 800903c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009040:	f001 fe78 	bl	800ad34 <vPortExitCritical>
}
 8009044:	bf00      	nop
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009054:	f001 fe3e 	bl	800acd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e001      	b.n	800906a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800906a:	f001 fe63 	bl	800ad34 <vPortExitCritical>

	return xReturn;
 800906e:	68fb      	ldr	r3, [r7, #12]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009080:	f001 fe28 	bl	800acd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908c:	429a      	cmp	r2, r3
 800908e:	d102      	bne.n	8009096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009090:	2301      	movs	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e001      	b.n	800909a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800909a:	f001 fe4b 	bl	800ad34 <vPortExitCritical>

	return xReturn;
 800909e:	68fb      	ldr	r3, [r7, #12]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	e014      	b.n	80090e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090b8:	4a0f      	ldr	r2, [pc, #60]	; (80090f8 <vQueueAddToRegistry+0x50>)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10b      	bne.n	80090dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090c4:	490c      	ldr	r1, [pc, #48]	; (80090f8 <vQueueAddToRegistry+0x50>)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090ce:	4a0a      	ldr	r2, [pc, #40]	; (80090f8 <vQueueAddToRegistry+0x50>)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	4413      	add	r3, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090da:	e006      	b.n	80090ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b07      	cmp	r3, #7
 80090e6:	d9e7      	bls.n	80090b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20001cd4 	.word	0x20001cd4

080090fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800910c:	f001 fde2 	bl	800acd4 <vPortEnterCritical>
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009116:	b25b      	sxtb	r3, r3
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d103      	bne.n	8009126 <vQueueWaitForMessageRestricted+0x2a>
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800912c:	b25b      	sxtb	r3, r3
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009132:	d103      	bne.n	800913c <vQueueWaitForMessageRestricted+0x40>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800913c:	f001 fdfa 	bl	800ad34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	3324      	adds	r3, #36	; 0x24
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fc61 	bl	8009a18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009156:	6978      	ldr	r0, [r7, #20]
 8009158:	f7ff ff26 	bl	8008fa8 <prvUnlockQueue>
	}
 800915c:	bf00      	nop
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08e      	sub	sp, #56	; 0x38
 8009168:	af04      	add	r7, sp, #16
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	623b      	str	r3, [r7, #32]
}
 800918a:	bf00      	nop
 800918c:	e7fe      	b.n	800918c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10a      	bne.n	80091aa <xTaskCreateStatic+0x46>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	61fb      	str	r3, [r7, #28]
}
 80091a6:	bf00      	nop
 80091a8:	e7fe      	b.n	80091a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091aa:	23bc      	movs	r3, #188	; 0xbc
 80091ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2bbc      	cmp	r3, #188	; 0xbc
 80091b2:	d00a      	beq.n	80091ca <xTaskCreateStatic+0x66>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	61bb      	str	r3, [r7, #24]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d01e      	beq.n	8009210 <xTaskCreateStatic+0xac>
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01b      	beq.n	8009210 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	2202      	movs	r2, #2
 80091e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091ea:	2300      	movs	r3, #0
 80091ec:	9303      	str	r3, [sp, #12]
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	9302      	str	r3, [sp, #8]
 80091f2:	f107 0314 	add.w	r3, r7, #20
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f850 	bl	80092a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800920a:	f000 f8f3 	bl	80093f4 <prvAddNewTaskToReadyList>
 800920e:	e001      	b.n	8009214 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009214:	697b      	ldr	r3, [r7, #20]
	}
 8009216:	4618      	mov	r0, r3
 8009218:	3728      	adds	r7, #40	; 0x28
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800921e:	b580      	push	{r7, lr}
 8009220:	b08c      	sub	sp, #48	; 0x30
 8009222:	af04      	add	r7, sp, #16
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	4613      	mov	r3, r2
 800922c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800922e:	88fb      	ldrh	r3, [r7, #6]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4618      	mov	r0, r3
 8009234:	f001 fe70 	bl	800af18 <pvPortMalloc>
 8009238:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00e      	beq.n	800925e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009240:	20bc      	movs	r0, #188	; 0xbc
 8009242:	f001 fe69 	bl	800af18 <pvPortMalloc>
 8009246:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	631a      	str	r2, [r3, #48]	; 0x30
 8009254:	e005      	b.n	8009262 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009256:	6978      	ldr	r0, [r7, #20]
 8009258:	f001 ff2a 	bl	800b0b0 <vPortFree>
 800925c:	e001      	b.n	8009262 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d017      	beq.n	8009298 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009270:	88fa      	ldrh	r2, [r7, #6]
 8009272:	2300      	movs	r3, #0
 8009274:	9303      	str	r3, [sp, #12]
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	9302      	str	r3, [sp, #8]
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	68b9      	ldr	r1, [r7, #8]
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 f80e 	bl	80092a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800928c:	69f8      	ldr	r0, [r7, #28]
 800928e:	f000 f8b1 	bl	80093f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009292:	2301      	movs	r3, #1
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	e002      	b.n	800929e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800929e:	69bb      	ldr	r3, [r7, #24]
	}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3720      	adds	r7, #32
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	461a      	mov	r2, r3
 80092c0:	21a5      	movs	r1, #165	; 0xa5
 80092c2:	f002 f951 	bl	800b568 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092d0:	3b01      	subs	r3, #1
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	f023 0307 	bic.w	r3, r3, #7
 80092de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	f003 0307 	and.w	r3, r3, #7
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <prvInitialiseNewTask+0x58>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	617b      	str	r3, [r7, #20]
}
 80092fc:	bf00      	nop
 80092fe:	e7fe      	b.n	80092fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d01f      	beq.n	8009346 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009306:	2300      	movs	r3, #0
 8009308:	61fb      	str	r3, [r7, #28]
 800930a:	e012      	b.n	8009332 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	7819      	ldrb	r1, [r3, #0]
 8009314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4413      	add	r3, r2
 800931a:	3334      	adds	r3, #52	; 0x34
 800931c:	460a      	mov	r2, r1
 800931e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4413      	add	r3, r2
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d006      	beq.n	800933a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	3301      	adds	r3, #1
 8009330:	61fb      	str	r3, [r7, #28]
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	2b0f      	cmp	r3, #15
 8009336:	d9e9      	bls.n	800930c <prvInitialiseNewTask+0x64>
 8009338:	e000      	b.n	800933c <prvInitialiseNewTask+0x94>
			{
				break;
 800933a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009344:	e003      	b.n	800934e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	2b37      	cmp	r3, #55	; 0x37
 8009352:	d901      	bls.n	8009358 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009354:	2337      	movs	r3, #55	; 0x37
 8009356:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800935c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009362:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	2200      	movs	r2, #0
 8009368:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	3304      	adds	r3, #4
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff f978 	bl	8008664 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	3318      	adds	r3, #24
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff f973 	bl	8008664 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009382:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009392:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	3354      	adds	r3, #84	; 0x54
 80093a8:	2260      	movs	r2, #96	; 0x60
 80093aa:	2100      	movs	r1, #0
 80093ac:	4618      	mov	r0, r3
 80093ae:	f002 f8db 	bl	800b568 <memset>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	4a0c      	ldr	r2, [pc, #48]	; (80093e8 <prvInitialiseNewTask+0x140>)
 80093b6:	659a      	str	r2, [r3, #88]	; 0x58
 80093b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ba:	4a0c      	ldr	r2, [pc, #48]	; (80093ec <prvInitialiseNewTask+0x144>)
 80093bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	4a0b      	ldr	r2, [pc, #44]	; (80093f0 <prvInitialiseNewTask+0x148>)
 80093c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	68f9      	ldr	r1, [r7, #12]
 80093c8:	69b8      	ldr	r0, [r7, #24]
 80093ca:	f001 fb53 	bl	800aa74 <pxPortInitialiseStack>
 80093ce:	4602      	mov	r2, r0
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093e0:	bf00      	nop
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	0800bfa8 	.word	0x0800bfa8
 80093ec:	0800bfc8 	.word	0x0800bfc8
 80093f0:	0800bf88 	.word	0x0800bf88

080093f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093fc:	f001 fc6a 	bl	800acd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009400:	4b2d      	ldr	r3, [pc, #180]	; (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	4a2c      	ldr	r2, [pc, #176]	; (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 8009408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800940a:	4b2c      	ldr	r3, [pc, #176]	; (80094bc <prvAddNewTaskToReadyList+0xc8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009412:	4a2a      	ldr	r2, [pc, #168]	; (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009418:	4b27      	ldr	r3, [pc, #156]	; (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d110      	bne.n	8009442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009420:	f000 fc26 	bl	8009c70 <prvInitialiseTaskLists>
 8009424:	e00d      	b.n	8009442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009426:	4b26      	ldr	r3, [pc, #152]	; (80094c0 <prvAddNewTaskToReadyList+0xcc>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800942e:	4b23      	ldr	r3, [pc, #140]	; (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	429a      	cmp	r2, r3
 800943a:	d802      	bhi.n	8009442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800943c:	4a1f      	ldr	r2, [pc, #124]	; (80094bc <prvAddNewTaskToReadyList+0xc8>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009442:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3301      	adds	r3, #1
 8009448:	4a1e      	ldr	r2, [pc, #120]	; (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 800944a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800944c:	4b1d      	ldr	r3, [pc, #116]	; (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009458:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <prvAddNewTaskToReadyList+0xd4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d903      	bls.n	8009468 <prvAddNewTaskToReadyList+0x74>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	4a18      	ldr	r2, [pc, #96]	; (80094c8 <prvAddNewTaskToReadyList+0xd4>)
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4a15      	ldr	r2, [pc, #84]	; (80094cc <prvAddNewTaskToReadyList+0xd8>)
 8009476:	441a      	add	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7ff f8fd 	bl	800867e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009484:	f001 fc56 	bl	800ad34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <prvAddNewTaskToReadyList+0xcc>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00e      	beq.n	80094ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009490:	4b0a      	ldr	r3, [pc, #40]	; (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949a:	429a      	cmp	r2, r3
 800949c:	d207      	bcs.n	80094ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800949e:	4b0c      	ldr	r3, [pc, #48]	; (80094d0 <prvAddNewTaskToReadyList+0xdc>)
 80094a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000efc 	.word	0x20000efc
 80094bc:	20000a28 	.word	0x20000a28
 80094c0:	20000f08 	.word	0x20000f08
 80094c4:	20000f18 	.word	0x20000f18
 80094c8:	20000f04 	.word	0x20000f04
 80094cc:	20000a2c 	.word	0x20000a2c
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d017      	beq.n	8009516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094e6:	4b13      	ldr	r3, [pc, #76]	; (8009534 <vTaskDelay+0x60>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00a      	beq.n	8009504 <vTaskDelay+0x30>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	60bb      	str	r3, [r7, #8]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009504:	f000 f88a 	bl	800961c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009508:	2100      	movs	r1, #0
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 ff10 	bl	800a330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009510:	f000 f892 	bl	8009638 <xTaskResumeAll>
 8009514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d107      	bne.n	800952c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800951c:	4b06      	ldr	r3, [pc, #24]	; (8009538 <vTaskDelay+0x64>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20000f24 	.word	0x20000f24
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	; 0x28
 8009540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800954a:	463a      	mov	r2, r7
 800954c:	1d39      	adds	r1, r7, #4
 800954e:	f107 0308 	add.w	r3, r7, #8
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff f832 	bl	80085bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	9202      	str	r2, [sp, #8]
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	2300      	movs	r3, #0
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	2300      	movs	r3, #0
 8009568:	460a      	mov	r2, r1
 800956a:	4924      	ldr	r1, [pc, #144]	; (80095fc <vTaskStartScheduler+0xc0>)
 800956c:	4824      	ldr	r0, [pc, #144]	; (8009600 <vTaskStartScheduler+0xc4>)
 800956e:	f7ff fdf9 	bl	8009164 <xTaskCreateStatic>
 8009572:	4603      	mov	r3, r0
 8009574:	4a23      	ldr	r2, [pc, #140]	; (8009604 <vTaskStartScheduler+0xc8>)
 8009576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009578:	4b22      	ldr	r3, [pc, #136]	; (8009604 <vTaskStartScheduler+0xc8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009580:	2301      	movs	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e001      	b.n	800958a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009586:	2300      	movs	r3, #0
 8009588:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d102      	bne.n	8009596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009590:	f000 ff22 	bl	800a3d8 <xTimerCreateTimerTask>
 8009594:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d11b      	bne.n	80095d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	613b      	str	r3, [r7, #16]
}
 80095ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095b0:	4b15      	ldr	r3, [pc, #84]	; (8009608 <vTaskStartScheduler+0xcc>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3354      	adds	r3, #84	; 0x54
 80095b6:	4a15      	ldr	r2, [pc, #84]	; (800960c <vTaskStartScheduler+0xd0>)
 80095b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095ba:	4b15      	ldr	r3, [pc, #84]	; (8009610 <vTaskStartScheduler+0xd4>)
 80095bc:	f04f 32ff 	mov.w	r2, #4294967295
 80095c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095c2:	4b14      	ldr	r3, [pc, #80]	; (8009614 <vTaskStartScheduler+0xd8>)
 80095c4:	2201      	movs	r2, #1
 80095c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095c8:	4b13      	ldr	r3, [pc, #76]	; (8009618 <vTaskStartScheduler+0xdc>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095ce:	f001 fadf 	bl	800ab90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095d2:	e00e      	b.n	80095f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095da:	d10a      	bne.n	80095f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	60fb      	str	r3, [r7, #12]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <vTaskStartScheduler+0xb4>
}
 80095f2:	bf00      	nop
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	0800bed8 	.word	0x0800bed8
 8009600:	08009c41 	.word	0x08009c41
 8009604:	20000f20 	.word	0x20000f20
 8009608:	20000a28 	.word	0x20000a28
 800960c:	20000010 	.word	0x20000010
 8009610:	20000f1c 	.word	0x20000f1c
 8009614:	20000f08 	.word	0x20000f08
 8009618:	20000f00 	.word	0x20000f00

0800961c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009620:	4b04      	ldr	r3, [pc, #16]	; (8009634 <vTaskSuspendAll+0x18>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3301      	adds	r3, #1
 8009626:	4a03      	ldr	r2, [pc, #12]	; (8009634 <vTaskSuspendAll+0x18>)
 8009628:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800962a:	bf00      	nop
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	20000f24 	.word	0x20000f24

08009638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009646:	4b42      	ldr	r3, [pc, #264]	; (8009750 <xTaskResumeAll+0x118>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <xTaskResumeAll+0x2c>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	603b      	str	r3, [r7, #0]
}
 8009660:	bf00      	nop
 8009662:	e7fe      	b.n	8009662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009664:	f001 fb36 	bl	800acd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009668:	4b39      	ldr	r3, [pc, #228]	; (8009750 <xTaskResumeAll+0x118>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3b01      	subs	r3, #1
 800966e:	4a38      	ldr	r2, [pc, #224]	; (8009750 <xTaskResumeAll+0x118>)
 8009670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009672:	4b37      	ldr	r3, [pc, #220]	; (8009750 <xTaskResumeAll+0x118>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d162      	bne.n	8009740 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800967a:	4b36      	ldr	r3, [pc, #216]	; (8009754 <xTaskResumeAll+0x11c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d05e      	beq.n	8009740 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009682:	e02f      	b.n	80096e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009684:	4b34      	ldr	r3, [pc, #208]	; (8009758 <xTaskResumeAll+0x120>)
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3318      	adds	r3, #24
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff f851 	bl	8008738 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3304      	adds	r3, #4
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff f84c 	bl	8008738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a4:	4b2d      	ldr	r3, [pc, #180]	; (800975c <xTaskResumeAll+0x124>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d903      	bls.n	80096b4 <xTaskResumeAll+0x7c>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	4a2a      	ldr	r2, [pc, #168]	; (800975c <xTaskResumeAll+0x124>)
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4a27      	ldr	r2, [pc, #156]	; (8009760 <xTaskResumeAll+0x128>)
 80096c2:	441a      	add	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4619      	mov	r1, r3
 80096ca:	4610      	mov	r0, r2
 80096cc:	f7fe ffd7 	bl	800867e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d4:	4b23      	ldr	r3, [pc, #140]	; (8009764 <xTaskResumeAll+0x12c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	429a      	cmp	r2, r3
 80096dc:	d302      	bcc.n	80096e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096de:	4b22      	ldr	r3, [pc, #136]	; (8009768 <xTaskResumeAll+0x130>)
 80096e0:	2201      	movs	r2, #1
 80096e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096e4:	4b1c      	ldr	r3, [pc, #112]	; (8009758 <xTaskResumeAll+0x120>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1cb      	bne.n	8009684 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096f2:	f000 fb5f 	bl	8009db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096f6:	4b1d      	ldr	r3, [pc, #116]	; (800976c <xTaskResumeAll+0x134>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d010      	beq.n	8009724 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009702:	f000 f847 	bl	8009794 <xTaskIncrementTick>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <xTaskResumeAll+0x130>)
 800970e:	2201      	movs	r2, #1
 8009710:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3b01      	subs	r3, #1
 8009716:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1f1      	bne.n	8009702 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <xTaskResumeAll+0x134>)
 8009720:	2200      	movs	r2, #0
 8009722:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009724:	4b10      	ldr	r3, [pc, #64]	; (8009768 <xTaskResumeAll+0x130>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d009      	beq.n	8009740 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800972c:	2301      	movs	r3, #1
 800972e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009730:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <xTaskResumeAll+0x138>)
 8009732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009740:	f001 faf8 	bl	800ad34 <vPortExitCritical>

	return xAlreadyYielded;
 8009744:	68bb      	ldr	r3, [r7, #8]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20000f24 	.word	0x20000f24
 8009754:	20000efc 	.word	0x20000efc
 8009758:	20000ebc 	.word	0x20000ebc
 800975c:	20000f04 	.word	0x20000f04
 8009760:	20000a2c 	.word	0x20000a2c
 8009764:	20000a28 	.word	0x20000a28
 8009768:	20000f10 	.word	0x20000f10
 800976c:	20000f0c 	.word	0x20000f0c
 8009770:	e000ed04 	.word	0xe000ed04

08009774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800977a:	4b05      	ldr	r3, [pc, #20]	; (8009790 <xTaskGetTickCount+0x1c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009780:	687b      	ldr	r3, [r7, #4]
}
 8009782:	4618      	mov	r0, r3
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20000f00 	.word	0x20000f00

08009794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800979a:	2300      	movs	r3, #0
 800979c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800979e:	4b4f      	ldr	r3, [pc, #316]	; (80098dc <xTaskIncrementTick+0x148>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f040 808f 	bne.w	80098c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097a8:	4b4d      	ldr	r3, [pc, #308]	; (80098e0 <xTaskIncrementTick+0x14c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3301      	adds	r3, #1
 80097ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097b0:	4a4b      	ldr	r2, [pc, #300]	; (80098e0 <xTaskIncrementTick+0x14c>)
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d120      	bne.n	80097fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097bc:	4b49      	ldr	r3, [pc, #292]	; (80098e4 <xTaskIncrementTick+0x150>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00a      	beq.n	80097dc <xTaskIncrementTick+0x48>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	603b      	str	r3, [r7, #0]
}
 80097d8:	bf00      	nop
 80097da:	e7fe      	b.n	80097da <xTaskIncrementTick+0x46>
 80097dc:	4b41      	ldr	r3, [pc, #260]	; (80098e4 <xTaskIncrementTick+0x150>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	4b41      	ldr	r3, [pc, #260]	; (80098e8 <xTaskIncrementTick+0x154>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a3f      	ldr	r2, [pc, #252]	; (80098e4 <xTaskIncrementTick+0x150>)
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	4a3f      	ldr	r2, [pc, #252]	; (80098e8 <xTaskIncrementTick+0x154>)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	4b3e      	ldr	r3, [pc, #248]	; (80098ec <xTaskIncrementTick+0x158>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3301      	adds	r3, #1
 80097f6:	4a3d      	ldr	r2, [pc, #244]	; (80098ec <xTaskIncrementTick+0x158>)
 80097f8:	6013      	str	r3, [r2, #0]
 80097fa:	f000 fadb 	bl	8009db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097fe:	4b3c      	ldr	r3, [pc, #240]	; (80098f0 <xTaskIncrementTick+0x15c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	429a      	cmp	r2, r3
 8009806:	d349      	bcc.n	800989c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009808:	4b36      	ldr	r3, [pc, #216]	; (80098e4 <xTaskIncrementTick+0x150>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d104      	bne.n	800981c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009812:	4b37      	ldr	r3, [pc, #220]	; (80098f0 <xTaskIncrementTick+0x15c>)
 8009814:	f04f 32ff 	mov.w	r2, #4294967295
 8009818:	601a      	str	r2, [r3, #0]
					break;
 800981a:	e03f      	b.n	800989c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800981c:	4b31      	ldr	r3, [pc, #196]	; (80098e4 <xTaskIncrementTick+0x150>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d203      	bcs.n	800983c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009834:	4a2e      	ldr	r2, [pc, #184]	; (80098f0 <xTaskIncrementTick+0x15c>)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800983a:	e02f      	b.n	800989c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	3304      	adds	r3, #4
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe ff79 	bl	8008738 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984a:	2b00      	cmp	r3, #0
 800984c:	d004      	beq.n	8009858 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	3318      	adds	r3, #24
 8009852:	4618      	mov	r0, r3
 8009854:	f7fe ff70 	bl	8008738 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985c:	4b25      	ldr	r3, [pc, #148]	; (80098f4 <xTaskIncrementTick+0x160>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	429a      	cmp	r2, r3
 8009862:	d903      	bls.n	800986c <xTaskIncrementTick+0xd8>
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	4a22      	ldr	r2, [pc, #136]	; (80098f4 <xTaskIncrementTick+0x160>)
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4a1f      	ldr	r2, [pc, #124]	; (80098f8 <xTaskIncrementTick+0x164>)
 800987a:	441a      	add	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	3304      	adds	r3, #4
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f7fe fefb 	bl	800867e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988c:	4b1b      	ldr	r3, [pc, #108]	; (80098fc <xTaskIncrementTick+0x168>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	429a      	cmp	r2, r3
 8009894:	d3b8      	bcc.n	8009808 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009896:	2301      	movs	r3, #1
 8009898:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800989a:	e7b5      	b.n	8009808 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800989c:	4b17      	ldr	r3, [pc, #92]	; (80098fc <xTaskIncrementTick+0x168>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	4915      	ldr	r1, [pc, #84]	; (80098f8 <xTaskIncrementTick+0x164>)
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d901      	bls.n	80098b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098b8:	4b11      	ldr	r3, [pc, #68]	; (8009900 <xTaskIncrementTick+0x16c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d007      	beq.n	80098d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	e004      	b.n	80098d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098c6:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <xTaskIncrementTick+0x170>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	4a0d      	ldr	r2, [pc, #52]	; (8009904 <xTaskIncrementTick+0x170>)
 80098ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098d0:	697b      	ldr	r3, [r7, #20]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000f24 	.word	0x20000f24
 80098e0:	20000f00 	.word	0x20000f00
 80098e4:	20000eb4 	.word	0x20000eb4
 80098e8:	20000eb8 	.word	0x20000eb8
 80098ec:	20000f14 	.word	0x20000f14
 80098f0:	20000f1c 	.word	0x20000f1c
 80098f4:	20000f04 	.word	0x20000f04
 80098f8:	20000a2c 	.word	0x20000a2c
 80098fc:	20000a28 	.word	0x20000a28
 8009900:	20000f10 	.word	0x20000f10
 8009904:	20000f0c 	.word	0x20000f0c

08009908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800990e:	4b2a      	ldr	r3, [pc, #168]	; (80099b8 <vTaskSwitchContext+0xb0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009916:	4b29      	ldr	r3, [pc, #164]	; (80099bc <vTaskSwitchContext+0xb4>)
 8009918:	2201      	movs	r2, #1
 800991a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800991c:	e046      	b.n	80099ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800991e:	4b27      	ldr	r3, [pc, #156]	; (80099bc <vTaskSwitchContext+0xb4>)
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009924:	4b26      	ldr	r3, [pc, #152]	; (80099c0 <vTaskSwitchContext+0xb8>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]
 800992a:	e010      	b.n	800994e <vTaskSwitchContext+0x46>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10a      	bne.n	8009948 <vTaskSwitchContext+0x40>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	607b      	str	r3, [r7, #4]
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <vTaskSwitchContext+0x3e>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	3b01      	subs	r3, #1
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	491d      	ldr	r1, [pc, #116]	; (80099c4 <vTaskSwitchContext+0xbc>)
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	440b      	add	r3, r1
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0e4      	beq.n	800992c <vTaskSwitchContext+0x24>
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4613      	mov	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4a15      	ldr	r2, [pc, #84]	; (80099c4 <vTaskSwitchContext+0xbc>)
 800996e:	4413      	add	r3, r2
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	605a      	str	r2, [r3, #4]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	3308      	adds	r3, #8
 8009984:	429a      	cmp	r2, r3
 8009986:	d104      	bne.n	8009992 <vTaskSwitchContext+0x8a>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	605a      	str	r2, [r3, #4]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	4a0b      	ldr	r2, [pc, #44]	; (80099c8 <vTaskSwitchContext+0xc0>)
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	4a08      	ldr	r2, [pc, #32]	; (80099c0 <vTaskSwitchContext+0xb8>)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099a2:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <vTaskSwitchContext+0xc0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3354      	adds	r3, #84	; 0x54
 80099a8:	4a08      	ldr	r2, [pc, #32]	; (80099cc <vTaskSwitchContext+0xc4>)
 80099aa:	6013      	str	r3, [r2, #0]
}
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20000f24 	.word	0x20000f24
 80099bc:	20000f10 	.word	0x20000f10
 80099c0:	20000f04 	.word	0x20000f04
 80099c4:	20000a2c 	.word	0x20000a2c
 80099c8:	20000a28 	.word	0x20000a28
 80099cc:	20000010 	.word	0x20000010

080099d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <vTaskPlaceOnEventList+0x44>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3318      	adds	r3, #24
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fe fe61 	bl	80086c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a04:	2101      	movs	r1, #1
 8009a06:	6838      	ldr	r0, [r7, #0]
 8009a08:	f000 fc92 	bl	800a330 <prvAddCurrentTaskToDelayedList>
}
 8009a0c:	bf00      	nop
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	20000a28 	.word	0x20000a28

08009a18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10a      	bne.n	8009a40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	617b      	str	r3, [r7, #20]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <vTaskPlaceOnEventListRestricted+0x54>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3318      	adds	r3, #24
 8009a46:	4619      	mov	r1, r3
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f7fe fe18 	bl	800867e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009a54:	f04f 33ff 	mov.w	r3, #4294967295
 8009a58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	68b8      	ldr	r0, [r7, #8]
 8009a5e:	f000 fc67 	bl	800a330 <prvAddCurrentTaskToDelayedList>
	}
 8009a62:	bf00      	nop
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20000a28 	.word	0x20000a28

08009a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10a      	bne.n	8009a9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60fb      	str	r3, [r7, #12]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	3318      	adds	r3, #24
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fe49 	bl	8008738 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa6:	4b1e      	ldr	r3, [pc, #120]	; (8009b20 <xTaskRemoveFromEventList+0xb0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d11d      	bne.n	8009aea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fe40 	bl	8008738 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abc:	4b19      	ldr	r3, [pc, #100]	; (8009b24 <xTaskRemoveFromEventList+0xb4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d903      	bls.n	8009acc <xTaskRemoveFromEventList+0x5c>
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	4a16      	ldr	r2, [pc, #88]	; (8009b24 <xTaskRemoveFromEventList+0xb4>)
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4a13      	ldr	r2, [pc, #76]	; (8009b28 <xTaskRemoveFromEventList+0xb8>)
 8009ada:	441a      	add	r2, r3
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f7fe fdcb 	bl	800867e <vListInsertEnd>
 8009ae8:	e005      	b.n	8009af6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	3318      	adds	r3, #24
 8009aee:	4619      	mov	r1, r3
 8009af0:	480e      	ldr	r0, [pc, #56]	; (8009b2c <xTaskRemoveFromEventList+0xbc>)
 8009af2:	f7fe fdc4 	bl	800867e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afa:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <xTaskRemoveFromEventList+0xc0>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d905      	bls.n	8009b10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <xTaskRemoveFromEventList+0xc4>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e001      	b.n	8009b14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b14:	697b      	ldr	r3, [r7, #20]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20000f24 	.word	0x20000f24
 8009b24:	20000f04 	.word	0x20000f04
 8009b28:	20000a2c 	.word	0x20000a2c
 8009b2c:	20000ebc 	.word	0x20000ebc
 8009b30:	20000a28 	.word	0x20000a28
 8009b34:	20000f10 	.word	0x20000f10

08009b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b40:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <vTaskInternalSetTimeOutState+0x24>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <vTaskInternalSetTimeOutState+0x28>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	605a      	str	r2, [r3, #4]
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	20000f14 	.word	0x20000f14
 8009b60:	20000f00 	.word	0x20000f00

08009b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b088      	sub	sp, #32
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	613b      	str	r3, [r7, #16]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	60fb      	str	r3, [r7, #12]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ba6:	f001 f895 	bl	800acd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009baa:	4b1d      	ldr	r3, [pc, #116]	; (8009c20 <xTaskCheckForTimeOut+0xbc>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d102      	bne.n	8009bca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	e023      	b.n	8009c12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b15      	ldr	r3, [pc, #84]	; (8009c24 <xTaskCheckForTimeOut+0xc0>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d007      	beq.n	8009be6 <xTaskCheckForTimeOut+0x82>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d302      	bcc.n	8009be6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	e015      	b.n	8009c12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d20b      	bcs.n	8009c08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff ff9b 	bl	8009b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	61fb      	str	r3, [r7, #28]
 8009c06:	e004      	b.n	8009c12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c12:	f001 f88f 	bl	800ad34 <vPortExitCritical>

	return xReturn;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20000f00 	.word	0x20000f00
 8009c24:	20000f14 	.word	0x20000f14

08009c28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c2c:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <vTaskMissedYield+0x14>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20000f10 	.word	0x20000f10

08009c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c48:	f000 f852 	bl	8009cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <prvIdleTask+0x28>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d9f9      	bls.n	8009c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <prvIdleTask+0x2c>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c64:	e7f0      	b.n	8009c48 <prvIdleTask+0x8>
 8009c66:	bf00      	nop
 8009c68:	20000a2c 	.word	0x20000a2c
 8009c6c:	e000ed04 	.word	0xe000ed04

08009c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c76:	2300      	movs	r3, #0
 8009c78:	607b      	str	r3, [r7, #4]
 8009c7a:	e00c      	b.n	8009c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4a12      	ldr	r2, [pc, #72]	; (8009cd0 <prvInitialiseTaskLists+0x60>)
 8009c88:	4413      	add	r3, r2
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fcca 	bl	8008624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3301      	adds	r3, #1
 8009c94:	607b      	str	r3, [r7, #4]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b37      	cmp	r3, #55	; 0x37
 8009c9a:	d9ef      	bls.n	8009c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c9c:	480d      	ldr	r0, [pc, #52]	; (8009cd4 <prvInitialiseTaskLists+0x64>)
 8009c9e:	f7fe fcc1 	bl	8008624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ca2:	480d      	ldr	r0, [pc, #52]	; (8009cd8 <prvInitialiseTaskLists+0x68>)
 8009ca4:	f7fe fcbe 	bl	8008624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ca8:	480c      	ldr	r0, [pc, #48]	; (8009cdc <prvInitialiseTaskLists+0x6c>)
 8009caa:	f7fe fcbb 	bl	8008624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cae:	480c      	ldr	r0, [pc, #48]	; (8009ce0 <prvInitialiseTaskLists+0x70>)
 8009cb0:	f7fe fcb8 	bl	8008624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cb4:	480b      	ldr	r0, [pc, #44]	; (8009ce4 <prvInitialiseTaskLists+0x74>)
 8009cb6:	f7fe fcb5 	bl	8008624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cba:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <prvInitialiseTaskLists+0x78>)
 8009cbc:	4a05      	ldr	r2, [pc, #20]	; (8009cd4 <prvInitialiseTaskLists+0x64>)
 8009cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <prvInitialiseTaskLists+0x7c>)
 8009cc2:	4a05      	ldr	r2, [pc, #20]	; (8009cd8 <prvInitialiseTaskLists+0x68>)
 8009cc4:	601a      	str	r2, [r3, #0]
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000a2c 	.word	0x20000a2c
 8009cd4:	20000e8c 	.word	0x20000e8c
 8009cd8:	20000ea0 	.word	0x20000ea0
 8009cdc:	20000ebc 	.word	0x20000ebc
 8009ce0:	20000ed0 	.word	0x20000ed0
 8009ce4:	20000ee8 	.word	0x20000ee8
 8009ce8:	20000eb4 	.word	0x20000eb4
 8009cec:	20000eb8 	.word	0x20000eb8

08009cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cf6:	e019      	b.n	8009d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cf8:	f000 ffec 	bl	800acd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfc:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <prvCheckTasksWaitingTermination+0x50>)
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fd15 	bl	8008738 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d0e:	4b0d      	ldr	r3, [pc, #52]	; (8009d44 <prvCheckTasksWaitingTermination+0x54>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	4a0b      	ldr	r2, [pc, #44]	; (8009d44 <prvCheckTasksWaitingTermination+0x54>)
 8009d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d18:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	4a0a      	ldr	r2, [pc, #40]	; (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d22:	f001 f807 	bl	800ad34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f810 	bl	8009d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d2c:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e1      	bne.n	8009cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000ed0 	.word	0x20000ed0
 8009d44:	20000efc 	.word	0x20000efc
 8009d48:	20000ee4 	.word	0x20000ee4

08009d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3354      	adds	r3, #84	; 0x54
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 fd3b 	bl	800b7d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d108      	bne.n	8009d7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f001 f99f 	bl	800b0b0 <vPortFree>
				vPortFree( pxTCB );
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 f99c 	bl	800b0b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d78:	e018      	b.n	8009dac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d103      	bne.n	8009d8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 f993 	bl	800b0b0 <vPortFree>
	}
 8009d8a:	e00f      	b.n	8009dac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d00a      	beq.n	8009dac <prvDeleteTCB+0x60>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	60fb      	str	r3, [r7, #12]
}
 8009da8:	bf00      	nop
 8009daa:	e7fe      	b.n	8009daa <prvDeleteTCB+0x5e>
	}
 8009dac:	bf00      	nop
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dba:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <prvResetNextTaskUnblockTime+0x38>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d104      	bne.n	8009dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dc4:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <prvResetNextTaskUnblockTime+0x3c>)
 8009dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dcc:	e008      	b.n	8009de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dce:	4b07      	ldr	r3, [pc, #28]	; (8009dec <prvResetNextTaskUnblockTime+0x38>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	4a04      	ldr	r2, [pc, #16]	; (8009df0 <prvResetNextTaskUnblockTime+0x3c>)
 8009dde:	6013      	str	r3, [r2, #0]
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	20000eb4 	.word	0x20000eb4
 8009df0:	20000f1c 	.word	0x20000f1c

08009df4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009dfa:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <xTaskGetCurrentTaskHandle+0x1c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009e00:	687b      	ldr	r3, [r7, #4]
	}
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	20000a28 	.word	0x20000a28

08009e14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e1a:	4b0b      	ldr	r3, [pc, #44]	; (8009e48 <xTaskGetSchedulerState+0x34>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d102      	bne.n	8009e28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e22:	2301      	movs	r3, #1
 8009e24:	607b      	str	r3, [r7, #4]
 8009e26:	e008      	b.n	8009e3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e28:	4b08      	ldr	r3, [pc, #32]	; (8009e4c <xTaskGetSchedulerState+0x38>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e30:	2302      	movs	r3, #2
 8009e32:	607b      	str	r3, [r7, #4]
 8009e34:	e001      	b.n	8009e3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e36:	2300      	movs	r3, #0
 8009e38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e3a:	687b      	ldr	r3, [r7, #4]
	}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	20000f08 	.word	0x20000f08
 8009e4c:	20000f24 	.word	0x20000f24

08009e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d056      	beq.n	8009f14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e66:	4b2e      	ldr	r3, [pc, #184]	; (8009f20 <xTaskPriorityDisinherit+0xd0>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d00a      	beq.n	8009e86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	60fb      	str	r3, [r7, #12]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	60bb      	str	r3, [r7, #8]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ea8:	1e5a      	subs	r2, r3, #1
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d02c      	beq.n	8009f14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d128      	bne.n	8009f14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe fc36 	bl	8008738 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee4:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <xTaskPriorityDisinherit+0xd4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d903      	bls.n	8009ef4 <xTaskPriorityDisinherit+0xa4>
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef0:	4a0c      	ldr	r2, [pc, #48]	; (8009f24 <xTaskPriorityDisinherit+0xd4>)
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4a09      	ldr	r2, [pc, #36]	; (8009f28 <xTaskPriorityDisinherit+0xd8>)
 8009f02:	441a      	add	r2, r3
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	f7fe fbb7 	bl	800867e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f14:	697b      	ldr	r3, [r7, #20]
	}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000a28 	.word	0x20000a28
 8009f24:	20000f04 	.word	0x20000f04
 8009f28:	20000a2c 	.word	0x20000a2c

08009f2c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
 8009f38:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009f3a:	f000 fecb 	bl	800acd4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f3e:	4b29      	ldr	r3, [pc, #164]	; (8009fe4 <xTaskNotifyWait+0xb8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d01c      	beq.n	8009f86 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009f4c:	4b25      	ldr	r3, [pc, #148]	; (8009fe4 <xTaskNotifyWait+0xb8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	43d2      	mvns	r2, r2
 8009f58:	400a      	ands	r2, r1
 8009f5a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009f5e:	4b21      	ldr	r3, [pc, #132]	; (8009fe4 <xTaskNotifyWait+0xb8>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00b      	beq.n	8009f86 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f6e:	2101      	movs	r1, #1
 8009f70:	6838      	ldr	r0, [r7, #0]
 8009f72:	f000 f9dd 	bl	800a330 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009f76:	4b1c      	ldr	r3, [pc, #112]	; (8009fe8 <xTaskNotifyWait+0xbc>)
 8009f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f86:	f000 fed5 	bl	800ad34 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009f8a:	f000 fea3 	bl	800acd4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009f94:	4b13      	ldr	r3, [pc, #76]	; (8009fe4 <xTaskNotifyWait+0xb8>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009fa0:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <xTaskNotifyWait+0xb8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d002      	beq.n	8009fb4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	e00a      	b.n	8009fca <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009fb4:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <xTaskNotifyWait+0xb8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	43d2      	mvns	r2, r2
 8009fc0:	400a      	ands	r2, r1
 8009fc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <xTaskNotifyWait+0xb8>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009fd4:	f000 feae 	bl	800ad34 <vPortExitCritical>

		return xReturn;
 8009fd8:	697b      	ldr	r3, [r7, #20]
	}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000a28 	.word	0x20000a28
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	; 0x28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10a      	bne.n	800a01c <xTaskGenericNotify+0x30>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	61bb      	str	r3, [r7, #24]
}
 800a018:	bf00      	nop
 800a01a:	e7fe      	b.n	800a01a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a020:	f000 fe58 	bl	800acd4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d004      	beq.n	800a034 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a03a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	2202      	movs	r2, #2
 800a040:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800a044:	79fb      	ldrb	r3, [r7, #7]
 800a046:	2b04      	cmp	r3, #4
 800a048:	d82d      	bhi.n	800a0a6 <xTaskGenericNotify+0xba>
 800a04a:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <xTaskGenericNotify+0x64>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a0c9 	.word	0x0800a0c9
 800a054:	0800a065 	.word	0x0800a065
 800a058:	0800a077 	.word	0x0800a077
 800a05c:	0800a087 	.word	0x0800a087
 800a060:	0800a091 	.word	0x0800a091
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a074:	e02b      	b.n	800a0ce <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a084:	e023      	b.n	800a0ce <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a08e:	e01e      	b.n	800a0ce <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a090:	7ffb      	ldrb	r3, [r7, #31]
 800a092:	2b02      	cmp	r3, #2
 800a094:	d004      	beq.n	800a0a0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a09e:	e016      	b.n	800a0ce <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a0a4:	e013      	b.n	800a0ce <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d00c      	beq.n	800a0cc <xTaskGenericNotify+0xe0>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	617b      	str	r3, [r7, #20]
}
 800a0c4:	bf00      	nop
 800a0c6:	e7fe      	b.n	800a0c6 <xTaskGenericNotify+0xda>
					break;
 800a0c8:	bf00      	nop
 800a0ca:	e000      	b.n	800a0ce <xTaskGenericNotify+0xe2>

					break;
 800a0cc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a0ce:	7ffb      	ldrb	r3, [r7, #31]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d13a      	bne.n	800a14a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fb2d 	bl	8008738 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e2:	4b1d      	ldr	r3, [pc, #116]	; (800a158 <xTaskGenericNotify+0x16c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d903      	bls.n	800a0f2 <xTaskGenericNotify+0x106>
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	4a1a      	ldr	r2, [pc, #104]	; (800a158 <xTaskGenericNotify+0x16c>)
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4a17      	ldr	r2, [pc, #92]	; (800a15c <xTaskGenericNotify+0x170>)
 800a100:	441a      	add	r2, r3
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	3304      	adds	r3, #4
 800a106:	4619      	mov	r1, r3
 800a108:	4610      	mov	r0, r2
 800a10a:	f7fe fab8 	bl	800867e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <xTaskGenericNotify+0x140>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	613b      	str	r3, [r7, #16]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <xTaskGenericNotify+0x174>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	429a      	cmp	r2, r3
 800a138:	d907      	bls.n	800a14a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a13a:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <xTaskGenericNotify+0x178>)
 800a13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a14a:	f000 fdf3 	bl	800ad34 <vPortExitCritical>

		return xReturn;
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a150:	4618      	mov	r0, r3
 800a152:	3728      	adds	r7, #40	; 0x28
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	20000f04 	.word	0x20000f04
 800a15c:	20000a2c 	.word	0x20000a2c
 800a160:	20000a28 	.word	0x20000a28
 800a164:	e000ed04 	.word	0xe000ed04

0800a168 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08e      	sub	sp, #56	; 0x38
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	4613      	mov	r3, r2
 800a176:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a178:	2301      	movs	r3, #1
 800a17a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a194:	bf00      	nop
 800a196:	e7fe      	b.n	800a196 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a198:	f000 fe7e 	bl	800ae98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a1a0:	f3ef 8211 	mrs	r2, BASEPRI
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	623a      	str	r2, [r7, #32]
 800a1b6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a1b8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a1d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	2202      	movs	r2, #2
 800a1da:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d82f      	bhi.n	800a244 <xTaskGenericNotifyFromISR+0xdc>
 800a1e4:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <xTaskGenericNotifyFromISR+0x84>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a267 	.word	0x0800a267
 800a1f0:	0800a201 	.word	0x0800a201
 800a1f4:	0800a213 	.word	0x0800a213
 800a1f8:	0800a223 	.word	0x0800a223
 800a1fc:	0800a22d 	.word	0x0800a22d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	431a      	orrs	r2, r3
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a210:	e02c      	b.n	800a26c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a220:	e024      	b.n	800a26c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a22a:	e01f      	b.n	800a26c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a22c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a230:	2b02      	cmp	r3, #2
 800a232:	d004      	beq.n	800a23e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a23c:	e016      	b.n	800a26c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a23e:	2300      	movs	r3, #0
 800a240:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a242:	e013      	b.n	800a26c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d00c      	beq.n	800a26a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	61bb      	str	r3, [r7, #24]
}
 800a262:	bf00      	nop
 800a264:	e7fe      	b.n	800a264 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a266:	bf00      	nop
 800a268:	e000      	b.n	800a26c <xTaskGenericNotifyFromISR+0x104>
					break;
 800a26a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a26c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a270:	2b01      	cmp	r3, #1
 800a272:	d146      	bne.n	800a302 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00a      	beq.n	800a292 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	617b      	str	r3, [r7, #20]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a292:	4b21      	ldr	r3, [pc, #132]	; (800a318 <xTaskGenericNotifyFromISR+0x1b0>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d11d      	bne.n	800a2d6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	3304      	adds	r3, #4
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fa4a 	bl	8008738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a8:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <xTaskGenericNotifyFromISR+0x1b4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d903      	bls.n	800a2b8 <xTaskGenericNotifyFromISR+0x150>
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4a19      	ldr	r2, [pc, #100]	; (800a31c <xTaskGenericNotifyFromISR+0x1b4>)
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4a16      	ldr	r2, [pc, #88]	; (800a320 <xTaskGenericNotifyFromISR+0x1b8>)
 800a2c6:	441a      	add	r2, r3
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f7fe f9d5 	bl	800867e <vListInsertEnd>
 800a2d4:	e005      	b.n	800a2e2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	3318      	adds	r3, #24
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4811      	ldr	r0, [pc, #68]	; (800a324 <xTaskGenericNotifyFromISR+0x1bc>)
 800a2de:	f7fe f9ce 	bl	800867e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e6:	4b10      	ldr	r3, [pc, #64]	; (800a328 <xTaskGenericNotifyFromISR+0x1c0>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d908      	bls.n	800a302 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a2f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <xTaskGenericNotifyFromISR+0x1c4>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	f383 8811 	msr	BASEPRI, r3
}
 800a30c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a310:	4618      	mov	r0, r3
 800a312:	3738      	adds	r7, #56	; 0x38
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000f24 	.word	0x20000f24
 800a31c:	20000f04 	.word	0x20000f04
 800a320:	20000a2c 	.word	0x20000a2c
 800a324:	20000ebc 	.word	0x20000ebc
 800a328:	20000a28 	.word	0x20000a28
 800a32c:	20000f10 	.word	0x20000f10

0800a330 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a33a:	4b21      	ldr	r3, [pc, #132]	; (800a3c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a340:	4b20      	ldr	r3, [pc, #128]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3304      	adds	r3, #4
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe f9f6 	bl	8008738 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a352:	d10a      	bne.n	800a36a <prvAddCurrentTaskToDelayedList+0x3a>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d007      	beq.n	800a36a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a35a:	4b1a      	ldr	r3, [pc, #104]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3304      	adds	r3, #4
 800a360:	4619      	mov	r1, r3
 800a362:	4819      	ldr	r0, [pc, #100]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a364:	f7fe f98b 	bl	800867e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a368:	e026      	b.n	800a3b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a372:	4b14      	ldr	r3, [pc, #80]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d209      	bcs.n	800a396 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a382:	4b12      	ldr	r3, [pc, #72]	; (800a3cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3304      	adds	r3, #4
 800a38c:	4619      	mov	r1, r3
 800a38e:	4610      	mov	r0, r2
 800a390:	f7fe f999 	bl	80086c6 <vListInsert>
}
 800a394:	e010      	b.n	800a3b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a396:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	f7fe f98f 	bl	80086c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3a8:	4b0a      	ldr	r3, [pc, #40]	; (800a3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d202      	bcs.n	800a3b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3b2:	4a08      	ldr	r2, [pc, #32]	; (800a3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	6013      	str	r3, [r2, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20000f00 	.word	0x20000f00
 800a3c4:	20000a28 	.word	0x20000a28
 800a3c8:	20000ee8 	.word	0x20000ee8
 800a3cc:	20000eb8 	.word	0x20000eb8
 800a3d0:	20000eb4 	.word	0x20000eb4
 800a3d4:	20000f1c 	.word	0x20000f1c

0800a3d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08a      	sub	sp, #40	; 0x28
 800a3dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3e2:	f000 fb07 	bl	800a9f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3e6:	4b1c      	ldr	r3, [pc, #112]	; (800a458 <xTimerCreateTimerTask+0x80>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d021      	beq.n	800a432 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3f6:	1d3a      	adds	r2, r7, #4
 800a3f8:	f107 0108 	add.w	r1, r7, #8
 800a3fc:	f107 030c 	add.w	r3, r7, #12
 800a400:	4618      	mov	r0, r3
 800a402:	f7fe f8f5 	bl	80085f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	9202      	str	r2, [sp, #8]
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	2302      	movs	r3, #2
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	2300      	movs	r3, #0
 800a416:	460a      	mov	r2, r1
 800a418:	4910      	ldr	r1, [pc, #64]	; (800a45c <xTimerCreateTimerTask+0x84>)
 800a41a:	4811      	ldr	r0, [pc, #68]	; (800a460 <xTimerCreateTimerTask+0x88>)
 800a41c:	f7fe fea2 	bl	8009164 <xTaskCreateStatic>
 800a420:	4603      	mov	r3, r0
 800a422:	4a10      	ldr	r2, [pc, #64]	; (800a464 <xTimerCreateTimerTask+0x8c>)
 800a424:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a426:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <xTimerCreateTimerTask+0x8c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a42e:	2301      	movs	r3, #1
 800a430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	613b      	str	r3, [r7, #16]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a44e:	697b      	ldr	r3, [r7, #20]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20000f58 	.word	0x20000f58
 800a45c:	0800bee0 	.word	0x0800bee0
 800a460:	0800a59d 	.word	0x0800a59d
 800a464:	20000f5c 	.word	0x20000f5c

0800a468 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	; 0x28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a476:	2300      	movs	r3, #0
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	623b      	str	r3, [r7, #32]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a496:	4b1a      	ldr	r3, [pc, #104]	; (800a500 <xTimerGenericCommand+0x98>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d02a      	beq.n	800a4f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b05      	cmp	r3, #5
 800a4ae:	dc18      	bgt.n	800a4e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4b0:	f7ff fcb0 	bl	8009e14 <xTaskGetSchedulerState>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d109      	bne.n	800a4ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4ba:	4b11      	ldr	r3, [pc, #68]	; (800a500 <xTimerGenericCommand+0x98>)
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	f107 0110 	add.w	r1, r7, #16
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4c6:	f7fe fa65 	bl	8008994 <xQueueGenericSend>
 800a4ca:	6278      	str	r0, [r7, #36]	; 0x24
 800a4cc:	e012      	b.n	800a4f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4ce:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <xTimerGenericCommand+0x98>)
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f107 0110 	add.w	r1, r7, #16
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f7fe fa5b 	bl	8008994 <xQueueGenericSend>
 800a4de:	6278      	str	r0, [r7, #36]	; 0x24
 800a4e0:	e008      	b.n	800a4f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a4e2:	4b07      	ldr	r3, [pc, #28]	; (800a500 <xTimerGenericCommand+0x98>)
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	f107 0110 	add.w	r1, r7, #16
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	f7fe fb4f 	bl	8008b90 <xQueueGenericSendFromISR>
 800a4f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3728      	adds	r7, #40	; 0x28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000f58 	.word	0x20000f58

0800a504 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af02      	add	r7, sp, #8
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a50e:	4b22      	ldr	r3, [pc, #136]	; (800a598 <prvProcessExpiredTimer+0x94>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	3304      	adds	r3, #4
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fe f90b 	bl	8008738 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d022      	beq.n	800a576 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	699a      	ldr	r2, [r3, #24]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	18d1      	adds	r1, r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	6978      	ldr	r0, [r7, #20]
 800a53e:	f000 f8d1 	bl	800a6e4 <prvInsertTimerInActiveList>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01f      	beq.n	800a588 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a548:	2300      	movs	r3, #0
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	2300      	movs	r3, #0
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	2100      	movs	r1, #0
 800a552:	6978      	ldr	r0, [r7, #20]
 800a554:	f7ff ff88 	bl	800a468 <xTimerGenericCommand>
 800a558:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d113      	bne.n	800a588 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	60fb      	str	r3, [r7, #12]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	b2da      	uxtb	r2, r3
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	6978      	ldr	r0, [r7, #20]
 800a58e:	4798      	blx	r3
}
 800a590:	bf00      	nop
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20000f50 	.word	0x20000f50

0800a59c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5a4:	f107 0308 	add.w	r3, r7, #8
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 f857 	bl	800a65c <prvGetNextExpireTime>
 800a5ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 f803 	bl	800a5c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5ba:	f000 f8d5 	bl	800a768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5be:	e7f1      	b.n	800a5a4 <prvTimerTask+0x8>

0800a5c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5ca:	f7ff f827 	bl	800961c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5ce:	f107 0308 	add.w	r3, r7, #8
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 f866 	bl	800a6a4 <prvSampleTimeNow>
 800a5d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d130      	bne.n	800a642 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <prvProcessTimerOrBlockTask+0x3c>
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d806      	bhi.n	800a5fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a5ee:	f7ff f823 	bl	8009638 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a5f2:	68f9      	ldr	r1, [r7, #12]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff ff85 	bl	800a504 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a5fa:	e024      	b.n	800a646 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d008      	beq.n	800a614 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a602:	4b13      	ldr	r3, [pc, #76]	; (800a650 <prvProcessTimerOrBlockTask+0x90>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <prvProcessTimerOrBlockTask+0x50>
 800a60c:	2301      	movs	r3, #1
 800a60e:	e000      	b.n	800a612 <prvProcessTimerOrBlockTask+0x52>
 800a610:	2300      	movs	r3, #0
 800a612:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a614:	4b0f      	ldr	r3, [pc, #60]	; (800a654 <prvProcessTimerOrBlockTask+0x94>)
 800a616:	6818      	ldr	r0, [r3, #0]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	4619      	mov	r1, r3
 800a622:	f7fe fd6b 	bl	80090fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a626:	f7ff f807 	bl	8009638 <xTaskResumeAll>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a630:	4b09      	ldr	r3, [pc, #36]	; (800a658 <prvProcessTimerOrBlockTask+0x98>)
 800a632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	f3bf 8f6f 	isb	sy
}
 800a640:	e001      	b.n	800a646 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a642:	f7fe fff9 	bl	8009638 <xTaskResumeAll>
}
 800a646:	bf00      	nop
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20000f54 	.word	0x20000f54
 800a654:	20000f58 	.word	0x20000f58
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a664:	4b0e      	ldr	r3, [pc, #56]	; (800a6a0 <prvGetNextExpireTime+0x44>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <prvGetNextExpireTime+0x16>
 800a66e:	2201      	movs	r2, #1
 800a670:	e000      	b.n	800a674 <prvGetNextExpireTime+0x18>
 800a672:	2200      	movs	r2, #0
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d105      	bne.n	800a68c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <prvGetNextExpireTime+0x44>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	e001      	b.n	800a690 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a690:	68fb      	ldr	r3, [r7, #12]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	20000f50 	.word	0x20000f50

0800a6a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6ac:	f7ff f862 	bl	8009774 <xTaskGetTickCount>
 800a6b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6b2:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <prvSampleTimeNow+0x3c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d205      	bcs.n	800a6c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6bc:	f000 f936 	bl	800a92c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	e002      	b.n	800a6ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6ce:	4a04      	ldr	r2, [pc, #16]	; (800a6e0 <prvSampleTimeNow+0x3c>)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20000f60 	.word	0x20000f60

0800a6e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	429a      	cmp	r2, r3
 800a708:	d812      	bhi.n	800a730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	1ad2      	subs	r2, r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	429a      	cmp	r2, r3
 800a716:	d302      	bcc.n	800a71e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a718:	2301      	movs	r3, #1
 800a71a:	617b      	str	r3, [r7, #20]
 800a71c:	e01b      	b.n	800a756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a71e:	4b10      	ldr	r3, [pc, #64]	; (800a760 <prvInsertTimerInActiveList+0x7c>)
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	3304      	adds	r3, #4
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f7fd ffcc 	bl	80086c6 <vListInsert>
 800a72e:	e012      	b.n	800a756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	429a      	cmp	r2, r3
 800a736:	d206      	bcs.n	800a746 <prvInsertTimerInActiveList+0x62>
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d302      	bcc.n	800a746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a740:	2301      	movs	r3, #1
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	e007      	b.n	800a756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a746:	4b07      	ldr	r3, [pc, #28]	; (800a764 <prvInsertTimerInActiveList+0x80>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	3304      	adds	r3, #4
 800a74e:	4619      	mov	r1, r3
 800a750:	4610      	mov	r0, r2
 800a752:	f7fd ffb8 	bl	80086c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a756:	697b      	ldr	r3, [r7, #20]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20000f54 	.word	0x20000f54
 800a764:	20000f50 	.word	0x20000f50

0800a768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08e      	sub	sp, #56	; 0x38
 800a76c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a76e:	e0ca      	b.n	800a906 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	da18      	bge.n	800a7a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a776:	1d3b      	adds	r3, r7, #4
 800a778:	3304      	adds	r3, #4
 800a77a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	61fb      	str	r3, [r7, #28]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79e:	6850      	ldr	r0, [r2, #4]
 800a7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a2:	6892      	ldr	r2, [r2, #8]
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f2c0 80aa 	blt.w	800a904 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d004      	beq.n	800a7c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fd ffb9 	bl	8008738 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7c6:	463b      	mov	r3, r7
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7ff ff6b 	bl	800a6a4 <prvSampleTimeNow>
 800a7ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b09      	cmp	r3, #9
 800a7d4:	f200 8097 	bhi.w	800a906 <prvProcessReceivedCommands+0x19e>
 800a7d8:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <prvProcessReceivedCommands+0x78>)
 800a7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7de:	bf00      	nop
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	0800a809 	.word	0x0800a809
 800a7e8:	0800a809 	.word	0x0800a809
 800a7ec:	0800a87d 	.word	0x0800a87d
 800a7f0:	0800a891 	.word	0x0800a891
 800a7f4:	0800a8db 	.word	0x0800a8db
 800a7f8:	0800a809 	.word	0x0800a809
 800a7fc:	0800a809 	.word	0x0800a809
 800a800:	0800a87d 	.word	0x0800a87d
 800a804:	0800a891 	.word	0x0800a891
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a80e:	f043 0301 	orr.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	18d1      	adds	r1, r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a828:	f7ff ff5c 	bl	800a6e4 <prvInsertTimerInActiveList>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d069      	beq.n	800a906 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a838:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b00      	cmp	r3, #0
 800a846:	d05e      	beq.n	800a906 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	441a      	add	r2, r3
 800a850:	2300      	movs	r3, #0
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	2300      	movs	r3, #0
 800a856:	2100      	movs	r1, #0
 800a858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a85a:	f7ff fe05 	bl	800a468 <xTimerGenericCommand>
 800a85e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d14f      	bne.n	800a906 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	61bb      	str	r3, [r7, #24]
}
 800a878:	bf00      	nop
 800a87a:	e7fe      	b.n	800a87a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a882:	f023 0301 	bic.w	r3, r3, #1
 800a886:	b2da      	uxtb	r2, r3
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a88e:	e03a      	b.n	800a906 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a896:	f043 0301 	orr.w	r3, r3, #1
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	617b      	str	r3, [r7, #20]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c8:	699a      	ldr	r2, [r3, #24]
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	18d1      	adds	r1, r2, r3
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d4:	f7ff ff06 	bl	800a6e4 <prvInsertTimerInActiveList>
					break;
 800a8d8:	e015      	b.n	800a906 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d103      	bne.n	800a8f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ea:	f000 fbe1 	bl	800b0b0 <vPortFree>
 800a8ee:	e00a      	b.n	800a906 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f6:	f023 0301 	bic.w	r3, r3, #1
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a902:	e000      	b.n	800a906 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a904:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a906:	4b08      	ldr	r3, [pc, #32]	; (800a928 <prvProcessReceivedCommands+0x1c0>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	1d39      	adds	r1, r7, #4
 800a90c:	2200      	movs	r2, #0
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fe f9da 	bl	8008cc8 <xQueueReceive>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	f47f af2a 	bne.w	800a770 <prvProcessReceivedCommands+0x8>
	}
}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	3730      	adds	r7, #48	; 0x30
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20000f58 	.word	0x20000f58

0800a92c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a932:	e048      	b.n	800a9c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a934:	4b2d      	ldr	r3, [pc, #180]	; (800a9ec <prvSwitchTimerLists+0xc0>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93e:	4b2b      	ldr	r3, [pc, #172]	; (800a9ec <prvSwitchTimerLists+0xc0>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fd fef3 	bl	8008738 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	2b00      	cmp	r3, #0
 800a966:	d02e      	beq.n	800a9c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4413      	add	r3, r2
 800a970:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	429a      	cmp	r2, r3
 800a978:	d90e      	bls.n	800a998 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a986:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <prvSwitchTimerLists+0xc0>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	3304      	adds	r3, #4
 800a98e:	4619      	mov	r1, r3
 800a990:	4610      	mov	r0, r2
 800a992:	f7fd fe98 	bl	80086c6 <vListInsert>
 800a996:	e016      	b.n	800a9c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a998:	2300      	movs	r3, #0
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	2300      	movs	r3, #0
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff fd60 	bl	800a468 <xTimerGenericCommand>
 800a9a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10a      	bne.n	800a9c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	603b      	str	r3, [r7, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	e7fe      	b.n	800a9c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9c6:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <prvSwitchTimerLists+0xc0>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1b1      	bne.n	800a934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9d0:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <prvSwitchTimerLists+0xc0>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9d6:	4b06      	ldr	r3, [pc, #24]	; (800a9f0 <prvSwitchTimerLists+0xc4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a04      	ldr	r2, [pc, #16]	; (800a9ec <prvSwitchTimerLists+0xc0>)
 800a9dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9de:	4a04      	ldr	r2, [pc, #16]	; (800a9f0 <prvSwitchTimerLists+0xc4>)
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	6013      	str	r3, [r2, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20000f50 	.word	0x20000f50
 800a9f0:	20000f54 	.word	0x20000f54

0800a9f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9fa:	f000 f96b 	bl	800acd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9fe:	4b15      	ldr	r3, [pc, #84]	; (800aa54 <prvCheckForValidListAndQueue+0x60>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d120      	bne.n	800aa48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa06:	4814      	ldr	r0, [pc, #80]	; (800aa58 <prvCheckForValidListAndQueue+0x64>)
 800aa08:	f7fd fe0c 	bl	8008624 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa0c:	4813      	ldr	r0, [pc, #76]	; (800aa5c <prvCheckForValidListAndQueue+0x68>)
 800aa0e:	f7fd fe09 	bl	8008624 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa12:	4b13      	ldr	r3, [pc, #76]	; (800aa60 <prvCheckForValidListAndQueue+0x6c>)
 800aa14:	4a10      	ldr	r2, [pc, #64]	; (800aa58 <prvCheckForValidListAndQueue+0x64>)
 800aa16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa18:	4b12      	ldr	r3, [pc, #72]	; (800aa64 <prvCheckForValidListAndQueue+0x70>)
 800aa1a:	4a10      	ldr	r2, [pc, #64]	; (800aa5c <prvCheckForValidListAndQueue+0x68>)
 800aa1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa1e:	2300      	movs	r3, #0
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <prvCheckForValidListAndQueue+0x74>)
 800aa24:	4a11      	ldr	r2, [pc, #68]	; (800aa6c <prvCheckForValidListAndQueue+0x78>)
 800aa26:	2110      	movs	r1, #16
 800aa28:	200a      	movs	r0, #10
 800aa2a:	f7fd ff17 	bl	800885c <xQueueGenericCreateStatic>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4a08      	ldr	r2, [pc, #32]	; (800aa54 <prvCheckForValidListAndQueue+0x60>)
 800aa32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa34:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <prvCheckForValidListAndQueue+0x60>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <prvCheckForValidListAndQueue+0x60>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	490b      	ldr	r1, [pc, #44]	; (800aa70 <prvCheckForValidListAndQueue+0x7c>)
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fb30 	bl	80090a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa48:	f000 f974 	bl	800ad34 <vPortExitCritical>
}
 800aa4c:	bf00      	nop
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20000f58 	.word	0x20000f58
 800aa58:	20000f28 	.word	0x20000f28
 800aa5c:	20000f3c 	.word	0x20000f3c
 800aa60:	20000f50 	.word	0x20000f50
 800aa64:	20000f54 	.word	0x20000f54
 800aa68:	20001004 	.word	0x20001004
 800aa6c:	20000f64 	.word	0x20000f64
 800aa70:	0800bee8 	.word	0x0800bee8

0800aa74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3b04      	subs	r3, #4
 800aa84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3b04      	subs	r3, #4
 800aa92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	f023 0201 	bic.w	r2, r3, #1
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3b04      	subs	r3, #4
 800aaa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aaa4:	4a0c      	ldr	r2, [pc, #48]	; (800aad8 <pxPortInitialiseStack+0x64>)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3b14      	subs	r3, #20
 800aaae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3b04      	subs	r3, #4
 800aaba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f06f 0202 	mvn.w	r2, #2
 800aac2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	3b20      	subs	r3, #32
 800aac8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aaca:	68fb      	ldr	r3, [r7, #12]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	0800aadd 	.word	0x0800aadd

0800aadc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aae6:	4b12      	ldr	r3, [pc, #72]	; (800ab30 <prvTaskExitError+0x54>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaee:	d00a      	beq.n	800ab06 <prvTaskExitError+0x2a>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	60fb      	str	r3, [r7, #12]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <prvTaskExitError+0x28>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	60bb      	str	r3, [r7, #8]
}
 800ab18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab1a:	bf00      	nop
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0fc      	beq.n	800ab1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab22:	bf00      	nop
 800ab24:	bf00      	nop
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	2000000c 	.word	0x2000000c
	...

0800ab40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <pxCurrentTCBConst2>)
 800ab42:	6819      	ldr	r1, [r3, #0]
 800ab44:	6808      	ldr	r0, [r1, #0]
 800ab46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4a:	f380 8809 	msr	PSP, r0
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f04f 0000 	mov.w	r0, #0
 800ab56:	f380 8811 	msr	BASEPRI, r0
 800ab5a:	4770      	bx	lr
 800ab5c:	f3af 8000 	nop.w

0800ab60 <pxCurrentTCBConst2>:
 800ab60:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop

0800ab68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab68:	4808      	ldr	r0, [pc, #32]	; (800ab8c <prvPortStartFirstTask+0x24>)
 800ab6a:	6800      	ldr	r0, [r0, #0]
 800ab6c:	6800      	ldr	r0, [r0, #0]
 800ab6e:	f380 8808 	msr	MSP, r0
 800ab72:	f04f 0000 	mov.w	r0, #0
 800ab76:	f380 8814 	msr	CONTROL, r0
 800ab7a:	b662      	cpsie	i
 800ab7c:	b661      	cpsie	f
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	df00      	svc	0
 800ab88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab8a:	bf00      	nop
 800ab8c:	e000ed08 	.word	0xe000ed08

0800ab90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab96:	4b46      	ldr	r3, [pc, #280]	; (800acb0 <xPortStartScheduler+0x120>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a46      	ldr	r2, [pc, #280]	; (800acb4 <xPortStartScheduler+0x124>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d10a      	bne.n	800abb6 <xPortStartScheduler+0x26>
	__asm volatile
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	613b      	str	r3, [r7, #16]
}
 800abb2:	bf00      	nop
 800abb4:	e7fe      	b.n	800abb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abb6:	4b3e      	ldr	r3, [pc, #248]	; (800acb0 <xPortStartScheduler+0x120>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a3f      	ldr	r2, [pc, #252]	; (800acb8 <xPortStartScheduler+0x128>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d10a      	bne.n	800abd6 <xPortStartScheduler+0x46>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	60fb      	str	r3, [r7, #12]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abd6:	4b39      	ldr	r3, [pc, #228]	; (800acbc <xPortStartScheduler+0x12c>)
 800abd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	22ff      	movs	r2, #255	; 0xff
 800abe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	b2db      	uxtb	r3, r3
 800abee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abf0:	78fb      	ldrb	r3, [r7, #3]
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	4b31      	ldr	r3, [pc, #196]	; (800acc0 <xPortStartScheduler+0x130>)
 800abfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abfe:	4b31      	ldr	r3, [pc, #196]	; (800acc4 <xPortStartScheduler+0x134>)
 800ac00:	2207      	movs	r2, #7
 800ac02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac04:	e009      	b.n	800ac1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac06:	4b2f      	ldr	r3, [pc, #188]	; (800acc4 <xPortStartScheduler+0x134>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	4a2d      	ldr	r2, [pc, #180]	; (800acc4 <xPortStartScheduler+0x134>)
 800ac0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac1a:	78fb      	ldrb	r3, [r7, #3]
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac22:	2b80      	cmp	r3, #128	; 0x80
 800ac24:	d0ef      	beq.n	800ac06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac26:	4b27      	ldr	r3, [pc, #156]	; (800acc4 <xPortStartScheduler+0x134>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f1c3 0307 	rsb	r3, r3, #7
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	d00a      	beq.n	800ac48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	60bb      	str	r3, [r7, #8]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac48:	4b1e      	ldr	r3, [pc, #120]	; (800acc4 <xPortStartScheduler+0x134>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	021b      	lsls	r3, r3, #8
 800ac4e:	4a1d      	ldr	r2, [pc, #116]	; (800acc4 <xPortStartScheduler+0x134>)
 800ac50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac52:	4b1c      	ldr	r3, [pc, #112]	; (800acc4 <xPortStartScheduler+0x134>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac5a:	4a1a      	ldr	r2, [pc, #104]	; (800acc4 <xPortStartScheduler+0x134>)
 800ac5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac66:	4b18      	ldr	r3, [pc, #96]	; (800acc8 <xPortStartScheduler+0x138>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a17      	ldr	r2, [pc, #92]	; (800acc8 <xPortStartScheduler+0x138>)
 800ac6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac72:	4b15      	ldr	r3, [pc, #84]	; (800acc8 <xPortStartScheduler+0x138>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a14      	ldr	r2, [pc, #80]	; (800acc8 <xPortStartScheduler+0x138>)
 800ac78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac7e:	f000 f8dd 	bl	800ae3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac82:	4b12      	ldr	r3, [pc, #72]	; (800accc <xPortStartScheduler+0x13c>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac88:	f000 f8fc 	bl	800ae84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac8c:	4b10      	ldr	r3, [pc, #64]	; (800acd0 <xPortStartScheduler+0x140>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a0f      	ldr	r2, [pc, #60]	; (800acd0 <xPortStartScheduler+0x140>)
 800ac92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac98:	f7ff ff66 	bl	800ab68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac9c:	f7fe fe34 	bl	8009908 <vTaskSwitchContext>
	prvTaskExitError();
 800aca0:	f7ff ff1c 	bl	800aadc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	e000ed00 	.word	0xe000ed00
 800acb4:	410fc271 	.word	0x410fc271
 800acb8:	410fc270 	.word	0x410fc270
 800acbc:	e000e400 	.word	0xe000e400
 800acc0:	20001054 	.word	0x20001054
 800acc4:	20001058 	.word	0x20001058
 800acc8:	e000ed20 	.word	0xe000ed20
 800accc:	2000000c 	.word	0x2000000c
 800acd0:	e000ef34 	.word	0xe000ef34

0800acd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	607b      	str	r3, [r7, #4]
}
 800acec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acee:	4b0f      	ldr	r3, [pc, #60]	; (800ad2c <vPortEnterCritical+0x58>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3301      	adds	r3, #1
 800acf4:	4a0d      	ldr	r2, [pc, #52]	; (800ad2c <vPortEnterCritical+0x58>)
 800acf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <vPortEnterCritical+0x58>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d10f      	bne.n	800ad20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad00:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <vPortEnterCritical+0x5c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	603b      	str	r3, [r7, #0]
}
 800ad1c:	bf00      	nop
 800ad1e:	e7fe      	b.n	800ad1e <vPortEnterCritical+0x4a>
	}
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	2000000c 	.word	0x2000000c
 800ad30:	e000ed04 	.word	0xe000ed04

0800ad34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad3a:	4b12      	ldr	r3, [pc, #72]	; (800ad84 <vPortExitCritical+0x50>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10a      	bne.n	800ad58 <vPortExitCritical+0x24>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	607b      	str	r3, [r7, #4]
}
 800ad54:	bf00      	nop
 800ad56:	e7fe      	b.n	800ad56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad58:	4b0a      	ldr	r3, [pc, #40]	; (800ad84 <vPortExitCritical+0x50>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	4a09      	ldr	r2, [pc, #36]	; (800ad84 <vPortExitCritical+0x50>)
 800ad60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad62:	4b08      	ldr	r3, [pc, #32]	; (800ad84 <vPortExitCritical+0x50>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d105      	bne.n	800ad76 <vPortExitCritical+0x42>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	f383 8811 	msr	BASEPRI, r3
}
 800ad74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad76:	bf00      	nop
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	2000000c 	.word	0x2000000c
	...

0800ad90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad90:	f3ef 8009 	mrs	r0, PSP
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	4b15      	ldr	r3, [pc, #84]	; (800adf0 <pxCurrentTCBConst>)
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	f01e 0f10 	tst.w	lr, #16
 800ada0:	bf08      	it	eq
 800ada2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ada6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adaa:	6010      	str	r0, [r2, #0]
 800adac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800adb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800adb4:	f380 8811 	msr	BASEPRI, r0
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f7fe fda2 	bl	8009908 <vTaskSwitchContext>
 800adc4:	f04f 0000 	mov.w	r0, #0
 800adc8:	f380 8811 	msr	BASEPRI, r0
 800adcc:	bc09      	pop	{r0, r3}
 800adce:	6819      	ldr	r1, [r3, #0]
 800add0:	6808      	ldr	r0, [r1, #0]
 800add2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add6:	f01e 0f10 	tst.w	lr, #16
 800adda:	bf08      	it	eq
 800addc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ade0:	f380 8809 	msr	PSP, r0
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	f3af 8000 	nop.w

0800adf0 <pxCurrentTCBConst>:
 800adf0:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop

0800adf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	607b      	str	r3, [r7, #4]
}
 800ae10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae12:	f7fe fcbf 	bl	8009794 <xTaskIncrementTick>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae1c:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <xPortSysTickHandler+0x40>)
 800ae1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	2300      	movs	r3, #0
 800ae26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	f383 8811 	msr	BASEPRI, r3
}
 800ae2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae40:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <vPortSetupTimerInterrupt+0x34>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <vPortSetupTimerInterrupt+0x38>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae4c:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <vPortSetupTimerInterrupt+0x3c>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a0a      	ldr	r2, [pc, #40]	; (800ae7c <vPortSetupTimerInterrupt+0x40>)
 800ae52:	fba2 2303 	umull	r2, r3, r2, r3
 800ae56:	099b      	lsrs	r3, r3, #6
 800ae58:	4a09      	ldr	r2, [pc, #36]	; (800ae80 <vPortSetupTimerInterrupt+0x44>)
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae5e:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <vPortSetupTimerInterrupt+0x34>)
 800ae60:	2207      	movs	r2, #7
 800ae62:	601a      	str	r2, [r3, #0]
}
 800ae64:	bf00      	nop
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	e000e010 	.word	0xe000e010
 800ae74:	e000e018 	.word	0xe000e018
 800ae78:	20000000 	.word	0x20000000
 800ae7c:	10624dd3 	.word	0x10624dd3
 800ae80:	e000e014 	.word	0xe000e014

0800ae84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae94 <vPortEnableVFP+0x10>
 800ae88:	6801      	ldr	r1, [r0, #0]
 800ae8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae8e:	6001      	str	r1, [r0, #0]
 800ae90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae92:	bf00      	nop
 800ae94:	e000ed88 	.word	0xe000ed88

0800ae98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae9e:	f3ef 8305 	mrs	r3, IPSR
 800aea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b0f      	cmp	r3, #15
 800aea8:	d914      	bls.n	800aed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aeaa:	4a17      	ldr	r2, [pc, #92]	; (800af08 <vPortValidateInterruptPriority+0x70>)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4413      	add	r3, r2
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aeb4:	4b15      	ldr	r3, [pc, #84]	; (800af0c <vPortValidateInterruptPriority+0x74>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	7afa      	ldrb	r2, [r7, #11]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d20a      	bcs.n	800aed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	607b      	str	r3, [r7, #4]
}
 800aed0:	bf00      	nop
 800aed2:	e7fe      	b.n	800aed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aed4:	4b0e      	ldr	r3, [pc, #56]	; (800af10 <vPortValidateInterruptPriority+0x78>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aedc:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <vPortValidateInterruptPriority+0x7c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d90a      	bls.n	800aefa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	603b      	str	r3, [r7, #0]
}
 800aef6:	bf00      	nop
 800aef8:	e7fe      	b.n	800aef8 <vPortValidateInterruptPriority+0x60>
	}
 800aefa:	bf00      	nop
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	e000e3f0 	.word	0xe000e3f0
 800af0c:	20001054 	.word	0x20001054
 800af10:	e000ed0c 	.word	0xe000ed0c
 800af14:	20001058 	.word	0x20001058

0800af18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08a      	sub	sp, #40	; 0x28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af20:	2300      	movs	r3, #0
 800af22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af24:	f7fe fb7a 	bl	800961c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af28:	4b5b      	ldr	r3, [pc, #364]	; (800b098 <pvPortMalloc+0x180>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af30:	f000 f920 	bl	800b174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af34:	4b59      	ldr	r3, [pc, #356]	; (800b09c <pvPortMalloc+0x184>)
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4013      	ands	r3, r2
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f040 8093 	bne.w	800b068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d01d      	beq.n	800af84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af48:	2208      	movs	r2, #8
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4413      	add	r3, r2
 800af4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	2b00      	cmp	r3, #0
 800af58:	d014      	beq.n	800af84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f023 0307 	bic.w	r3, r3, #7
 800af60:	3308      	adds	r3, #8
 800af62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f003 0307 	and.w	r3, r3, #7
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <pvPortMalloc+0x6c>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	617b      	str	r3, [r7, #20]
}
 800af80:	bf00      	nop
 800af82:	e7fe      	b.n	800af82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d06e      	beq.n	800b068 <pvPortMalloc+0x150>
 800af8a:	4b45      	ldr	r3, [pc, #276]	; (800b0a0 <pvPortMalloc+0x188>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d869      	bhi.n	800b068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af94:	4b43      	ldr	r3, [pc, #268]	; (800b0a4 <pvPortMalloc+0x18c>)
 800af96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af98:	4b42      	ldr	r3, [pc, #264]	; (800b0a4 <pvPortMalloc+0x18c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af9e:	e004      	b.n	800afaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d903      	bls.n	800afbc <pvPortMalloc+0xa4>
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1f1      	bne.n	800afa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afbc:	4b36      	ldr	r3, [pc, #216]	; (800b098 <pvPortMalloc+0x180>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d050      	beq.n	800b068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2208      	movs	r2, #8
 800afcc:	4413      	add	r3, r2
 800afce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	1ad2      	subs	r2, r2, r3
 800afe0:	2308      	movs	r3, #8
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d91f      	bls.n	800b028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4413      	add	r3, r2
 800afee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	f003 0307 	and.w	r3, r3, #7
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <pvPortMalloc+0xf8>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	613b      	str	r3, [r7, #16]
}
 800b00c:	bf00      	nop
 800b00e:	e7fe      	b.n	800b00e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	685a      	ldr	r2, [r3, #4]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	1ad2      	subs	r2, r2, r3
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b022:	69b8      	ldr	r0, [r7, #24]
 800b024:	f000 f908 	bl	800b238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b028:	4b1d      	ldr	r3, [pc, #116]	; (800b0a0 <pvPortMalloc+0x188>)
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	4a1b      	ldr	r2, [pc, #108]	; (800b0a0 <pvPortMalloc+0x188>)
 800b034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b036:	4b1a      	ldr	r3, [pc, #104]	; (800b0a0 <pvPortMalloc+0x188>)
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	4b1b      	ldr	r3, [pc, #108]	; (800b0a8 <pvPortMalloc+0x190>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d203      	bcs.n	800b04a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b042:	4b17      	ldr	r3, [pc, #92]	; (800b0a0 <pvPortMalloc+0x188>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a18      	ldr	r2, [pc, #96]	; (800b0a8 <pvPortMalloc+0x190>)
 800b048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	4b13      	ldr	r3, [pc, #76]	; (800b09c <pvPortMalloc+0x184>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	431a      	orrs	r2, r3
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b05e:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <pvPortMalloc+0x194>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	4a11      	ldr	r2, [pc, #68]	; (800b0ac <pvPortMalloc+0x194>)
 800b066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b068:	f7fe fae6 	bl	8009638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <pvPortMalloc+0x174>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	60fb      	str	r3, [r7, #12]
}
 800b088:	bf00      	nop
 800b08a:	e7fe      	b.n	800b08a <pvPortMalloc+0x172>
	return pvReturn;
 800b08c:	69fb      	ldr	r3, [r7, #28]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3728      	adds	r7, #40	; 0x28
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20001c64 	.word	0x20001c64
 800b09c:	20001c78 	.word	0x20001c78
 800b0a0:	20001c68 	.word	0x20001c68
 800b0a4:	20001c5c 	.word	0x20001c5c
 800b0a8:	20001c6c 	.word	0x20001c6c
 800b0ac:	20001c70 	.word	0x20001c70

0800b0b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d04d      	beq.n	800b15e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0c2:	2308      	movs	r3, #8
 800b0c4:	425b      	negs	r3, r3
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	4b24      	ldr	r3, [pc, #144]	; (800b168 <vPortFree+0xb8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4013      	ands	r3, r2
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10a      	bne.n	800b0f4 <vPortFree+0x44>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	60fb      	str	r3, [r7, #12]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00a      	beq.n	800b112 <vPortFree+0x62>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	60bb      	str	r3, [r7, #8]
}
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	685a      	ldr	r2, [r3, #4]
 800b116:	4b14      	ldr	r3, [pc, #80]	; (800b168 <vPortFree+0xb8>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4013      	ands	r3, r2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d01e      	beq.n	800b15e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d11a      	bne.n	800b15e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	4b0e      	ldr	r3, [pc, #56]	; (800b168 <vPortFree+0xb8>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	43db      	mvns	r3, r3
 800b132:	401a      	ands	r2, r3
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b138:	f7fe fa70 	bl	800961c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <vPortFree+0xbc>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4413      	add	r3, r2
 800b146:	4a09      	ldr	r2, [pc, #36]	; (800b16c <vPortFree+0xbc>)
 800b148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b14a:	6938      	ldr	r0, [r7, #16]
 800b14c:	f000 f874 	bl	800b238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <vPortFree+0xc0>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3301      	adds	r3, #1
 800b156:	4a06      	ldr	r2, [pc, #24]	; (800b170 <vPortFree+0xc0>)
 800b158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b15a:	f7fe fa6d 	bl	8009638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b15e:	bf00      	nop
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	20001c78 	.word	0x20001c78
 800b16c:	20001c68 	.word	0x20001c68
 800b170:	20001c74 	.word	0x20001c74

0800b174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b17a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b180:	4b27      	ldr	r3, [pc, #156]	; (800b220 <prvHeapInit+0xac>)
 800b182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00c      	beq.n	800b1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3307      	adds	r3, #7
 800b192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f023 0307 	bic.w	r3, r3, #7
 800b19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	4a1f      	ldr	r2, [pc, #124]	; (800b220 <prvHeapInit+0xac>)
 800b1a4:	4413      	add	r3, r2
 800b1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1ac:	4a1d      	ldr	r2, [pc, #116]	; (800b224 <prvHeapInit+0xb0>)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1b2:	4b1c      	ldr	r3, [pc, #112]	; (800b224 <prvHeapInit+0xb0>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	4413      	add	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f023 0307 	bic.w	r3, r3, #7
 800b1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <prvHeapInit+0xb4>)
 800b1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <prvHeapInit+0xb4>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1de:	4b12      	ldr	r3, [pc, #72]	; (800b228 <prvHeapInit+0xb4>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <prvHeapInit+0xb4>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <prvHeapInit+0xb8>)
 800b202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	4a09      	ldr	r2, [pc, #36]	; (800b230 <prvHeapInit+0xbc>)
 800b20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b20c:	4b09      	ldr	r3, [pc, #36]	; (800b234 <prvHeapInit+0xc0>)
 800b20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b212:	601a      	str	r2, [r3, #0]
}
 800b214:	bf00      	nop
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	2000105c 	.word	0x2000105c
 800b224:	20001c5c 	.word	0x20001c5c
 800b228:	20001c64 	.word	0x20001c64
 800b22c:	20001c6c 	.word	0x20001c6c
 800b230:	20001c68 	.word	0x20001c68
 800b234:	20001c78 	.word	0x20001c78

0800b238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b240:	4b28      	ldr	r3, [pc, #160]	; (800b2e4 <prvInsertBlockIntoFreeList+0xac>)
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	e002      	b.n	800b24c <prvInsertBlockIntoFreeList+0x14>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d8f7      	bhi.n	800b246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d108      	bne.n	800b27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	441a      	add	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d118      	bne.n	800b2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	d00d      	beq.n	800b2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e008      	b.n	800b2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	e003      	b.n	800b2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d002      	beq.n	800b2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20001c5c 	.word	0x20001c5c
 800b2e8:	20001c64 	.word	0x20001c64

0800b2ec <_ZdlPvj>:
 800b2ec:	f000 b800 	b.w	800b2f0 <_ZdlPv>

0800b2f0 <_ZdlPv>:
 800b2f0:	f000 b924 	b.w	800b53c <free>

0800b2f4 <__errno>:
 800b2f4:	4b01      	ldr	r3, [pc, #4]	; (800b2fc <__errno+0x8>)
 800b2f6:	6818      	ldr	r0, [r3, #0]
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	20000010 	.word	0x20000010

0800b300 <std>:
 800b300:	2300      	movs	r3, #0
 800b302:	b510      	push	{r4, lr}
 800b304:	4604      	mov	r4, r0
 800b306:	e9c0 3300 	strd	r3, r3, [r0]
 800b30a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b30e:	6083      	str	r3, [r0, #8]
 800b310:	8181      	strh	r1, [r0, #12]
 800b312:	6643      	str	r3, [r0, #100]	; 0x64
 800b314:	81c2      	strh	r2, [r0, #14]
 800b316:	6183      	str	r3, [r0, #24]
 800b318:	4619      	mov	r1, r3
 800b31a:	2208      	movs	r2, #8
 800b31c:	305c      	adds	r0, #92	; 0x5c
 800b31e:	f000 f923 	bl	800b568 <memset>
 800b322:	4b05      	ldr	r3, [pc, #20]	; (800b338 <std+0x38>)
 800b324:	6263      	str	r3, [r4, #36]	; 0x24
 800b326:	4b05      	ldr	r3, [pc, #20]	; (800b33c <std+0x3c>)
 800b328:	62a3      	str	r3, [r4, #40]	; 0x28
 800b32a:	4b05      	ldr	r3, [pc, #20]	; (800b340 <std+0x40>)
 800b32c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b32e:	4b05      	ldr	r3, [pc, #20]	; (800b344 <std+0x44>)
 800b330:	6224      	str	r4, [r4, #32]
 800b332:	6323      	str	r3, [r4, #48]	; 0x30
 800b334:	bd10      	pop	{r4, pc}
 800b336:	bf00      	nop
 800b338:	0800b8ad 	.word	0x0800b8ad
 800b33c:	0800b8cf 	.word	0x0800b8cf
 800b340:	0800b907 	.word	0x0800b907
 800b344:	0800b92b 	.word	0x0800b92b

0800b348 <_cleanup_r>:
 800b348:	4901      	ldr	r1, [pc, #4]	; (800b350 <_cleanup_r+0x8>)
 800b34a:	f000 b8af 	b.w	800b4ac <_fwalk_reent>
 800b34e:	bf00      	nop
 800b350:	0800bc31 	.word	0x0800bc31

0800b354 <__sfmoreglue>:
 800b354:	b570      	push	{r4, r5, r6, lr}
 800b356:	1e4a      	subs	r2, r1, #1
 800b358:	2568      	movs	r5, #104	; 0x68
 800b35a:	4355      	muls	r5, r2
 800b35c:	460e      	mov	r6, r1
 800b35e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b362:	f000 f959 	bl	800b618 <_malloc_r>
 800b366:	4604      	mov	r4, r0
 800b368:	b140      	cbz	r0, 800b37c <__sfmoreglue+0x28>
 800b36a:	2100      	movs	r1, #0
 800b36c:	e9c0 1600 	strd	r1, r6, [r0]
 800b370:	300c      	adds	r0, #12
 800b372:	60a0      	str	r0, [r4, #8]
 800b374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b378:	f000 f8f6 	bl	800b568 <memset>
 800b37c:	4620      	mov	r0, r4
 800b37e:	bd70      	pop	{r4, r5, r6, pc}

0800b380 <__sfp_lock_acquire>:
 800b380:	4801      	ldr	r0, [pc, #4]	; (800b388 <__sfp_lock_acquire+0x8>)
 800b382:	f000 b8d8 	b.w	800b536 <__retarget_lock_acquire_recursive>
 800b386:	bf00      	nop
 800b388:	20001d1c 	.word	0x20001d1c

0800b38c <__sfp_lock_release>:
 800b38c:	4801      	ldr	r0, [pc, #4]	; (800b394 <__sfp_lock_release+0x8>)
 800b38e:	f000 b8d3 	b.w	800b538 <__retarget_lock_release_recursive>
 800b392:	bf00      	nop
 800b394:	20001d1c 	.word	0x20001d1c

0800b398 <__sinit_lock_acquire>:
 800b398:	4801      	ldr	r0, [pc, #4]	; (800b3a0 <__sinit_lock_acquire+0x8>)
 800b39a:	f000 b8cc 	b.w	800b536 <__retarget_lock_acquire_recursive>
 800b39e:	bf00      	nop
 800b3a0:	20001d17 	.word	0x20001d17

0800b3a4 <__sinit_lock_release>:
 800b3a4:	4801      	ldr	r0, [pc, #4]	; (800b3ac <__sinit_lock_release+0x8>)
 800b3a6:	f000 b8c7 	b.w	800b538 <__retarget_lock_release_recursive>
 800b3aa:	bf00      	nop
 800b3ac:	20001d17 	.word	0x20001d17

0800b3b0 <__sinit>:
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	f7ff fff0 	bl	800b398 <__sinit_lock_acquire>
 800b3b8:	69a3      	ldr	r3, [r4, #24]
 800b3ba:	b11b      	cbz	r3, 800b3c4 <__sinit+0x14>
 800b3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c0:	f7ff bff0 	b.w	800b3a4 <__sinit_lock_release>
 800b3c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3c8:	6523      	str	r3, [r4, #80]	; 0x50
 800b3ca:	4b13      	ldr	r3, [pc, #76]	; (800b418 <__sinit+0x68>)
 800b3cc:	4a13      	ldr	r2, [pc, #76]	; (800b41c <__sinit+0x6c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	bf04      	itt	eq
 800b3d6:	2301      	moveq	r3, #1
 800b3d8:	61a3      	streq	r3, [r4, #24]
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 f820 	bl	800b420 <__sfp>
 800b3e0:	6060      	str	r0, [r4, #4]
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 f81c 	bl	800b420 <__sfp>
 800b3e8:	60a0      	str	r0, [r4, #8]
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 f818 	bl	800b420 <__sfp>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	60e0      	str	r0, [r4, #12]
 800b3f4:	2104      	movs	r1, #4
 800b3f6:	6860      	ldr	r0, [r4, #4]
 800b3f8:	f7ff ff82 	bl	800b300 <std>
 800b3fc:	68a0      	ldr	r0, [r4, #8]
 800b3fe:	2201      	movs	r2, #1
 800b400:	2109      	movs	r1, #9
 800b402:	f7ff ff7d 	bl	800b300 <std>
 800b406:	68e0      	ldr	r0, [r4, #12]
 800b408:	2202      	movs	r2, #2
 800b40a:	2112      	movs	r1, #18
 800b40c:	f7ff ff78 	bl	800b300 <std>
 800b410:	2301      	movs	r3, #1
 800b412:	61a3      	str	r3, [r4, #24]
 800b414:	e7d2      	b.n	800b3bc <__sinit+0xc>
 800b416:	bf00      	nop
 800b418:	0800bfe8 	.word	0x0800bfe8
 800b41c:	0800b349 	.word	0x0800b349

0800b420 <__sfp>:
 800b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b422:	4607      	mov	r7, r0
 800b424:	f7ff ffac 	bl	800b380 <__sfp_lock_acquire>
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <__sfp+0x84>)
 800b42a:	681e      	ldr	r6, [r3, #0]
 800b42c:	69b3      	ldr	r3, [r6, #24]
 800b42e:	b913      	cbnz	r3, 800b436 <__sfp+0x16>
 800b430:	4630      	mov	r0, r6
 800b432:	f7ff ffbd 	bl	800b3b0 <__sinit>
 800b436:	3648      	adds	r6, #72	; 0x48
 800b438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b43c:	3b01      	subs	r3, #1
 800b43e:	d503      	bpl.n	800b448 <__sfp+0x28>
 800b440:	6833      	ldr	r3, [r6, #0]
 800b442:	b30b      	cbz	r3, 800b488 <__sfp+0x68>
 800b444:	6836      	ldr	r6, [r6, #0]
 800b446:	e7f7      	b.n	800b438 <__sfp+0x18>
 800b448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b44c:	b9d5      	cbnz	r5, 800b484 <__sfp+0x64>
 800b44e:	4b16      	ldr	r3, [pc, #88]	; (800b4a8 <__sfp+0x88>)
 800b450:	60e3      	str	r3, [r4, #12]
 800b452:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b456:	6665      	str	r5, [r4, #100]	; 0x64
 800b458:	f000 f86c 	bl	800b534 <__retarget_lock_init_recursive>
 800b45c:	f7ff ff96 	bl	800b38c <__sfp_lock_release>
 800b460:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b464:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b468:	6025      	str	r5, [r4, #0]
 800b46a:	61a5      	str	r5, [r4, #24]
 800b46c:	2208      	movs	r2, #8
 800b46e:	4629      	mov	r1, r5
 800b470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b474:	f000 f878 	bl	800b568 <memset>
 800b478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b47c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b480:	4620      	mov	r0, r4
 800b482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b484:	3468      	adds	r4, #104	; 0x68
 800b486:	e7d9      	b.n	800b43c <__sfp+0x1c>
 800b488:	2104      	movs	r1, #4
 800b48a:	4638      	mov	r0, r7
 800b48c:	f7ff ff62 	bl	800b354 <__sfmoreglue>
 800b490:	4604      	mov	r4, r0
 800b492:	6030      	str	r0, [r6, #0]
 800b494:	2800      	cmp	r0, #0
 800b496:	d1d5      	bne.n	800b444 <__sfp+0x24>
 800b498:	f7ff ff78 	bl	800b38c <__sfp_lock_release>
 800b49c:	230c      	movs	r3, #12
 800b49e:	603b      	str	r3, [r7, #0]
 800b4a0:	e7ee      	b.n	800b480 <__sfp+0x60>
 800b4a2:	bf00      	nop
 800b4a4:	0800bfe8 	.word	0x0800bfe8
 800b4a8:	ffff0001 	.word	0xffff0001

0800b4ac <_fwalk_reent>:
 800b4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	4688      	mov	r8, r1
 800b4b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4b8:	2700      	movs	r7, #0
 800b4ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4be:	f1b9 0901 	subs.w	r9, r9, #1
 800b4c2:	d505      	bpl.n	800b4d0 <_fwalk_reent+0x24>
 800b4c4:	6824      	ldr	r4, [r4, #0]
 800b4c6:	2c00      	cmp	r4, #0
 800b4c8:	d1f7      	bne.n	800b4ba <_fwalk_reent+0xe>
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d0:	89ab      	ldrh	r3, [r5, #12]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d907      	bls.n	800b4e6 <_fwalk_reent+0x3a>
 800b4d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	d003      	beq.n	800b4e6 <_fwalk_reent+0x3a>
 800b4de:	4629      	mov	r1, r5
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	47c0      	blx	r8
 800b4e4:	4307      	orrs	r7, r0
 800b4e6:	3568      	adds	r5, #104	; 0x68
 800b4e8:	e7e9      	b.n	800b4be <_fwalk_reent+0x12>
	...

0800b4ec <__libc_init_array>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	4d0d      	ldr	r5, [pc, #52]	; (800b524 <__libc_init_array+0x38>)
 800b4f0:	4c0d      	ldr	r4, [pc, #52]	; (800b528 <__libc_init_array+0x3c>)
 800b4f2:	1b64      	subs	r4, r4, r5
 800b4f4:	10a4      	asrs	r4, r4, #2
 800b4f6:	2600      	movs	r6, #0
 800b4f8:	42a6      	cmp	r6, r4
 800b4fa:	d109      	bne.n	800b510 <__libc_init_array+0x24>
 800b4fc:	4d0b      	ldr	r5, [pc, #44]	; (800b52c <__libc_init_array+0x40>)
 800b4fe:	4c0c      	ldr	r4, [pc, #48]	; (800b530 <__libc_init_array+0x44>)
 800b500:	f000 fc88 	bl	800be14 <_init>
 800b504:	1b64      	subs	r4, r4, r5
 800b506:	10a4      	asrs	r4, r4, #2
 800b508:	2600      	movs	r6, #0
 800b50a:	42a6      	cmp	r6, r4
 800b50c:	d105      	bne.n	800b51a <__libc_init_array+0x2e>
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	f855 3b04 	ldr.w	r3, [r5], #4
 800b514:	4798      	blx	r3
 800b516:	3601      	adds	r6, #1
 800b518:	e7ee      	b.n	800b4f8 <__libc_init_array+0xc>
 800b51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b51e:	4798      	blx	r3
 800b520:	3601      	adds	r6, #1
 800b522:	e7f2      	b.n	800b50a <__libc_init_array+0x1e>
 800b524:	0800bff4 	.word	0x0800bff4
 800b528:	0800bff4 	.word	0x0800bff4
 800b52c:	0800bff4 	.word	0x0800bff4
 800b530:	0800bffc 	.word	0x0800bffc

0800b534 <__retarget_lock_init_recursive>:
 800b534:	4770      	bx	lr

0800b536 <__retarget_lock_acquire_recursive>:
 800b536:	4770      	bx	lr

0800b538 <__retarget_lock_release_recursive>:
 800b538:	4770      	bx	lr
	...

0800b53c <free>:
 800b53c:	4b02      	ldr	r3, [pc, #8]	; (800b548 <free+0xc>)
 800b53e:	4601      	mov	r1, r0
 800b540:	6818      	ldr	r0, [r3, #0]
 800b542:	f000 b819 	b.w	800b578 <_free_r>
 800b546:	bf00      	nop
 800b548:	20000010 	.word	0x20000010

0800b54c <memcpy>:
 800b54c:	440a      	add	r2, r1
 800b54e:	4291      	cmp	r1, r2
 800b550:	f100 33ff 	add.w	r3, r0, #4294967295
 800b554:	d100      	bne.n	800b558 <memcpy+0xc>
 800b556:	4770      	bx	lr
 800b558:	b510      	push	{r4, lr}
 800b55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b562:	4291      	cmp	r1, r2
 800b564:	d1f9      	bne.n	800b55a <memcpy+0xe>
 800b566:	bd10      	pop	{r4, pc}

0800b568 <memset>:
 800b568:	4402      	add	r2, r0
 800b56a:	4603      	mov	r3, r0
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d100      	bne.n	800b572 <memset+0xa>
 800b570:	4770      	bx	lr
 800b572:	f803 1b01 	strb.w	r1, [r3], #1
 800b576:	e7f9      	b.n	800b56c <memset+0x4>

0800b578 <_free_r>:
 800b578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b57a:	2900      	cmp	r1, #0
 800b57c:	d048      	beq.n	800b610 <_free_r+0x98>
 800b57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b582:	9001      	str	r0, [sp, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f1a1 0404 	sub.w	r4, r1, #4
 800b58a:	bfb8      	it	lt
 800b58c:	18e4      	addlt	r4, r4, r3
 800b58e:	f000 fc01 	bl	800bd94 <__malloc_lock>
 800b592:	4a20      	ldr	r2, [pc, #128]	; (800b614 <_free_r+0x9c>)
 800b594:	9801      	ldr	r0, [sp, #4]
 800b596:	6813      	ldr	r3, [r2, #0]
 800b598:	4615      	mov	r5, r2
 800b59a:	b933      	cbnz	r3, 800b5aa <_free_r+0x32>
 800b59c:	6063      	str	r3, [r4, #4]
 800b59e:	6014      	str	r4, [r2, #0]
 800b5a0:	b003      	add	sp, #12
 800b5a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5a6:	f000 bbfb 	b.w	800bda0 <__malloc_unlock>
 800b5aa:	42a3      	cmp	r3, r4
 800b5ac:	d90b      	bls.n	800b5c6 <_free_r+0x4e>
 800b5ae:	6821      	ldr	r1, [r4, #0]
 800b5b0:	1862      	adds	r2, r4, r1
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	bf04      	itt	eq
 800b5b6:	681a      	ldreq	r2, [r3, #0]
 800b5b8:	685b      	ldreq	r3, [r3, #4]
 800b5ba:	6063      	str	r3, [r4, #4]
 800b5bc:	bf04      	itt	eq
 800b5be:	1852      	addeq	r2, r2, r1
 800b5c0:	6022      	streq	r2, [r4, #0]
 800b5c2:	602c      	str	r4, [r5, #0]
 800b5c4:	e7ec      	b.n	800b5a0 <_free_r+0x28>
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	b10b      	cbz	r3, 800b5d0 <_free_r+0x58>
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	d9fa      	bls.n	800b5c6 <_free_r+0x4e>
 800b5d0:	6811      	ldr	r1, [r2, #0]
 800b5d2:	1855      	adds	r5, r2, r1
 800b5d4:	42a5      	cmp	r5, r4
 800b5d6:	d10b      	bne.n	800b5f0 <_free_r+0x78>
 800b5d8:	6824      	ldr	r4, [r4, #0]
 800b5da:	4421      	add	r1, r4
 800b5dc:	1854      	adds	r4, r2, r1
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	6011      	str	r1, [r2, #0]
 800b5e2:	d1dd      	bne.n	800b5a0 <_free_r+0x28>
 800b5e4:	681c      	ldr	r4, [r3, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	6053      	str	r3, [r2, #4]
 800b5ea:	4421      	add	r1, r4
 800b5ec:	6011      	str	r1, [r2, #0]
 800b5ee:	e7d7      	b.n	800b5a0 <_free_r+0x28>
 800b5f0:	d902      	bls.n	800b5f8 <_free_r+0x80>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	6003      	str	r3, [r0, #0]
 800b5f6:	e7d3      	b.n	800b5a0 <_free_r+0x28>
 800b5f8:	6825      	ldr	r5, [r4, #0]
 800b5fa:	1961      	adds	r1, r4, r5
 800b5fc:	428b      	cmp	r3, r1
 800b5fe:	bf04      	itt	eq
 800b600:	6819      	ldreq	r1, [r3, #0]
 800b602:	685b      	ldreq	r3, [r3, #4]
 800b604:	6063      	str	r3, [r4, #4]
 800b606:	bf04      	itt	eq
 800b608:	1949      	addeq	r1, r1, r5
 800b60a:	6021      	streq	r1, [r4, #0]
 800b60c:	6054      	str	r4, [r2, #4]
 800b60e:	e7c7      	b.n	800b5a0 <_free_r+0x28>
 800b610:	b003      	add	sp, #12
 800b612:	bd30      	pop	{r4, r5, pc}
 800b614:	20001c7c 	.word	0x20001c7c

0800b618 <_malloc_r>:
 800b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61a:	1ccd      	adds	r5, r1, #3
 800b61c:	f025 0503 	bic.w	r5, r5, #3
 800b620:	3508      	adds	r5, #8
 800b622:	2d0c      	cmp	r5, #12
 800b624:	bf38      	it	cc
 800b626:	250c      	movcc	r5, #12
 800b628:	2d00      	cmp	r5, #0
 800b62a:	4606      	mov	r6, r0
 800b62c:	db01      	blt.n	800b632 <_malloc_r+0x1a>
 800b62e:	42a9      	cmp	r1, r5
 800b630:	d903      	bls.n	800b63a <_malloc_r+0x22>
 800b632:	230c      	movs	r3, #12
 800b634:	6033      	str	r3, [r6, #0]
 800b636:	2000      	movs	r0, #0
 800b638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b63a:	f000 fbab 	bl	800bd94 <__malloc_lock>
 800b63e:	4921      	ldr	r1, [pc, #132]	; (800b6c4 <_malloc_r+0xac>)
 800b640:	680a      	ldr	r2, [r1, #0]
 800b642:	4614      	mov	r4, r2
 800b644:	b99c      	cbnz	r4, 800b66e <_malloc_r+0x56>
 800b646:	4f20      	ldr	r7, [pc, #128]	; (800b6c8 <_malloc_r+0xb0>)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	b923      	cbnz	r3, 800b656 <_malloc_r+0x3e>
 800b64c:	4621      	mov	r1, r4
 800b64e:	4630      	mov	r0, r6
 800b650:	f000 f91c 	bl	800b88c <_sbrk_r>
 800b654:	6038      	str	r0, [r7, #0]
 800b656:	4629      	mov	r1, r5
 800b658:	4630      	mov	r0, r6
 800b65a:	f000 f917 	bl	800b88c <_sbrk_r>
 800b65e:	1c43      	adds	r3, r0, #1
 800b660:	d123      	bne.n	800b6aa <_malloc_r+0x92>
 800b662:	230c      	movs	r3, #12
 800b664:	6033      	str	r3, [r6, #0]
 800b666:	4630      	mov	r0, r6
 800b668:	f000 fb9a 	bl	800bda0 <__malloc_unlock>
 800b66c:	e7e3      	b.n	800b636 <_malloc_r+0x1e>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	1b5b      	subs	r3, r3, r5
 800b672:	d417      	bmi.n	800b6a4 <_malloc_r+0x8c>
 800b674:	2b0b      	cmp	r3, #11
 800b676:	d903      	bls.n	800b680 <_malloc_r+0x68>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	441c      	add	r4, r3
 800b67c:	6025      	str	r5, [r4, #0]
 800b67e:	e004      	b.n	800b68a <_malloc_r+0x72>
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	42a2      	cmp	r2, r4
 800b684:	bf0c      	ite	eq
 800b686:	600b      	streq	r3, [r1, #0]
 800b688:	6053      	strne	r3, [r2, #4]
 800b68a:	4630      	mov	r0, r6
 800b68c:	f000 fb88 	bl	800bda0 <__malloc_unlock>
 800b690:	f104 000b 	add.w	r0, r4, #11
 800b694:	1d23      	adds	r3, r4, #4
 800b696:	f020 0007 	bic.w	r0, r0, #7
 800b69a:	1ac2      	subs	r2, r0, r3
 800b69c:	d0cc      	beq.n	800b638 <_malloc_r+0x20>
 800b69e:	1a1b      	subs	r3, r3, r0
 800b6a0:	50a3      	str	r3, [r4, r2]
 800b6a2:	e7c9      	b.n	800b638 <_malloc_r+0x20>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	6864      	ldr	r4, [r4, #4]
 800b6a8:	e7cc      	b.n	800b644 <_malloc_r+0x2c>
 800b6aa:	1cc4      	adds	r4, r0, #3
 800b6ac:	f024 0403 	bic.w	r4, r4, #3
 800b6b0:	42a0      	cmp	r0, r4
 800b6b2:	d0e3      	beq.n	800b67c <_malloc_r+0x64>
 800b6b4:	1a21      	subs	r1, r4, r0
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f000 f8e8 	bl	800b88c <_sbrk_r>
 800b6bc:	3001      	adds	r0, #1
 800b6be:	d1dd      	bne.n	800b67c <_malloc_r+0x64>
 800b6c0:	e7cf      	b.n	800b662 <_malloc_r+0x4a>
 800b6c2:	bf00      	nop
 800b6c4:	20001c7c 	.word	0x20001c7c
 800b6c8:	20001c80 	.word	0x20001c80

0800b6cc <_puts_r>:
 800b6cc:	b570      	push	{r4, r5, r6, lr}
 800b6ce:	460e      	mov	r6, r1
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	b118      	cbz	r0, 800b6dc <_puts_r+0x10>
 800b6d4:	6983      	ldr	r3, [r0, #24]
 800b6d6:	b90b      	cbnz	r3, 800b6dc <_puts_r+0x10>
 800b6d8:	f7ff fe6a 	bl	800b3b0 <__sinit>
 800b6dc:	69ab      	ldr	r3, [r5, #24]
 800b6de:	68ac      	ldr	r4, [r5, #8]
 800b6e0:	b913      	cbnz	r3, 800b6e8 <_puts_r+0x1c>
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f7ff fe64 	bl	800b3b0 <__sinit>
 800b6e8:	4b2c      	ldr	r3, [pc, #176]	; (800b79c <_puts_r+0xd0>)
 800b6ea:	429c      	cmp	r4, r3
 800b6ec:	d120      	bne.n	800b730 <_puts_r+0x64>
 800b6ee:	686c      	ldr	r4, [r5, #4]
 800b6f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6f2:	07db      	lsls	r3, r3, #31
 800b6f4:	d405      	bmi.n	800b702 <_puts_r+0x36>
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	0598      	lsls	r0, r3, #22
 800b6fa:	d402      	bmi.n	800b702 <_puts_r+0x36>
 800b6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6fe:	f7ff ff1a 	bl	800b536 <__retarget_lock_acquire_recursive>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	0719      	lsls	r1, r3, #28
 800b706:	d51d      	bpl.n	800b744 <_puts_r+0x78>
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	b1db      	cbz	r3, 800b744 <_puts_r+0x78>
 800b70c:	3e01      	subs	r6, #1
 800b70e:	68a3      	ldr	r3, [r4, #8]
 800b710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b714:	3b01      	subs	r3, #1
 800b716:	60a3      	str	r3, [r4, #8]
 800b718:	bb39      	cbnz	r1, 800b76a <_puts_r+0x9e>
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	da38      	bge.n	800b790 <_puts_r+0xc4>
 800b71e:	4622      	mov	r2, r4
 800b720:	210a      	movs	r1, #10
 800b722:	4628      	mov	r0, r5
 800b724:	f000 f91c 	bl	800b960 <__swbuf_r>
 800b728:	3001      	adds	r0, #1
 800b72a:	d011      	beq.n	800b750 <_puts_r+0x84>
 800b72c:	250a      	movs	r5, #10
 800b72e:	e011      	b.n	800b754 <_puts_r+0x88>
 800b730:	4b1b      	ldr	r3, [pc, #108]	; (800b7a0 <_puts_r+0xd4>)
 800b732:	429c      	cmp	r4, r3
 800b734:	d101      	bne.n	800b73a <_puts_r+0x6e>
 800b736:	68ac      	ldr	r4, [r5, #8]
 800b738:	e7da      	b.n	800b6f0 <_puts_r+0x24>
 800b73a:	4b1a      	ldr	r3, [pc, #104]	; (800b7a4 <_puts_r+0xd8>)
 800b73c:	429c      	cmp	r4, r3
 800b73e:	bf08      	it	eq
 800b740:	68ec      	ldreq	r4, [r5, #12]
 800b742:	e7d5      	b.n	800b6f0 <_puts_r+0x24>
 800b744:	4621      	mov	r1, r4
 800b746:	4628      	mov	r0, r5
 800b748:	f000 f96e 	bl	800ba28 <__swsetup_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d0dd      	beq.n	800b70c <_puts_r+0x40>
 800b750:	f04f 35ff 	mov.w	r5, #4294967295
 800b754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b756:	07da      	lsls	r2, r3, #31
 800b758:	d405      	bmi.n	800b766 <_puts_r+0x9a>
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	059b      	lsls	r3, r3, #22
 800b75e:	d402      	bmi.n	800b766 <_puts_r+0x9a>
 800b760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b762:	f7ff fee9 	bl	800b538 <__retarget_lock_release_recursive>
 800b766:	4628      	mov	r0, r5
 800b768:	bd70      	pop	{r4, r5, r6, pc}
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da04      	bge.n	800b778 <_puts_r+0xac>
 800b76e:	69a2      	ldr	r2, [r4, #24]
 800b770:	429a      	cmp	r2, r3
 800b772:	dc06      	bgt.n	800b782 <_puts_r+0xb6>
 800b774:	290a      	cmp	r1, #10
 800b776:	d004      	beq.n	800b782 <_puts_r+0xb6>
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	6022      	str	r2, [r4, #0]
 800b77e:	7019      	strb	r1, [r3, #0]
 800b780:	e7c5      	b.n	800b70e <_puts_r+0x42>
 800b782:	4622      	mov	r2, r4
 800b784:	4628      	mov	r0, r5
 800b786:	f000 f8eb 	bl	800b960 <__swbuf_r>
 800b78a:	3001      	adds	r0, #1
 800b78c:	d1bf      	bne.n	800b70e <_puts_r+0x42>
 800b78e:	e7df      	b.n	800b750 <_puts_r+0x84>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	250a      	movs	r5, #10
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	6022      	str	r2, [r4, #0]
 800b798:	701d      	strb	r5, [r3, #0]
 800b79a:	e7db      	b.n	800b754 <_puts_r+0x88>
 800b79c:	0800bfa8 	.word	0x0800bfa8
 800b7a0:	0800bfc8 	.word	0x0800bfc8
 800b7a4:	0800bf88 	.word	0x0800bf88

0800b7a8 <puts>:
 800b7a8:	4b02      	ldr	r3, [pc, #8]	; (800b7b4 <puts+0xc>)
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	6818      	ldr	r0, [r3, #0]
 800b7ae:	f7ff bf8d 	b.w	800b6cc <_puts_r>
 800b7b2:	bf00      	nop
 800b7b4:	20000010 	.word	0x20000010

0800b7b8 <cleanup_glue>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	6809      	ldr	r1, [r1, #0]
 800b7be:	4605      	mov	r5, r0
 800b7c0:	b109      	cbz	r1, 800b7c6 <cleanup_glue+0xe>
 800b7c2:	f7ff fff9 	bl	800b7b8 <cleanup_glue>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ce:	f7ff bed3 	b.w	800b578 <_free_r>
	...

0800b7d4 <_reclaim_reent>:
 800b7d4:	4b2c      	ldr	r3, [pc, #176]	; (800b888 <_reclaim_reent+0xb4>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4283      	cmp	r3, r0
 800b7da:	b570      	push	{r4, r5, r6, lr}
 800b7dc:	4604      	mov	r4, r0
 800b7de:	d051      	beq.n	800b884 <_reclaim_reent+0xb0>
 800b7e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b7e2:	b143      	cbz	r3, 800b7f6 <_reclaim_reent+0x22>
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d14a      	bne.n	800b880 <_reclaim_reent+0xac>
 800b7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ec:	6819      	ldr	r1, [r3, #0]
 800b7ee:	b111      	cbz	r1, 800b7f6 <_reclaim_reent+0x22>
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7ff fec1 	bl	800b578 <_free_r>
 800b7f6:	6961      	ldr	r1, [r4, #20]
 800b7f8:	b111      	cbz	r1, 800b800 <_reclaim_reent+0x2c>
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f7ff febc 	bl	800b578 <_free_r>
 800b800:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b802:	b111      	cbz	r1, 800b80a <_reclaim_reent+0x36>
 800b804:	4620      	mov	r0, r4
 800b806:	f7ff feb7 	bl	800b578 <_free_r>
 800b80a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b80c:	b111      	cbz	r1, 800b814 <_reclaim_reent+0x40>
 800b80e:	4620      	mov	r0, r4
 800b810:	f7ff feb2 	bl	800b578 <_free_r>
 800b814:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b816:	b111      	cbz	r1, 800b81e <_reclaim_reent+0x4a>
 800b818:	4620      	mov	r0, r4
 800b81a:	f7ff fead 	bl	800b578 <_free_r>
 800b81e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b820:	b111      	cbz	r1, 800b828 <_reclaim_reent+0x54>
 800b822:	4620      	mov	r0, r4
 800b824:	f7ff fea8 	bl	800b578 <_free_r>
 800b828:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b82a:	b111      	cbz	r1, 800b832 <_reclaim_reent+0x5e>
 800b82c:	4620      	mov	r0, r4
 800b82e:	f7ff fea3 	bl	800b578 <_free_r>
 800b832:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b834:	b111      	cbz	r1, 800b83c <_reclaim_reent+0x68>
 800b836:	4620      	mov	r0, r4
 800b838:	f7ff fe9e 	bl	800b578 <_free_r>
 800b83c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b83e:	b111      	cbz	r1, 800b846 <_reclaim_reent+0x72>
 800b840:	4620      	mov	r0, r4
 800b842:	f7ff fe99 	bl	800b578 <_free_r>
 800b846:	69a3      	ldr	r3, [r4, #24]
 800b848:	b1e3      	cbz	r3, 800b884 <_reclaim_reent+0xb0>
 800b84a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b84c:	4620      	mov	r0, r4
 800b84e:	4798      	blx	r3
 800b850:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b852:	b1b9      	cbz	r1, 800b884 <_reclaim_reent+0xb0>
 800b854:	4620      	mov	r0, r4
 800b856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b85a:	f7ff bfad 	b.w	800b7b8 <cleanup_glue>
 800b85e:	5949      	ldr	r1, [r1, r5]
 800b860:	b941      	cbnz	r1, 800b874 <_reclaim_reent+0xa0>
 800b862:	3504      	adds	r5, #4
 800b864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b866:	2d80      	cmp	r5, #128	; 0x80
 800b868:	68d9      	ldr	r1, [r3, #12]
 800b86a:	d1f8      	bne.n	800b85e <_reclaim_reent+0x8a>
 800b86c:	4620      	mov	r0, r4
 800b86e:	f7ff fe83 	bl	800b578 <_free_r>
 800b872:	e7ba      	b.n	800b7ea <_reclaim_reent+0x16>
 800b874:	680e      	ldr	r6, [r1, #0]
 800b876:	4620      	mov	r0, r4
 800b878:	f7ff fe7e 	bl	800b578 <_free_r>
 800b87c:	4631      	mov	r1, r6
 800b87e:	e7ef      	b.n	800b860 <_reclaim_reent+0x8c>
 800b880:	2500      	movs	r5, #0
 800b882:	e7ef      	b.n	800b864 <_reclaim_reent+0x90>
 800b884:	bd70      	pop	{r4, r5, r6, pc}
 800b886:	bf00      	nop
 800b888:	20000010 	.word	0x20000010

0800b88c <_sbrk_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d06      	ldr	r5, [pc, #24]	; (800b8a8 <_sbrk_r+0x1c>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	602b      	str	r3, [r5, #0]
 800b898:	f7f6 f984 	bl	8001ba4 <_sbrk>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d102      	bne.n	800b8a6 <_sbrk_r+0x1a>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	b103      	cbz	r3, 800b8a6 <_sbrk_r+0x1a>
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	20001d20 	.word	0x20001d20

0800b8ac <__sread>:
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b4:	f000 fa7a 	bl	800bdac <_read_r>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	bfab      	itete	ge
 800b8bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8be:	89a3      	ldrhlt	r3, [r4, #12]
 800b8c0:	181b      	addge	r3, r3, r0
 800b8c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8c6:	bfac      	ite	ge
 800b8c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8ca:	81a3      	strhlt	r3, [r4, #12]
 800b8cc:	bd10      	pop	{r4, pc}

0800b8ce <__swrite>:
 800b8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d2:	461f      	mov	r7, r3
 800b8d4:	898b      	ldrh	r3, [r1, #12]
 800b8d6:	05db      	lsls	r3, r3, #23
 800b8d8:	4605      	mov	r5, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	4616      	mov	r6, r2
 800b8de:	d505      	bpl.n	800b8ec <__swrite+0x1e>
 800b8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f000 f9de 	bl	800bca8 <_lseek_r>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	4632      	mov	r2, r6
 800b8fa:	463b      	mov	r3, r7
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b902:	f000 b87f 	b.w	800ba04 <_write_r>

0800b906 <__sseek>:
 800b906:	b510      	push	{r4, lr}
 800b908:	460c      	mov	r4, r1
 800b90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b90e:	f000 f9cb 	bl	800bca8 <_lseek_r>
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	bf15      	itete	ne
 800b918:	6560      	strne	r0, [r4, #84]	; 0x54
 800b91a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b91e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b922:	81a3      	strheq	r3, [r4, #12]
 800b924:	bf18      	it	ne
 800b926:	81a3      	strhne	r3, [r4, #12]
 800b928:	bd10      	pop	{r4, pc}

0800b92a <__sclose>:
 800b92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b92e:	f000 b8e9 	b.w	800bb04 <_close_r>

0800b932 <strcat>:
 800b932:	b510      	push	{r4, lr}
 800b934:	4602      	mov	r2, r0
 800b936:	7814      	ldrb	r4, [r2, #0]
 800b938:	4613      	mov	r3, r2
 800b93a:	3201      	adds	r2, #1
 800b93c:	2c00      	cmp	r4, #0
 800b93e:	d1fa      	bne.n	800b936 <strcat+0x4>
 800b940:	3b01      	subs	r3, #1
 800b942:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	d1f9      	bne.n	800b942 <strcat+0x10>
 800b94e:	bd10      	pop	{r4, pc}

0800b950 <strcpy>:
 800b950:	4603      	mov	r3, r0
 800b952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b956:	f803 2b01 	strb.w	r2, [r3], #1
 800b95a:	2a00      	cmp	r2, #0
 800b95c:	d1f9      	bne.n	800b952 <strcpy+0x2>
 800b95e:	4770      	bx	lr

0800b960 <__swbuf_r>:
 800b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b962:	460e      	mov	r6, r1
 800b964:	4614      	mov	r4, r2
 800b966:	4605      	mov	r5, r0
 800b968:	b118      	cbz	r0, 800b972 <__swbuf_r+0x12>
 800b96a:	6983      	ldr	r3, [r0, #24]
 800b96c:	b90b      	cbnz	r3, 800b972 <__swbuf_r+0x12>
 800b96e:	f7ff fd1f 	bl	800b3b0 <__sinit>
 800b972:	4b21      	ldr	r3, [pc, #132]	; (800b9f8 <__swbuf_r+0x98>)
 800b974:	429c      	cmp	r4, r3
 800b976:	d12b      	bne.n	800b9d0 <__swbuf_r+0x70>
 800b978:	686c      	ldr	r4, [r5, #4]
 800b97a:	69a3      	ldr	r3, [r4, #24]
 800b97c:	60a3      	str	r3, [r4, #8]
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	071a      	lsls	r2, r3, #28
 800b982:	d52f      	bpl.n	800b9e4 <__swbuf_r+0x84>
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	b36b      	cbz	r3, 800b9e4 <__swbuf_r+0x84>
 800b988:	6923      	ldr	r3, [r4, #16]
 800b98a:	6820      	ldr	r0, [r4, #0]
 800b98c:	1ac0      	subs	r0, r0, r3
 800b98e:	6963      	ldr	r3, [r4, #20]
 800b990:	b2f6      	uxtb	r6, r6
 800b992:	4283      	cmp	r3, r0
 800b994:	4637      	mov	r7, r6
 800b996:	dc04      	bgt.n	800b9a2 <__swbuf_r+0x42>
 800b998:	4621      	mov	r1, r4
 800b99a:	4628      	mov	r0, r5
 800b99c:	f000 f948 	bl	800bc30 <_fflush_r>
 800b9a0:	bb30      	cbnz	r0, 800b9f0 <__swbuf_r+0x90>
 800b9a2:	68a3      	ldr	r3, [r4, #8]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	60a3      	str	r3, [r4, #8]
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	6022      	str	r2, [r4, #0]
 800b9ae:	701e      	strb	r6, [r3, #0]
 800b9b0:	6963      	ldr	r3, [r4, #20]
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	4283      	cmp	r3, r0
 800b9b6:	d004      	beq.n	800b9c2 <__swbuf_r+0x62>
 800b9b8:	89a3      	ldrh	r3, [r4, #12]
 800b9ba:	07db      	lsls	r3, r3, #31
 800b9bc:	d506      	bpl.n	800b9cc <__swbuf_r+0x6c>
 800b9be:	2e0a      	cmp	r6, #10
 800b9c0:	d104      	bne.n	800b9cc <__swbuf_r+0x6c>
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	f000 f933 	bl	800bc30 <_fflush_r>
 800b9ca:	b988      	cbnz	r0, 800b9f0 <__swbuf_r+0x90>
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <__swbuf_r+0x9c>)
 800b9d2:	429c      	cmp	r4, r3
 800b9d4:	d101      	bne.n	800b9da <__swbuf_r+0x7a>
 800b9d6:	68ac      	ldr	r4, [r5, #8]
 800b9d8:	e7cf      	b.n	800b97a <__swbuf_r+0x1a>
 800b9da:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <__swbuf_r+0xa0>)
 800b9dc:	429c      	cmp	r4, r3
 800b9de:	bf08      	it	eq
 800b9e0:	68ec      	ldreq	r4, [r5, #12]
 800b9e2:	e7ca      	b.n	800b97a <__swbuf_r+0x1a>
 800b9e4:	4621      	mov	r1, r4
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f000 f81e 	bl	800ba28 <__swsetup_r>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d0cb      	beq.n	800b988 <__swbuf_r+0x28>
 800b9f0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9f4:	e7ea      	b.n	800b9cc <__swbuf_r+0x6c>
 800b9f6:	bf00      	nop
 800b9f8:	0800bfa8 	.word	0x0800bfa8
 800b9fc:	0800bfc8 	.word	0x0800bfc8
 800ba00:	0800bf88 	.word	0x0800bf88

0800ba04 <_write_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d07      	ldr	r5, [pc, #28]	; (800ba24 <_write_r+0x20>)
 800ba08:	4604      	mov	r4, r0
 800ba0a:	4608      	mov	r0, r1
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	2200      	movs	r2, #0
 800ba10:	602a      	str	r2, [r5, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	f7f5 f9be 	bl	8000d94 <_write>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d102      	bne.n	800ba22 <_write_r+0x1e>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	b103      	cbz	r3, 800ba22 <_write_r+0x1e>
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
 800ba24:	20001d20 	.word	0x20001d20

0800ba28 <__swsetup_r>:
 800ba28:	4b32      	ldr	r3, [pc, #200]	; (800baf4 <__swsetup_r+0xcc>)
 800ba2a:	b570      	push	{r4, r5, r6, lr}
 800ba2c:	681d      	ldr	r5, [r3, #0]
 800ba2e:	4606      	mov	r6, r0
 800ba30:	460c      	mov	r4, r1
 800ba32:	b125      	cbz	r5, 800ba3e <__swsetup_r+0x16>
 800ba34:	69ab      	ldr	r3, [r5, #24]
 800ba36:	b913      	cbnz	r3, 800ba3e <__swsetup_r+0x16>
 800ba38:	4628      	mov	r0, r5
 800ba3a:	f7ff fcb9 	bl	800b3b0 <__sinit>
 800ba3e:	4b2e      	ldr	r3, [pc, #184]	; (800baf8 <__swsetup_r+0xd0>)
 800ba40:	429c      	cmp	r4, r3
 800ba42:	d10f      	bne.n	800ba64 <__swsetup_r+0x3c>
 800ba44:	686c      	ldr	r4, [r5, #4]
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba4c:	0719      	lsls	r1, r3, #28
 800ba4e:	d42c      	bmi.n	800baaa <__swsetup_r+0x82>
 800ba50:	06dd      	lsls	r5, r3, #27
 800ba52:	d411      	bmi.n	800ba78 <__swsetup_r+0x50>
 800ba54:	2309      	movs	r3, #9
 800ba56:	6033      	str	r3, [r6, #0]
 800ba58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba5c:	81a3      	strh	r3, [r4, #12]
 800ba5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba62:	e03e      	b.n	800bae2 <__swsetup_r+0xba>
 800ba64:	4b25      	ldr	r3, [pc, #148]	; (800bafc <__swsetup_r+0xd4>)
 800ba66:	429c      	cmp	r4, r3
 800ba68:	d101      	bne.n	800ba6e <__swsetup_r+0x46>
 800ba6a:	68ac      	ldr	r4, [r5, #8]
 800ba6c:	e7eb      	b.n	800ba46 <__swsetup_r+0x1e>
 800ba6e:	4b24      	ldr	r3, [pc, #144]	; (800bb00 <__swsetup_r+0xd8>)
 800ba70:	429c      	cmp	r4, r3
 800ba72:	bf08      	it	eq
 800ba74:	68ec      	ldreq	r4, [r5, #12]
 800ba76:	e7e6      	b.n	800ba46 <__swsetup_r+0x1e>
 800ba78:	0758      	lsls	r0, r3, #29
 800ba7a:	d512      	bpl.n	800baa2 <__swsetup_r+0x7a>
 800ba7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba7e:	b141      	cbz	r1, 800ba92 <__swsetup_r+0x6a>
 800ba80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba84:	4299      	cmp	r1, r3
 800ba86:	d002      	beq.n	800ba8e <__swsetup_r+0x66>
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7ff fd75 	bl	800b578 <_free_r>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	6363      	str	r3, [r4, #52]	; 0x34
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba98:	81a3      	strh	r3, [r4, #12]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6063      	str	r3, [r4, #4]
 800ba9e:	6923      	ldr	r3, [r4, #16]
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	f043 0308 	orr.w	r3, r3, #8
 800baa8:	81a3      	strh	r3, [r4, #12]
 800baaa:	6923      	ldr	r3, [r4, #16]
 800baac:	b94b      	cbnz	r3, 800bac2 <__swsetup_r+0x9a>
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bab8:	d003      	beq.n	800bac2 <__swsetup_r+0x9a>
 800baba:	4621      	mov	r1, r4
 800babc:	4630      	mov	r0, r6
 800babe:	f000 f929 	bl	800bd14 <__smakebuf_r>
 800bac2:	89a0      	ldrh	r0, [r4, #12]
 800bac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bac8:	f010 0301 	ands.w	r3, r0, #1
 800bacc:	d00a      	beq.n	800bae4 <__swsetup_r+0xbc>
 800bace:	2300      	movs	r3, #0
 800bad0:	60a3      	str	r3, [r4, #8]
 800bad2:	6963      	ldr	r3, [r4, #20]
 800bad4:	425b      	negs	r3, r3
 800bad6:	61a3      	str	r3, [r4, #24]
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	b943      	cbnz	r3, 800baee <__swsetup_r+0xc6>
 800badc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bae0:	d1ba      	bne.n	800ba58 <__swsetup_r+0x30>
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	0781      	lsls	r1, r0, #30
 800bae6:	bf58      	it	pl
 800bae8:	6963      	ldrpl	r3, [r4, #20]
 800baea:	60a3      	str	r3, [r4, #8]
 800baec:	e7f4      	b.n	800bad8 <__swsetup_r+0xb0>
 800baee:	2000      	movs	r0, #0
 800baf0:	e7f7      	b.n	800bae2 <__swsetup_r+0xba>
 800baf2:	bf00      	nop
 800baf4:	20000010 	.word	0x20000010
 800baf8:	0800bfa8 	.word	0x0800bfa8
 800bafc:	0800bfc8 	.word	0x0800bfc8
 800bb00:	0800bf88 	.word	0x0800bf88

0800bb04 <_close_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4d06      	ldr	r5, [pc, #24]	; (800bb20 <_close_r+0x1c>)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	602b      	str	r3, [r5, #0]
 800bb10:	f7f6 f813 	bl	8001b3a <_close>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_close_r+0x1a>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_close_r+0x1a>
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	20001d20 	.word	0x20001d20

0800bb24 <__sflush_r>:
 800bb24:	898a      	ldrh	r2, [r1, #12]
 800bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	0710      	lsls	r0, r2, #28
 800bb2e:	460c      	mov	r4, r1
 800bb30:	d458      	bmi.n	800bbe4 <__sflush_r+0xc0>
 800bb32:	684b      	ldr	r3, [r1, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dc05      	bgt.n	800bb44 <__sflush_r+0x20>
 800bb38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	dc02      	bgt.n	800bb44 <__sflush_r+0x20>
 800bb3e:	2000      	movs	r0, #0
 800bb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb46:	2e00      	cmp	r6, #0
 800bb48:	d0f9      	beq.n	800bb3e <__sflush_r+0x1a>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb50:	682f      	ldr	r7, [r5, #0]
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	d032      	beq.n	800bbbc <__sflush_r+0x98>
 800bb56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb58:	89a3      	ldrh	r3, [r4, #12]
 800bb5a:	075a      	lsls	r2, r3, #29
 800bb5c:	d505      	bpl.n	800bb6a <__sflush_r+0x46>
 800bb5e:	6863      	ldr	r3, [r4, #4]
 800bb60:	1ac0      	subs	r0, r0, r3
 800bb62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb64:	b10b      	cbz	r3, 800bb6a <__sflush_r+0x46>
 800bb66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb68:	1ac0      	subs	r0, r0, r3
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb70:	6a21      	ldr	r1, [r4, #32]
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b0      	blx	r6
 800bb76:	1c43      	adds	r3, r0, #1
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	d106      	bne.n	800bb8a <__sflush_r+0x66>
 800bb7c:	6829      	ldr	r1, [r5, #0]
 800bb7e:	291d      	cmp	r1, #29
 800bb80:	d82c      	bhi.n	800bbdc <__sflush_r+0xb8>
 800bb82:	4a2a      	ldr	r2, [pc, #168]	; (800bc2c <__sflush_r+0x108>)
 800bb84:	40ca      	lsrs	r2, r1
 800bb86:	07d6      	lsls	r6, r2, #31
 800bb88:	d528      	bpl.n	800bbdc <__sflush_r+0xb8>
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	6062      	str	r2, [r4, #4]
 800bb8e:	04d9      	lsls	r1, r3, #19
 800bb90:	6922      	ldr	r2, [r4, #16]
 800bb92:	6022      	str	r2, [r4, #0]
 800bb94:	d504      	bpl.n	800bba0 <__sflush_r+0x7c>
 800bb96:	1c42      	adds	r2, r0, #1
 800bb98:	d101      	bne.n	800bb9e <__sflush_r+0x7a>
 800bb9a:	682b      	ldr	r3, [r5, #0]
 800bb9c:	b903      	cbnz	r3, 800bba0 <__sflush_r+0x7c>
 800bb9e:	6560      	str	r0, [r4, #84]	; 0x54
 800bba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bba2:	602f      	str	r7, [r5, #0]
 800bba4:	2900      	cmp	r1, #0
 800bba6:	d0ca      	beq.n	800bb3e <__sflush_r+0x1a>
 800bba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbac:	4299      	cmp	r1, r3
 800bbae:	d002      	beq.n	800bbb6 <__sflush_r+0x92>
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f7ff fce1 	bl	800b578 <_free_r>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	6360      	str	r0, [r4, #52]	; 0x34
 800bbba:	e7c1      	b.n	800bb40 <__sflush_r+0x1c>
 800bbbc:	6a21      	ldr	r1, [r4, #32]
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	47b0      	blx	r6
 800bbc4:	1c41      	adds	r1, r0, #1
 800bbc6:	d1c7      	bne.n	800bb58 <__sflush_r+0x34>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0c4      	beq.n	800bb58 <__sflush_r+0x34>
 800bbce:	2b1d      	cmp	r3, #29
 800bbd0:	d001      	beq.n	800bbd6 <__sflush_r+0xb2>
 800bbd2:	2b16      	cmp	r3, #22
 800bbd4:	d101      	bne.n	800bbda <__sflush_r+0xb6>
 800bbd6:	602f      	str	r7, [r5, #0]
 800bbd8:	e7b1      	b.n	800bb3e <__sflush_r+0x1a>
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	e7ad      	b.n	800bb40 <__sflush_r+0x1c>
 800bbe4:	690f      	ldr	r7, [r1, #16]
 800bbe6:	2f00      	cmp	r7, #0
 800bbe8:	d0a9      	beq.n	800bb3e <__sflush_r+0x1a>
 800bbea:	0793      	lsls	r3, r2, #30
 800bbec:	680e      	ldr	r6, [r1, #0]
 800bbee:	bf08      	it	eq
 800bbf0:	694b      	ldreq	r3, [r1, #20]
 800bbf2:	600f      	str	r7, [r1, #0]
 800bbf4:	bf18      	it	ne
 800bbf6:	2300      	movne	r3, #0
 800bbf8:	eba6 0807 	sub.w	r8, r6, r7
 800bbfc:	608b      	str	r3, [r1, #8]
 800bbfe:	f1b8 0f00 	cmp.w	r8, #0
 800bc02:	dd9c      	ble.n	800bb3e <__sflush_r+0x1a>
 800bc04:	6a21      	ldr	r1, [r4, #32]
 800bc06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc08:	4643      	mov	r3, r8
 800bc0a:	463a      	mov	r2, r7
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	47b0      	blx	r6
 800bc10:	2800      	cmp	r0, #0
 800bc12:	dc06      	bgt.n	800bc22 <__sflush_r+0xfe>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc1a:	81a3      	strh	r3, [r4, #12]
 800bc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc20:	e78e      	b.n	800bb40 <__sflush_r+0x1c>
 800bc22:	4407      	add	r7, r0
 800bc24:	eba8 0800 	sub.w	r8, r8, r0
 800bc28:	e7e9      	b.n	800bbfe <__sflush_r+0xda>
 800bc2a:	bf00      	nop
 800bc2c:	20400001 	.word	0x20400001

0800bc30 <_fflush_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	690b      	ldr	r3, [r1, #16]
 800bc34:	4605      	mov	r5, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	b913      	cbnz	r3, 800bc40 <_fflush_r+0x10>
 800bc3a:	2500      	movs	r5, #0
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	b118      	cbz	r0, 800bc4a <_fflush_r+0x1a>
 800bc42:	6983      	ldr	r3, [r0, #24]
 800bc44:	b90b      	cbnz	r3, 800bc4a <_fflush_r+0x1a>
 800bc46:	f7ff fbb3 	bl	800b3b0 <__sinit>
 800bc4a:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <_fflush_r+0x6c>)
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	d11b      	bne.n	800bc88 <_fflush_r+0x58>
 800bc50:	686c      	ldr	r4, [r5, #4]
 800bc52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0ef      	beq.n	800bc3a <_fflush_r+0xa>
 800bc5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc5c:	07d0      	lsls	r0, r2, #31
 800bc5e:	d404      	bmi.n	800bc6a <_fflush_r+0x3a>
 800bc60:	0599      	lsls	r1, r3, #22
 800bc62:	d402      	bmi.n	800bc6a <_fflush_r+0x3a>
 800bc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc66:	f7ff fc66 	bl	800b536 <__retarget_lock_acquire_recursive>
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	f7ff ff59 	bl	800bb24 <__sflush_r>
 800bc72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc74:	07da      	lsls	r2, r3, #31
 800bc76:	4605      	mov	r5, r0
 800bc78:	d4e0      	bmi.n	800bc3c <_fflush_r+0xc>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	059b      	lsls	r3, r3, #22
 800bc7e:	d4dd      	bmi.n	800bc3c <_fflush_r+0xc>
 800bc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc82:	f7ff fc59 	bl	800b538 <__retarget_lock_release_recursive>
 800bc86:	e7d9      	b.n	800bc3c <_fflush_r+0xc>
 800bc88:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <_fflush_r+0x70>)
 800bc8a:	429c      	cmp	r4, r3
 800bc8c:	d101      	bne.n	800bc92 <_fflush_r+0x62>
 800bc8e:	68ac      	ldr	r4, [r5, #8]
 800bc90:	e7df      	b.n	800bc52 <_fflush_r+0x22>
 800bc92:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <_fflush_r+0x74>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	bf08      	it	eq
 800bc98:	68ec      	ldreq	r4, [r5, #12]
 800bc9a:	e7da      	b.n	800bc52 <_fflush_r+0x22>
 800bc9c:	0800bfa8 	.word	0x0800bfa8
 800bca0:	0800bfc8 	.word	0x0800bfc8
 800bca4:	0800bf88 	.word	0x0800bf88

0800bca8 <_lseek_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	; (800bcc8 <_lseek_r+0x20>)
 800bcac:	4604      	mov	r4, r0
 800bcae:	4608      	mov	r0, r1
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	602a      	str	r2, [r5, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f7f5 ff66 	bl	8001b88 <_lseek>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_lseek_r+0x1e>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_lseek_r+0x1e>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20001d20 	.word	0x20001d20

0800bccc <__swhatbuf_r>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	460e      	mov	r6, r1
 800bcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd4:	2900      	cmp	r1, #0
 800bcd6:	b096      	sub	sp, #88	; 0x58
 800bcd8:	4614      	mov	r4, r2
 800bcda:	461d      	mov	r5, r3
 800bcdc:	da07      	bge.n	800bcee <__swhatbuf_r+0x22>
 800bcde:	2300      	movs	r3, #0
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	89b3      	ldrh	r3, [r6, #12]
 800bce4:	061a      	lsls	r2, r3, #24
 800bce6:	d410      	bmi.n	800bd0a <__swhatbuf_r+0x3e>
 800bce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcec:	e00e      	b.n	800bd0c <__swhatbuf_r+0x40>
 800bcee:	466a      	mov	r2, sp
 800bcf0:	f000 f86e 	bl	800bdd0 <_fstat_r>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	dbf2      	blt.n	800bcde <__swhatbuf_r+0x12>
 800bcf8:	9a01      	ldr	r2, [sp, #4]
 800bcfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd02:	425a      	negs	r2, r3
 800bd04:	415a      	adcs	r2, r3
 800bd06:	602a      	str	r2, [r5, #0]
 800bd08:	e7ee      	b.n	800bce8 <__swhatbuf_r+0x1c>
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	6023      	str	r3, [r4, #0]
 800bd10:	b016      	add	sp, #88	; 0x58
 800bd12:	bd70      	pop	{r4, r5, r6, pc}

0800bd14 <__smakebuf_r>:
 800bd14:	898b      	ldrh	r3, [r1, #12]
 800bd16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd18:	079d      	lsls	r5, r3, #30
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	d507      	bpl.n	800bd30 <__smakebuf_r+0x1c>
 800bd20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	6123      	str	r3, [r4, #16]
 800bd28:	2301      	movs	r3, #1
 800bd2a:	6163      	str	r3, [r4, #20]
 800bd2c:	b002      	add	sp, #8
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	ab01      	add	r3, sp, #4
 800bd32:	466a      	mov	r2, sp
 800bd34:	f7ff ffca 	bl	800bccc <__swhatbuf_r>
 800bd38:	9900      	ldr	r1, [sp, #0]
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff fc6b 	bl	800b618 <_malloc_r>
 800bd42:	b948      	cbnz	r0, 800bd58 <__smakebuf_r+0x44>
 800bd44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd48:	059a      	lsls	r2, r3, #22
 800bd4a:	d4ef      	bmi.n	800bd2c <__smakebuf_r+0x18>
 800bd4c:	f023 0303 	bic.w	r3, r3, #3
 800bd50:	f043 0302 	orr.w	r3, r3, #2
 800bd54:	81a3      	strh	r3, [r4, #12]
 800bd56:	e7e3      	b.n	800bd20 <__smakebuf_r+0xc>
 800bd58:	4b0d      	ldr	r3, [pc, #52]	; (800bd90 <__smakebuf_r+0x7c>)
 800bd5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	6020      	str	r0, [r4, #0]
 800bd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd64:	81a3      	strh	r3, [r4, #12]
 800bd66:	9b00      	ldr	r3, [sp, #0]
 800bd68:	6163      	str	r3, [r4, #20]
 800bd6a:	9b01      	ldr	r3, [sp, #4]
 800bd6c:	6120      	str	r0, [r4, #16]
 800bd6e:	b15b      	cbz	r3, 800bd88 <__smakebuf_r+0x74>
 800bd70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd74:	4630      	mov	r0, r6
 800bd76:	f000 f83d 	bl	800bdf4 <_isatty_r>
 800bd7a:	b128      	cbz	r0, 800bd88 <__smakebuf_r+0x74>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	f043 0301 	orr.w	r3, r3, #1
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	89a0      	ldrh	r0, [r4, #12]
 800bd8a:	4305      	orrs	r5, r0
 800bd8c:	81a5      	strh	r5, [r4, #12]
 800bd8e:	e7cd      	b.n	800bd2c <__smakebuf_r+0x18>
 800bd90:	0800b349 	.word	0x0800b349

0800bd94 <__malloc_lock>:
 800bd94:	4801      	ldr	r0, [pc, #4]	; (800bd9c <__malloc_lock+0x8>)
 800bd96:	f7ff bbce 	b.w	800b536 <__retarget_lock_acquire_recursive>
 800bd9a:	bf00      	nop
 800bd9c:	20001d18 	.word	0x20001d18

0800bda0 <__malloc_unlock>:
 800bda0:	4801      	ldr	r0, [pc, #4]	; (800bda8 <__malloc_unlock+0x8>)
 800bda2:	f7ff bbc9 	b.w	800b538 <__retarget_lock_release_recursive>
 800bda6:	bf00      	nop
 800bda8:	20001d18 	.word	0x20001d18

0800bdac <_read_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d07      	ldr	r5, [pc, #28]	; (800bdcc <_read_r+0x20>)
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	4608      	mov	r0, r1
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	602a      	str	r2, [r5, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f7f5 fea0 	bl	8001b00 <_read>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_read_r+0x1e>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_read_r+0x1e>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20001d20 	.word	0x20001d20

0800bdd0 <_fstat_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d07      	ldr	r5, [pc, #28]	; (800bdf0 <_fstat_r+0x20>)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4608      	mov	r0, r1
 800bdda:	4611      	mov	r1, r2
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	f7f5 feb8 	bl	8001b52 <_fstat>
 800bde2:	1c43      	adds	r3, r0, #1
 800bde4:	d102      	bne.n	800bdec <_fstat_r+0x1c>
 800bde6:	682b      	ldr	r3, [r5, #0]
 800bde8:	b103      	cbz	r3, 800bdec <_fstat_r+0x1c>
 800bdea:	6023      	str	r3, [r4, #0]
 800bdec:	bd38      	pop	{r3, r4, r5, pc}
 800bdee:	bf00      	nop
 800bdf0:	20001d20 	.word	0x20001d20

0800bdf4 <_isatty_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d06      	ldr	r5, [pc, #24]	; (800be10 <_isatty_r+0x1c>)
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	602b      	str	r3, [r5, #0]
 800be00:	f7f5 feb7 	bl	8001b72 <_isatty>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	d102      	bne.n	800be0e <_isatty_r+0x1a>
 800be08:	682b      	ldr	r3, [r5, #0]
 800be0a:	b103      	cbz	r3, 800be0e <_isatty_r+0x1a>
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	20001d20 	.word	0x20001d20

0800be14 <_init>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	bf00      	nop
 800be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1a:	bc08      	pop	{r3}
 800be1c:	469e      	mov	lr, r3
 800be1e:	4770      	bx	lr

0800be20 <_fini>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	bf00      	nop
 800be24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be26:	bc08      	pop	{r3}
 800be28:	469e      	mov	lr, r3
 800be2a:	4770      	bx	lr
